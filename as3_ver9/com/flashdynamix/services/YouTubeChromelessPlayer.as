/*	.__       _____   ____    ______      ______   __  __     /\ \     /\  __`\/\  _`\ /\__  _\    /\__  _\ /\ \/\ \    \ \ \    \ \ \/\ \ \,\L\_\/_/\ \/    \/_/\ \/ \ \ `\\ \   .\ \ \  __\ \ \ \ \/_\__ \  \ \ \       \ \ \  \ \ , ` \  ..\ \ \L\ \\ \ \_\ \/\ \L\ \ \ \ \       \_\ \__\ \ \`\ \ ...\ \____/ \ \_____\ `\____\ \ \_\      /\_____\\ \_\ \_\....\/___/   \/_____/\/_____/  \/_/      \/_____/ \/_/\/_/	                                                          	                                                          .______  ____    ______  ______   _____   __  __  ____    ____     ____    ______   ____    ______   /\  _  \/\  _`\ /\__  _\/\__  _\ /\  __`\/\ \/\ \/\  _`\ /\  _`\  /\  _`\ /\__  _\ /\  _`\ /\__  _\  \ \ \L\ \ \ \/\_\/_/\ \/\/_/\ \/ \ \ \/\ \ \ `\\ \ \,\L\_\ \ \/\_\\ \ \L\ \/_/\ \/ \ \ \L\ \/_/\ \/  .\ \  __ \ \ \/_/_ \ \ \   \ \ \  \ \ \ \ \ \ , ` \/_\__ \\ \ \/_/_\ \ ,  /  \ \ \  \ \ ,__/  \ \ \  ..\ \ \/\ \ \ \L\ \ \ \ \   \_\ \__\ \ \_\ \ \ \`\ \/\ \L\ \ \ \L\ \\ \ \\ \  \_\ \__\ \ \/    \ \ \ ...\ \_\ \_\ \____/  \ \_\  /\_____\\ \_____\ \_\ \_\ `\____\ \____/ \ \_\ \_\/\_____\\ \_\     \ \_\....\/_/\/_/\/___/    \/_/  \/_____/ \/_____/\/_/\/_/\/_____/\/___/   \/_/\/ /\/_____/ \/_/      \/_/    Copyright (c) 2008 Lost In Actionscript - Shane McCartneyPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package com.flashdynamix.services {	import com.flashdynamix.data.YouTubePlayerErrorCode;	import com.flashdynamix.data.YouTubePlayerStateCode;	import com.flashdynamix.events.*;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.*;	import flash.net.URLRequest;	import flash.utils.Timer;	public class YouTubeChromelessPlayer extends Sprite {		private const ON_READY : String = "onReady";		private const ON_ERROR : String = "onError";		private const ON_STATE_CHANGE : String = "onStateChange";		private const ON_PLAYBACK_QUALITY_CHANGE : String = "onPlaybackQualityChange";		private var playerAPIUrl : String = "http://www.youtube.com/apiplayer?version=3";		private var loader : Loader;		private var player : Sprite;		private var playerTimer : Timer;		private var _width : Number = 320;		private var _height : Number = 240;		private var _paused : Boolean = false;		private var _playerState : int = -1;		private var _videoUrl : String = "";		private var _videoId : String = "";		private var _playbackQuality : String = "default";		private var _seeking : Boolean = false;		private var _playerReady : Boolean = false;		private var _apiLoaded : Boolean = false;		private var _isCued : Boolean = false;		private var _enabled : Boolean = false;		private var _started : Boolean = false;		private var seekTime : Number = -1;		private var lastTime : Number = -1;		public function YouTubeChromelessPlayer(videoId : String = "", quality : String = "default", width : int = 320, height : int = 240) {			_videoId = videoId;			_playbackQuality = quality;			_width = width;			_height = height;						loader = new Loader();			playerTimer = new Timer(30);						loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onAPIIOError);			loader.contentLoaderInfo.addEventListener(Event.INIT, onAPILoaded);			playerTimer.addEventListener(TimerEvent.TIMER, onProgress);						loader.load(new URLRequest(playerAPIUrl));						addChild(loader);		}		public function seek(seconds : Number, allowSeekAhead : Boolean = true) : void {			_seeking = true;			seekTime = currentTime;						if(_playerReady) Object(player).seekTo(seconds, allowSeekAhead);		}		public function seekAndResume(secs : Number, allowSeekAhead : Boolean = true) : void {			play();			seek(secs, allowSeekAhead);		}		public function unMute() : void {			if(_playerReady) Object(player).unMute();		}		public function mute() : void {			if(_playerReady) Object(player).mute();		}		public function setSize(width : Number, height : Number) : void {			_width = width;			_height = height;						if(_playerReady) Object(player).setSize(width, height);		}		public function loadById(videoId : String, startSeconds : Number = 0) : void {			_videoId = videoId;			_started = false;			_isCued = false;						playerTimer.start();						if(_playerReady) Object(player).loadVideoById(videoId, startSeconds);		}		public function loadByUrl(mediaContentUrl : String, startSeconds : Number = 0) : void {			_videoUrl = mediaContentUrl;			_started = false;			_isCued = false;						playerTimer.start();						if(_playerReady) Object(player).loadVideoByUrl(mediaContentUrl, startSeconds);		}		public function cueById(videoId : String, startSeconds : Number = 0) : void {			_videoId = videoId;			_started = false;			_isCued = true;						playerTimer.start();						if(_playerReady) Object(player).cueVideoById(videoId, startSeconds);		}		public function cueByUrl(mediaContentUrl : String, startSeconds : Number = 0) : void {			_videoUrl = mediaContentUrl;			_started = false;			_isCued = true;						playerTimer.start();						if(_playerReady) Object(player).cueVideoByUrl(mediaContentUrl, startSeconds);		}		public function stop() : void {			playerTimer.stop();						if(_playerReady) Object(player).stopVideo();		}		public function play() : void {			_paused = false;						if(_playerReady) Object(player).playVideo();		}		public function resume() : void {			play();		}		public function pause() : void {			_paused = true;						if(_playerReady) Object(player).pauseVideo();		}		public function togglePause() : void {			if(_paused) {				play();			} else {				pause();			}		}		public function set enabled(flag : Boolean) : void {			_enabled = flag;			this.mouseEnabled = this.mouseChildren = flag;		}		public function get enabled() : Boolean {			return _enabled;		}		public function get playerReady() : Boolean {			return _playerReady;		}		public function get apiLoaded() : Boolean {			return _apiLoaded;		}		public function set position(amount : Number) : void {			seek(duration * amount);		}		public function get position() : Number {			if(duration <= 0) return 0;						return currentTime / duration;		}		public function set volume(amount : Number) : void {			if(_playerReady) Object(player).setVolume(amount * 100);		}		public function get volume() : Number {			if(!_playerReady) return -1;						return Object(player).getVolume();		}		override public function set width(pixels : Number) : void {			_width = pixels;						setSize(_width, _height);		}		override public function get width() : Number {			return _width;		}		override public function set height(pixels : Number) : void {			_height = pixels;						setSize(_width, _height);		}		override public function get height() : Number {			return _height;		}		public function get videoStartBytes() : Number {			if(!_playerReady) return -1;						return Object(player).getVideoStartBytes();		}		public function get videoBytesTotal() : Number {			if(!_playerReady) return -1;						return Object(player).getVideoBytesTotal();		}		public function get videoBytesLoaded() : Number {			if(!_playerReady) return -1;						return Object(player).getVideoBytesLoaded();		}		public function get currentTime() : Number {			if(!_playerReady) return -1;						return	Object(player).getCurrentTime();		}		public function set playbackQuality(suggestedQuality : String) : void {			if(_playerReady) Object(player).setPlaybackQuality(suggestedQuality);		}		public function get playbackQuality() : String {			if(!_playerReady) return null;						return Object(player).getPlaybackQuality();		}		public function get availableQualityLevels() : Array {			if(!_playerReady) return null;						return Object(player).getAvailableQualityLevels();		}		public function get duration() : Number {			if(!_playerReady) return -1;						return Object(player).getDuration();		}		public function get videoUrl() : String {			if(!_playerReady) return null;						return Object(player).getVideoUrl();		}		public function get videoEmbedCode() : String {			if(!_playerReady) return null;						return Object(player).getVideoEmbedCode();		}		public function get playerState() : int {			if(!_playerReady) return -1;						return _playerState;		}		public function get muted() : Boolean {			if(!_playerReady) return false;						return Object(player).isMuted();		}		public function get videoId() : String {			return _videoId;		}		public function get progress() : Number {			if(videoBytesTotal <= 0) return 0;						return (videoBytesLoaded / videoBytesTotal);		}		public function get paused() : Boolean {			return _paused;		}		public function get loaded() : Boolean {			return (progress == 1);		}		public function get ratio() : Number {			return (_width / _height);		}		public function get isBuffering() : Boolean {			return (playerState == YouTubePlayerStateCode.BUFFERING);		}		public function get isSeeking() : Boolean {			return _seeking;		}		private function onAPILoaded(event : Event) : void {			_apiLoaded = true;						player = loader.content as Sprite;						player.addEventListener(ON_READY, onPlayerReady);			player.addEventListener(ON_ERROR, onPlayerError);			player.addEventListener(ON_STATE_CHANGE, onPlayerStateChange);			player.addEventListener(ON_PLAYBACK_QUALITY_CHANGE, onVideoPlaybackQualityChange);						dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.API_LOADED));		}		private function onAPIIOError(event : IOErrorEvent) : void {			dispatchEvent(new YouTubeChromelessPlayerErrorEvent(YouTubeChromelessPlayerErrorEvent.ERROR, YouTubePlayerErrorCode.PLAYER_WRAPPER_NOT_FOUND));		}		private function onVideoPlaybackQualityChange(event : Event) : void {			_playbackQuality = Object(event).data;		}		private function onPlayerError(event : Event) : void {			dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.ERROR, Object(event).data));		}		private function onPlayerReady(event : Event) : void {			_playerReady = true;						dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.PLAYER_READY));						setSize(_width, _height);			this.playbackQuality = _playbackQuality;			if(_isCued) {				if(_videoId != "") {					cueById(_videoId);				} else if(_videoUrl != "") {					cueByUrl(_videoUrl);				}			} else {				if(_videoId != "") {					loadById(_videoId);				} else if(_videoUrl != "") {					loadByUrl(_videoUrl);				}			}		}		private function onPlayerStateChange(event : Event) : void {			_playerState = Object(event).data;						dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.STATE_UPDATE, _playerState));						switch(_playerState) {				case YouTubePlayerStateCode.BUFFERING:					dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.BUFFERING));					break;				case YouTubePlayerStateCode.ENDED:					dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.ENDED));					break;				case YouTubePlayerStateCode.PAUSED:					dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.PAUSED));					break;				case YouTubePlayerStateCode.PLAYING:					dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.PLAYING));					break;				case YouTubePlayerStateCode.QUEUED:					dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.QUEUED));					break;				case YouTubePlayerStateCode.UNSTARTED:					dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.UNSTARTED));					break;			}		}		private function onProgress(event : TimerEvent) : void {			if(currentTime == lastTime) return;						lastTime = currentTime;						if(!_started && currentTime > 0) {				_started = true;				dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.STARTED));			}						if(_seeking && Math.abs(currentTime - seekTime) > 0.1) _seeking = false;						dispatchEvent(new YouTubeChromelessPlayerEvent(YouTubeChromelessPlayerEvent.PROGRESS));		}		public function destroy() : void {			stop();						playerTimer.removeEventListener(TimerEvent.TIMER, onProgress);			loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onAPIIOError);			loader.contentLoaderInfo.removeEventListener(Event.INIT, onAPILoaded);						if(apiLoaded) {								player.removeEventListener(ON_READY, onPlayerReady);				player.removeEventListener(ON_ERROR, onPlayerError);				player.removeEventListener(ON_STATE_CHANGE, onPlayerStateChange);				player.removeEventListener(ON_PLAYBACK_QUALITY_CHANGE, onVideoPlaybackQualityChange);								Object(player).destroy();								player = null;			}						loader.unload();		}	}}