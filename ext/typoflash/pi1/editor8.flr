movie 'C:\PROJECTS\HAVEATHINK.NET\haveathink.net\typo3conf\ext\typoflash\pi1\editor8.swf' {
// flash 8, total frames: 14, frame rate: 25 fps, 900x600 px, compressed

  movieClip 3 shadow {
  }

  movieClip 5  {
  }

  movieClip 7  {
  }

  movieClip 11  {

    frame 1 {
      stop();
    }
  }

  movieClip 18  {

    frame 1 {
      stop();
    }
  }

  movieClip 21  {

    frame 1 {
      stop();
    }
  }

  movieClip 22 bNullMC {
  }

  movieClip 23 Window {

    #initclip
      Object.registerClass('Window', net.typoflash.userinterface.windows.Window);
    #endinitclip
  }

  movieClip 26  {

    frame 1 {
      stop();
    }
  }

  movieClip 29  {
  }

  movieClip 30 bComboBox {

    #initclip
      Object.registerClass('bComboBox', net.typoflash.userinterface.components.bComboBox);
    #endinitclip
  }
  
  // unknown tag 88 length 138

  movieClip 35  {
  }

  movieClip 36 bDateField {

    #initclip
      Object.registerClass('bDateField', net.typoflash.userinterface.components.bDateField);
    #endinitclip
  }

  movieClip 38  {
  }

  movieClip 40  {
  }

  movieClip 42 bScrollThumb {

    #initclip
      Object.registerClass('bScrollThumb', net.typoflash.userinterface.components.bScrollThumb);
    #endinitclip
  }

  movieClip 44  {
  }

  movieClip 46  {
  }

  movieClip 47  {

    frame 1 {
      stop();
    }

    frame 8 {
      stop();
    }
  }

  movieClip 48  {

    frame 1 {
      stop();
    }

    frame 8 {
      stop();
    }
  }

  movieClip 49 bScrollBar {

    #initclip
      Object.registerClass('bScrollBar', net.typoflash.userinterface.components.bScrollBar);
    #endinitclip
  }

  movieClip 50 bScrollPane {

    #initclip
      Object.registerClass('bScrollPane', net.typoflash.userinterface.components.bScrollPane);
    #endinitclip

    instance vScroll of movieClip 49 bScrollBar {

      onClipEvent (construct) {
        target = '';
        horisontal = false;
        treatTextfieldAsMC = false;
        width = 12;
      }
    }

    instance hScroll of movieClip 49 bScrollBar {

      onClipEvent (construct) {
        target = '';
        horisontal = false;
        treatTextfieldAsMC = false;
        width = 12;
      }
    }
  }

  movieClip 51 bList {

    #initclip
      Object.registerClass('bList', net.typoflash.userinterface.components.bList);
    #endinitclip

    instance scrollpane of movieClip 50 bScrollPane {

      onClipEvent (construct) {
        vScrollPolicy = 'auto';
        hScrollPolicy = 'auto';
        _contentPath = '';
        resizable = false;
      }
    }
  }

  movieClip 52 bTree {

    #initclip
      Object.registerClass('bTree', net.typoflash.userinterface.components.bTree);
    #endinitclip
  }

  movieClip 54 bTextField {

    #initclip
      Object.registerClass('bTextField', net.typoflash.userinterface.components.bTextField);
    #endinitclip
  }

  movieClip 56 bFileMenuTick {
  }

  movieClip 57  {
  }

  movieClip 59 bFileMenuIcoBg {
  }

  movieClip 62  {

    frame 1 {
      stop();
    }
  }

  movieClip 63  {
  }

  movieClip 64  {

    frame 1 {
      stop();
    }

    frame 16 {
      gotoAndStop('up');
    }
  }

  movieClip 65  {
  }

  movieClip 68  {
  }

  movieClip 69 bFileMenuSubBtn {
  }

  movieClip 71 bFileMenuStroke {
  }

  movieClip 73 bFileMenuArrow {
  }

  movieClip 74 bFileMenuItem {

    #initclip
      Object.registerClass('bFileMenuItem', net.typoflash.userinterface.components.bFileMenuItem);
    #endinitclip
  }

  movieClip 75 bArrow {
  }

  movieClip 77  {

    frame 1 {
      stop();
    }
  }

  movieClip 78  {
  }

  movieClip 79  {

    frame 1 {
      stop();
    }

    frame 16 {
      gotoAndStop('up');
    }
  }

  movieClip 81  {

    frame 1 {
      stop();
    }
  }

  movieClip 83  {
  }

  movieClip 84  {
  }

  movieClip 86 bListItem {

    #initclip
      Object.registerClass('bListItem', net.typoflash.userinterface.components.bListItem);
    #endinitclip
  }

  movieClip 87  {
  }

  movieClip 88 bPopupBg {
  }

  movieClip 93 bListItemOpen {
  }

  movieClip 95 bListItemClose {
  }

  movieClip 96 Popup {

    frame 1 {
      debugMsg('Inited popup');
    }
  }

  movieClip 99  {
  }

  movieClip 100  {

    frame 1 {
      stop();
    }
  }

  movieClip 101  {

    frame 1 {
      stop();
    }

    frame 16 {
      gotoAndStop('up');
    }
  }

  movieClip 102  {
  }

  movieClip 104 StandardBtn {

    #initclip
      Object.registerClass('StandardBtn', net.typoflash.userinterface.StandardBtn);
    #endinitclip
  }

  movieClip 105  {
  }

  movieClip 106 popupTxt {
  }

  movieClip 109  {
  }

  movieClip 111  {
  }

  movieClip 112 ContextPopup {

    #initclip
      Object.registerClass('ContextPopup', net.typoflash.userinterface.popups.ContextPopup);
    #endinitclip
  }

  movieClip 115 bTextArea {

    #initclip
      Object.registerClass('bTextArea', net.typoflash.userinterface.components.bTextArea);
    #endinitclip

    instance scr of movieClip 49 bScrollBar {

      onClipEvent (construct) {
        target = 'txt';
        horisontal = false;
        treatTextfieldAsMC = false;
        width = 12;
      }
    }
  }

  movieClip 116 Confirm {

    #initclip
      Object.registerClass('Confirm', net.typoflash.userinterface.popups.Confirm);
    #endinitclip

    frame 1 {
      debugMsg('Inited popup confirm');
    }

    instance txt of movieClip 115 bTextArea {

      onClipEvent (construct) {
        vScrollPolicy = 'auto';
        html = false;
        editable = false;
        text = '';
        fontName = 'font_body*';
        embed = false;
      }
    }
  }

  movieClip 117  {
  }

  movieClip 119 Alert {

    #initclip
      Object.registerClass('Alert', net.typoflash.userinterface.popups.Alert);
    #endinitclip

    frame 1 {
      debugMsg('Inited popup alert');
    }

    instance txt of movieClip 115 bTextArea {

      onClipEvent (construct) {
        vScrollPolicy = 'auto';
        html = false;
        editable = false;
        text = '';
        fontName = 'font_body*';
        embed = false;
      }
    }
  }

  movieClip 121  {
  }

  movieClip 127  {
  }

  movieClip 128  {

    frame 1 {
      stop();
    }

    frame 8 {
      stop();
    }

    frame 15 {
      stop();
    }

    frame 21 {
      stop();
    }

    frame 22 {
      stop();
    }
  }

  movieClip 130 icon_status_green {
  }

  movieClip 143  {

    frame 1 {
      stop();
    }
  }

  movieClip 145 EditorIcon {

    frame 1 {
      stop();
    }
  }

  movieClip 147 icon_view {
  }

  movieClip 150 icon_browse {
  }

  movieClip 154 icon_delete {
  }

  movieClip 156 icon_close {
  }

  movieClip 159 icon_save {
  }

  movieClip 164 icon_login {
  }

  movieClip 166 icon_status_yellow {
  }

  movieClip 168 icon_status_red {
  }

  movieClip 170  {
  }

  movieClip 171 icon_pending {

    instance of movieClip 170  {

      onClipEvent (enterFrame) {
        this._rotation += 10;
      }
    }
  }

  movieClip 174  {
  }

  movieClip 175 icon_logout {

    frame 1 {
      stop();
    }

    frame 13 {
      stop();
    }

    frame 20 {
      stop();
    }
  }

  movieClip 178 icon_emotions {
  }

  movieClip 179  {
  }

  movieClip 180 ConfEditorHeader {

    instance save_btn of movieClip 104 StandardBtn {

      onClipEvent (load) {
        this.setIcon('icon_save');
      }
    }

    instance delete_btn of movieClip 104 StandardBtn {

      onClipEvent (load) {
        this.setIcon('icon_delete');
      }
    }

    instance close_btn of movieClip 104 StandardBtn {

      onClipEvent (load) {
        this.setIcon('icon_close');
      }
    }
  }

  movieClip 182 EditorFrame {
  }

  movieClip 184  {
  }

  movieClip 185 bFileMenuItem  {

    #initclip
      Object.registerClass('bFileMenuItem ', net.typoflash.userinterface.components.bFileMenuItem);
    #endinitclip
  }

  movieClip 186 Editor {

    #initclip
      Object.registerClass('Editor', net.typoflash.editor.Editor);
    #endinitclip

    instance filemenu of movieClip 185 bFileMenuItem  {

      onClipEvent (construct) {
        varName = 'defaultValue';
      }
    }
  }

  movieClip 188 Tool_rotate {
  }

  movieClip 190 Tool_move {
  }

  movieClip 192 Tool_resize {
  }

  movieClip 193 bFileMenu {

    #initclip
      Object.registerClass('bFileMenu', net.typoflash.userinterface.components.bFileMenu);
    #endinitclip
  }

  movieClip 194 FileMenu {

    #initclip
      Object.registerClass('FileMenu', net.typoflash.editor.FileMenu);
    #endinitclip

    instance filemenu of movieClip 193 bFileMenu {

      onClipEvent (construct) {
        varName = 'defaultValue';
      }
    }
  }

  movieClip 195 EditorContext {
  }

  movieClip 202 BoundingBox {
  }

  movieClip 204 CheckFalseDisabled {
  }

  movieClip 206 CheckThemeColor1 {

    frame 1 {
      mx.skins.ColoredSkinElement.setColorStyle(this, 'themeColor');
    }
  }

  movieClip 208 CheckFalseDown {
  }

  movieClip 209 CheckFalseOver {
  }

  movieClip 211 CheckFalseUp {
  }

  movieClip 213 CheckTrueDisabled {
  }

  movieClip 214 CheckTrueDown {
  }

  movieClip 215 CheckTrueOver {
  }

  movieClip 216 CheckTrueUp {
  }

  movieClip 217 CheckBoxAssets {

    #initclip
      mx.controls.CheckBox.prototype.adjustFocusRect = function () {
        var v4 = this._parent.focus_mc;
        var v2 = this.iconName;
        var v3 = this.getStyle('themeColor');
        if (v3 == undefined) {
          v3 = 8453965;
        }
        var v8 = v2._width + 4;
        var v5 = v2._height + 4;
        v4.setSize(v8, v5, 0, 100, v3);
        var v7 = v2._x;
        var v6 = v2._y;
        v4.move(this.x - 2 + v7, this.y + v6 - 2);
      };

    #endinitclip

    frame 1 {
    }
  }

  movieClip 219 BrdrShdw {

    frame 1 {
      mx.skins.ColoredSkinElement.setColorStyle(this, 'shadowColor');
    }
  }

  movieClip 221 BrdrFace {

    frame 1 {
      mx.skins.ColoredSkinElement.setColorStyle(this, 'buttonColor');
    }
  }

  movieClip 222 SimpleButtonDown {
  }

  movieClip 224 BrdrBlk {

    frame 1 {
      mx.skins.ColoredSkinElement.setColorStyle(this, 'borderColor');
    }
  }

  movieClip 226 BrdrHilght {

    frame 1 {
      mx.skins.ColoredSkinElement.setColorStyle(this, 'highlightColor');
    }
  }

  movieClip 227 SimpleButtonIn {
  }

  movieClip 228 SimpleButtonUp {
  }

  movieClip 229 Defaults {

    #initclip
      Object.registerClass('Defaults', mx.skins.halo.Defaults);
    #endinitclip
  }

  movieClip 230 UIObjectExtensions {

    #initclip
      Object.registerClass('UIObjectExtensions', mx.core.ext.UIObjectExtensions);
    #endinitclip
  }

  movieClip 231 UIObject {

    #initclip
      Object.registerClass('UIObject', mx.core.UIObject);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  button 234 {

    on (keyPress '<Tab>') {
      this.tabHandler();
    }
  }

  movieClip 235  {

    #initclip
      Object.registerClass('FocusManager', mx.managers.FocusManager);
      if (_root.focusManager == undefined) {
        _root.createClassObject(mx.managers.FocusManager, 'focusManager', mx.managers.DepthManager.highestDepth--);
      }
    #endinitclip

    frame 1 {
    }
  }

  movieClip 236 FocusRect {

    #initclip
      Object.registerClass('FocusRect', mx.skins.halo.FocusRect);
    #endinitclip
  }

  movieClip 237 FocusManager {

    #initclip
      Object.registerClass('FocusManager', mx.managers.FocusManager);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 238 UIComponentExtensions {

    #initclip
      Object.registerClass('UIComponentExtensions', mx.core.ext.UIComponentExtensions);
    #endinitclip
  }

  movieClip 239 UIComponent {

    #initclip
      Object.registerClass('UIComponent', mx.core.UIComponent);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 240 SimpleButton {

    #initclip
      Object.registerClass('SimpleButton', mx.controls.SimpleButton);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 241 Border {

    #initclip
      Object.registerClass('Border', mx.skins.Border);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 242 RectBorder {

    #initclip
      mx.skins.SkinElement.registerElement(mx.skins.RectBorder.symbolName, Object(mx.skins.RectBorder));
      Object.registerClass('RectBorder', mx.skins.halo.RectBorder);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 243 ButtonSkin {

    #initclip
      Object.registerClass('ButtonSkin', mx.skins.halo.ButtonSkin);
    #endinitclip
  }

  movieClip 244 Button {

    #initclip
      Object.registerClass('Button', mx.controls.Button);
    #endinitclip

    frame 1 {
      stop();
    }

    instance of movieClip 240 SimpleButton {

      onClipEvent (initialize) {
        selected = false;
        toggle = false;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }
  }

  movieClip 245 CheckBox {

    #initclip
      Object.registerClass('CheckBox', mx.controls.CheckBox);
    #endinitclip

    frame 1 {
      stop();
    }

    instance of movieClip 244 Button {

      onClipEvent (initialize) {
        icon = '';
        label = 'Button';
        labelPlacement = 'right';
        selected = false;
        toggle = false;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }
  }

  frame 1 {
    Stage.scaleMode = 'noScale';
    Stage.align = 'TL';
    stop();
  }

  movieClip 267  {
  }

  movieClip 269  {
  }
  
  // unknown tag 88 length 70

  movieClip 280 LoginBox {

    #initclip
      Object.registerClass('LoginBox', net.typoflash.userinterface.LoginBox);
    #endinitclip

    frame 1 {
      stop();
    }

    instance rememberMe_chk of movieClip 245 CheckBox {

      onClipEvent (construct) {
        label = '';
        labelPlacement = 'right';
        selected = false;
      }
    }
  }

  movieClip 281 TypoFlash {

    #initclip
      Object.registerClass('TypoFlash', net.typoflash.editor.TypoFlash);
    #endinitclip

    instance BEloginBox of movieClip 280 LoginBox {

      onClipEvent (construct) {
        mode = 'BE';
        autoCheck = true;
      }
    }
  }

  movieClip 282 __Packages.net.typoflash.userinterface.components.bComponentBase {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bComponentBase) {
        var v1 = function () {
          function doResize(obj, item) {}

          super();
          this._x = Math.round(this._x);
          this._y = Math.round(this._y);
          this._height = Math.round(this._height);
          this._width = Math.round(this._width);
          this.width = this._width;
          this.height = this._height;
          this.x = this._x;
          this.y = this._y;
          this._yscale = 100;
          this._xscale = 100;
          var v4 = _global.TF.CONF.COMPONENT_STYLE;
          this.focusBackgroundColor = v4.focusBackgroundColor;
          this.focusBorderColor = v4.focusBorderColor;
          this.focusTextcolor = v4.focusTextcolor;
          this.blurBackgroundColor = v4.blurBackgroundColor;
          this.blurBorderColor = v4.blurBorderColor;
          this.blurTextcolor = v4.blurTextcolor;
          this.dynamicFontId = v4.dynamicFontId;
          this.dynamicFontURL = _global.TF.DYNAMIC_FONTS[this.dynamicFontId];
          if (this.dynamicFontId != null && this.dynamicFontURL != null) {
            _global.TF.FONT_MANAGER.addEventListener('onFontRegister', this);
          }
          this.dynamicFont = _global.TF.FONT_MANAGER.getReferenceFromURL(this.dynamicFontURL);
          if (this.focusBackgroundColor == null) {
            this.focusBackgroundColor = 16777215;
          }
          if (this.focusBorderColor == null) {
            this.focusBorderColor = 3394560;
          }
          if (this.focusTextcolor == null) {
            this.focusTextcolor = 0;
          }
          if (this.blurBackgroundColor == null) {
            this.blurBackgroundColor = 16777215;
          }
          if (this.blurBorderColor == null) {
            this.blurBorderColor = 10066329;
          }
          if (this.blurTextcolor == null) {
            this.blurTextcolor = 3355443;
          }
          this.txt.blurBorderColor = this.blurBorderColor;
          this.txt.borderColor = this.txt.blurBorderColor;
          this.txt.blurBackgroundColor = this.blurBackgroundColor;
          this.txt.backgroundColor = this.txt.blurBackgroundColor;
          this.txt.blurTextcolor = this.blurTextcolor;
          this.txt.textColor = this.txt.blurTextcolor;
          this.txt.focusBackgroundColor = this.focusBackgroundColor;
          this.txt.focusBorderColor = this.focusBorderColor;
          this.txt.focusTextcolor = this.focusTextcolor;
          this.txt.antiAliasType = 'advanced';
          this.txt.gridFitType = 'pixel';
          this.txt.onSetFocus = function () {
            this.backgroundColor = this.focusBackgroundColor;
            this.borderColor = this.focusBorderColor;
            if (!this.html) {
              this.textColor = this.focusTextcolor;
            }
          };

          this.txt.onKillFocus = function () {
            this.backgroundColor = this.blurBackgroundColor;
            this.borderColor = this.blurBorderColor;
            if (!this.html) {
              this.textColor = this.blurTextcolor;
            }
          };

          var v6 = new TextFormat();
          v6.font = this.font;
          this.defaultLabel = 'Select';
          this.txt.autoSize = 'left';
          this.txt.text = this.defaultLabel;
          this.setSize(this.width, this.height);
          _global.TF.CORE_EVENTS.addEventListener('onSetComponentStyle', this);
          mx.events.EventDispatcher.initialize(this);
          var v5 = {};
          v5.root = this;
          v5.onResize = function () {
            this.root.onStageResize();
          };

          Stage.addListener(v5);
          this.focusEnabled = true;
          this.init();
        };

        net.typoflash.userinterface.components.bComponentBase = v1;
        net.typoflash.userinterface.components.bComponentBase extends MovieClip;
        var v2 = v1.prototype;
        v2.init = function () {};

        v2.onLoad = function () {};

        v2.setSize = function (w, h) {
          var v2 = {};
          v2.w = w;
          v2.h = h;
          v2.target = this;
          v2.type = 'onResize';
          this.dispatchEvent(v2);
        };

        v2.refresh = function () {};

        v2.getValue = function () {
          return this.selected;
        };

        v2.setValue = function (v) {
          this.selected = v;
        };

        v2.onStageResize = function () {};

        v2.setGroup = function (g) {
          this.group = g;
        };

        v2.onSetComponentStyle = function (s) {
          if (s.group == null || s.group == this.group) {
            if (s.component == null || s.component == this.id) {
              for (var v3 in s.style) {
                this[v3] = s.style[v3];
              }
              this.refresh();
            }
          }
        };

        v2.onFontRegister = function (o) {
          if (_global.TF.FONT_MANAGER.getReferenceFromURL(this.dynamicFontURL) == o.font) {
            this.dynamicFont = o.font;
            this.refresh();
          }
        };

        v2.useDynamicFonts = true;
        v2.applyFontFormat = true;
        ASSetPropFlags(net.typoflash.userinterface.components.bComponentBase.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 250 __Packages.mx.events.EventDispatcher {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.events) {
        _global.mx.events = new Object();
      }
      if (!_global.mx.events.EventDispatcher) {
        var v1 = function () {};

        mx.events.EventDispatcher = v1;
        var v2 = v1.prototype;
        v1._removeEventListener = function (queue, event, handler) {
          if (queue != undefined) {
            var v4 = queue.length;
            var v1;
            v1 = 0;
            while (v1 < v4) {
              var v2 = queue[v1];
              if (v2 == handler) {
                queue.splice(v1, 1);
                return undefined;
              }
              ++v1;
            }
          }
        };

        v1.initialize = function (object) {
          if (mx.events.EventDispatcher._fEventDispatcher == undefined) {
            mx.events.EventDispatcher._fEventDispatcher = new mx.events.EventDispatcher();
          }
          object.addEventListener = mx.events.EventDispatcher._fEventDispatcher.addEventListener;
          object.removeEventListener = mx.events.EventDispatcher._fEventDispatcher.removeEventListener;
          object.dispatchEvent = mx.events.EventDispatcher._fEventDispatcher.dispatchEvent;
          object.dispatchQueue = mx.events.EventDispatcher._fEventDispatcher.dispatchQueue;
        };

        v2.dispatchQueue = function (queueObj, eventObj) {
          var v7 = '__q_' + eventObj.type;
          var v4 = queueObj[v7];
          if (v4 != undefined) {
            var v5;
            for (v5 in v4) {
              var v1 = v4[v5];
              var v3 = typeof v1;
              if (v3 == 'object' || v3 == 'movieclip') {
                if (v1.handleEvent != undefined) {
                  v1.handleEvent(eventObj);
                }
                if (v1[eventObj.type] != undefined) {
                  if (mx.events.EventDispatcher.exceptions[eventObj.type] == undefined) {
                    v1[eventObj.type](eventObj);
                  }
                }
              } else {
                v1.apply(queueObj, [eventObj]);
              }
            }
          }
        };

        v2.dispatchEvent = function (eventObj) {
          if (eventObj.target == undefined) {
            eventObj.target = this;
          }
          this[eventObj.type + 'Handler'](eventObj);
          this.dispatchQueue(this, eventObj);
        };

        v2.addEventListener = function (event, handler) {
          var v3 = '__q_' + event;
          if (this[v3] == undefined) {
            this[v3] = new Array();
          }
          _global.ASSetPropFlags(this, v3, 1);
          mx.events.EventDispatcher._removeEventListener(this[v3], event, handler);
          this[v3].push(handler);
        };

        v2.removeEventListener = function (event, handler) {
          var v2 = '__q_' + event;
          mx.events.EventDispatcher._removeEventListener(this[v2], event, handler);
        };

        v1._fEventDispatcher = undefined;
        v1.exceptions = {'move': 1, 'draw': 1, 'load': 1};
        ASSetPropFlags(mx.events.EventDispatcher.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 283 __Packages.net.typoflash.userinterface.components.bPopupSelector {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bPopupSelector) {
        var v1 = function () {
          super();
          if (this.iconMargin == null) {
            this.iconMargin = 20;
          }
          this.depthManager = _global.TF.TEMPLATE.depthManager;
        };

        net.typoflash.userinterface.components.bPopupSelector = v1;
        net.typoflash.userinterface.components.bPopupSelector extends net.typoflash.userinterface.components.bComponentBase;
        var v2 = v1.prototype;
        v2.setSize = function (w, h) {
          this.bg._width = w;
          this.bg._height = h;
          var v2 = {};
          v2.w = w;
          v2.h = h;
          v2.target = this;
          v2.type = 'onResize';
          this.dispatchEvent(v2);
        };

        v2.setDataProvider = function (d, m) {
          if (d.toString() == 'bDataProvider') {
            this.dataProvider = d;
          } else {
            this.dataProvider = new net.typoflash.userinterface.components.bDataProvider(d, m);
          }
          this.dataProvider.addEventListener('onSelect', this);
          this.dataProvider.addEventListener('onMultipleSelect', this);
        };

        v2.onSelect = function (o) {
          this.close();
          this.txt.text = o.node.attributes.label;
          if (this.dynamicFont != null) {
            _global.TF.FONT_MANAGER.applyTextFormatByReferenceName(this.dynamicFont, this.txt);
          }
          if (this.autoResize) {
            this.setSize(Math.max(this.txt._width + this.iconMargin, this.width), this.height);
          }
          this.dataProvider = o.dataProvider;
          if (!o.init) {
            o.target = this;
            this.dispatchEvent(o);
            o.type = 'change';
            this.dispatchEvent(o);
          }
        };

        v2.onMultipleSelect = function (o) {
          this.txt.text = o.node.attributes.label;
          if (this.dynamicFont != null) {
            _global.TF.FONT_MANAGER.applyTextFormatByReferenceName(this.dynamicFont, this.txt);
          }
          this.dataProvider = o.dataProvider;
          if (!o.init) {
            o.target = this;
            this.dispatchEvent(o);
            o.type = 'change';
            this.dispatchEvent(o);
          }
        };

        v2.close = function () {
          this.killMouseLayer.onPress();
        };

        v2.__get__selected = function () {
          return this.dataProvider.__get__selected();
        };

        v2.__set__selected = function (s) {
          this.dataProvider.__set__selected(s);
          return this.__get__selected();
        };

        v2.setInitSelected = function (s) {
          this.dataProvider.setInitSelected(s);
        };

        v2.setSelected = function (s) {
          this.dataProvider.setSelected(s);
        };

        v2.createKillMouseLayer = function () {
          var v2 = this.depthManager.newPopup();
          v2.beginFill(16777215, 0);
          v2.lineStyle(0, 16711935, 0);
          v2.moveTo(0, 0);
          v2.lineTo(Stage.width, 0);
          v2.lineTo(Stage.width, Stage.height);
          v2.lineTo(0, Stage.height);
          v2.endFill();
          var v3 = {'x': 0, 'y': 0};
          v2.globalToLocal(v3);
          v2._x = v3.x;
          v2._y = v3.y;
          v2.onPress = function () {
            this.mc.removeMovieClip();
            this.removeMovieClip();
          };

          v2.useHandCursor = 0;
          return v2;
        };

        v2.addProperty('selected', v2.__get__selected, v2.__set__selected);
        ASSetPropFlags(net.typoflash.userinterface.components.bPopupSelector.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 284 __Packages.net.typoflash.userinterface.components.bDataProvider {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bDataProvider) {
        var v1 = function (a, m, p) {
          mx.events.EventDispatcher.initialize(this);
          this.selectedItem = {};
          this.setData(a, m, p);
        };

        net.typoflash.userinterface.components.bDataProvider = v1;
        var v2 = v1.prototype;
        v2.toString = function () {
          return 'bDataProvider';
        };

        v2.setData = function (a, m, p) {
          this.multipleSelect = m;
          this.xml = this.array2xml(a, p);
          if (p == null) {
            this._data = a;
          } else {
            this._data = this.xml2object(this.xml);
          }
        };

        v2.__get__data = function () {
          return this.xml2object(this.xml);
        };

        v2.__set__data = function (d) {
          this._data = d;
          return this.__get__data();
        };

        v2.__get__length = function () {
          return this.xml.firstChild.childNodes.length;
        };

        v2.selectAndOpen = function (n) {
          this.activeNode = n;
          var v2 = {};
          v2.type = '_onSelectAndOpen';
          v2.node = n;
          this.dispatchEvent(v2);
        };

        v2.__set__selected = function (n) {
          this.setSelected(n);
          return this.__get__selected();
        };

        v2.setSelected = function (n, init) {
          if (n.data != null) {
            this.activeNode = this.xml.getNodeBy('attributes.data', n.data);
          } else {
            if (n.nodeType > 0) {
              this.activeNode = n;
            } else {
              this.activeNode = this.xml.getNodeBy('attributes.data', n);
              if (this.activeNode == null) {
                this.activeNode = this.xml.getNodeBy('attributes.label', n);
              }
            }
          }
          if (this.activeNode == null) {
            return false;
          }
          if (this.multipleSelect) {
            var v2 = {};
            v2.type = '_onMultipleSelect';
            v2.node = this.activeNode;
            this.dispatchEvent(v2);
            v2.type = 'onMultipleSelect';
            v2.init = init;
            v2.selected = this.selected;
            this._data = this.data;
            v2.dataProvider = this;
            this.dispatchEvent(v2);
            return true;
          }
          v2 = {};
          v2.type = '_onSelect';
          v2.node = this.activeNode;
          this.dispatchEvent(v2);
          v2.type = 'onSelect';
          v2.selected = this.selected;
          v2.init = init;
          this._data = this.data;
          v2.dataProvider = this;
          this.dispatchEvent(v2);
          return true;
        };

        v2.__get__selected = function () {
          var v2 = [];
          for (var v3 in this.selectedItem) {
            if (this.selectedItem[v3] != null) {
              v2.push(this.xml2object(this.selectedItem[v3]));
            }
          }
          if (this.multipleSelect) {
            return v2;
          } else {
            return v2[0];
          }
        };

        v2.setInitSelected = function (s) {
          this.setSelected(s, true);
        };

        v2.array2xml = function (a, parentAtt) {
          var v2 = new net.typoflash.xml.XXX('<root></root>');
          this.id = 0;
          if (a.length > 0) {
            v2.firstChild.appendChild(this.convertSubdata(a, v2.firstChild, ''));
          }
          if (parentAtt != null) {
            v2 = this.escapeFlatland(v2, parentAtt);
          }
          return v2;
        };

        v2.convertSubdata = function (p, x, rLine) {
          var v2;
          var v6;
          var v3 = 0;
          while (v3 < p.length) {
            v2 = new XMLNode(1, 'item');
            for (var v5 in p[v3]) {
              if (v5 != 'subdata') {
                v2.attributes[v5] = p[v3][v5];
              }
            }
            v2.attributes.rootline = rLine + '_' + v3;
            v6 = v2.attributes.rootline;
            v2.attributes.mRoot = this;
            if (p[v3].subdata.length > 0) {
              v2 = this.convertSubdata(p[v3].subdata, v2, v6);
            }
            x.appendChild(v2);
            this.addEventListener('_onSelectAndOpen', v2);
            v2._onSelectAndOpen = function (n) {
              if (n.node == this) {
                this.attributes.isSelected = true;
                this.attributes.mc.bg.states.gotoAndStop('active');
              } else {
                this.attributes.isSelected = false;
                this.attributes.mc.bg.states.gotoAndStop('passive');
                if (this.attributes.mRoot.isInActiveRootline(this)) {
                  this.attributes.isOpen = true;
                }
              }
            };

            this.addEventListener('_onSelect', v2);
            v2._onSelect = function (n) {
              if (n.node == this) {
                this.attributes.isSelected = true;
                this.attributes.mc.bg.states.gotoAndStop('active');
                this.attributes.mRoot.selectedItem[this.attributes.rootline] = this;
              } else {
                this.attributes.isSelected = false;
                this.attributes.mc.bg.states.gotoAndStop('passive');
                this.attributes.mRoot.selectedItem[this.attributes.rootline] = null;
              }
            };

            this.addEventListener('_onMultipleSelect', v2);
            v2._onMultipleSelect = function (n) {
              if (n.node == this && !this.attributes.isSelected) {
                this.attributes.isSelected = true;
                this.attributes.mc.bg.states.gotoAndStop('active');
                this.attributes.mRoot.selectedItem[this.attributes.rootline] = this;
              } else {
                if (n.node == this) {
                  this.attributes.isSelected = false;
                  this.attributes.mc.bg.states.gotoAndStop('passive');
                  this.attributes.mRoot.selectedItem[this.attributes.rootline] = null;
                }
              }
            };

            ++v3;
          }
          return x;
        };

        v2.isInActiveRootline = function (node) {
          return this.activeNode.attributes.rootline.indexOf(node.attributes.rootline) == 0;
        };

        v2.xml2object = function (n) {
          var v4 = {};
          for (var v6 in n.attributes) {
            if (v6 != 'subdata' && v6 != 'mRoot') {
              v4[v6] = n.attributes[v6];
            }
          }
          if (n.hasChildNodes()) {
            var v5 = [];
            var v2 = 0;
            while (v2 < n.childNodes.length) {
              v5.push(this.xml2object(n.childNodes[v2]));
              ++v2;
            }
            v4.subdata = v5;
          }
          return v4;
        };

        v2.escapeFlatland = function (x, parentAtt) {
          var v5 = function (n) {
            if (Number(n.attributes[parentAtt]) > 0) {
              return true;
            } else {
              return false;
            }
          };

          var v2 = x.search(v5);
          var v3;
          var v1 = 0;
          while (v1 < v2.length) {
            v3 = x.getNodeBy('attributes.data.uid', v2[v1].attributes[parentAtt]);
            if (v3 != null) {
              v3.appendChild(v2[v1]);
            } else {
              v2[v1].attributes.label = 'ORPHAN: ' + v2[v1].attributes.label;
            }
            ++v1;
          }
          return x;
        };

        v2.replaceChildNodes = function (oldData, newNode) {
          var v3 = this.xml.getNodeBy('attributes.data', oldData);
          var v4 = v3.childNodes.length;
          while (v4--) {
            v3.childNodes[v4].removeNode();
          }
          var v5;
          var v2 = 0;
          while (v2 < newNode.firstChild.childNodes.length) {
            v5 = newNode.firstChild.childNodes[v2].cloneNode(true);
            v3.appendChild(v5);
            ++v2;
          }
        };

        v2.multipleSelect = false;
        v2.addProperty('data', v2.__get__data, v2.__set__data);
        v2.addProperty('length', v2.__get__length, function () {});
        v2.addProperty('selected', v2.__get__selected, v2.__set__selected);
        ASSetPropFlags(net.typoflash.userinterface.components.bDataProvider.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 285 __Packages.net.typoflash.xml.XXX {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.xml) {
        _global.net.typoflash.xml = new Object();
      }
      if (!_global.net.typoflash.xml.XXX) {
        var v1 = function ($xml) {
          super($xml);
          this.ignoreWhite = true;
        };

        net.typoflash.xml.XXX = v1;
        net.typoflash.xml.XXX extends XML;
        var v2 = v1.prototype;
        v2.onData = function (src) {
          if (src == undefined) {
            this.onLoad(false);
            net.typoflash.utils.Debug.trace('Error loading XML from ' + this._url + '\n');
            net.typoflash.utils.Debug.trace(this.getStatusMsg());
            this.onError('There has been a technical error. Sorry for the inconvenience. ', false);
          } else {
            this.parseXML(src);
            this.loaded = true;
            this.onLoad(true);
          }
        };

        v2.load = function (url) {
          if (url == undefined) {
            net.typoflash.utils.Debug.trace('Error. XML missing load url.');
          } else {
            this._url = url;
            net.typoflash.utils.Debug.trace('Loading XML from ' + this._url);
            super.load(url);
          }
        };

        v2.sendAndLoad = function (url, targetXMLobject) {
          if (url == undefined) {
            net.typoflash.utils.Debug.trace('Error. XML missing load url.');
          } else {
            if (targetXMLobject == undefined) {
              net.typoflash.utils.Debug.trace('Error. XML missing targetXMLobject.');
            } else {
              this._url = url;
              this._target = targetXMLobject;
              net.typoflash.utils.Debug.trace('Sending XML to ' + this._url);
              super.sendAndLoad(url, targetXMLobject);
            }
          }
        };

        v2.getNodeBy = function (by, val, currNode) {
          if (currNode == null) {
            var currNode = this;
          }
          var n = false;
          var i = 0;
          while (i < currNode.childNodes.length) {
            n = currNode.childNodes[i];
            if (eval('n.' + by) == val) {
              return n;
              break;
            } else {
              n = this.getNodeBy(by, val, n);
              if (n) {
                return n;
                break;
              }
            }
            ++i;
          }
          return false;
        };

        v2.getArrayNodesBy = function (by, val, currNode, deep) {
          if (currNode == null) {
            var currNode = this.firstChild;
          }
          if (deep == null) {
            deep = true;
          }
          var i = 0;
          var nod;
          var arr = currNode.childNodes;
          var len = arr.length;
          var func = arguments.callee;
          var a = [];
          while (i < len) {
            nod = arr[i++];
            (eval('nod.' + by) == val) ? a.push(nod) : '';
            if (!(deep and nod.firstChild != null)) {
            } else {
              a = a.concat(func.apply(this, [by, val, nod, true]));
            }
            '';
          }
          return a;
        };

        v2.search = function (searchFunc, currNode, arr) {
          if (currNode == null) {
            currNode = this.firstChild;
          }
          if (arr == null) {
            arr = [];
          }
          var v2 = 0;
          while (v2 < currNode.childNodes.length) {
            if (searchFunc(currNode.childNodes[v2])) {
              arr.push(currNode.childNodes[v2]);
            }
            if (currNode.childNodes[v2].hasChildNodes()) {
              arr = this.search(searchFunc, currNode.childNodes[v2], arr);
            }
            ++v2;
          }
          return arr;
        };

        v2.getStatusMsg = function () {
          var v3 = this.status;
          var v2;
          if (v3 == 0) {
            v2 = 'XML not found.';
            return v2;
          }
          if (v3 == -2) {
            v2 = 'A CDATA section was not properly terminated.';
            return v2;
          }
          if (v3 == -3) {
            v2 = 'The XML declaration was not properly terminated.';
            return v2;
          }
          if (v3 == -4) {
            v2 = 'The DOCTYPE declaration was not properly terminated.';
            return v2;
          }
          if (v3 == -5) {
            v2 = 'A comment was not properly terminated.';
            return v2;
          }
          if (v3 == -6) {
            v2 = 'An XML element was malformed.';
            return v2;
          }
          if (v3 == -7) {
            v2 = 'Out of memory.';
            return v2;
          }
          if (v3 == -8) {
            v2 = 'An attribute value was not properly terminated.';
            return v2;
          }
          if (v3 == -9) {
            v2 = 'A start-tag was not matched with an end-tag.';
            return v2;
          }
          if (v3 == -10) {
            v2 = 'An end-tag was encountered without a matching start-tag.';
          }
          return v2;
        };

        v2.onError = function (msg, proceed) {};

        v2.xml2object = function (orderBy, n, depth) {
          if (n == null) {
            n = this.firstChild;
          }
          if (depth == null) {
            depth = 0;
          }
          var v4 = {};
          for (var v8 in n.attributes) {
            if (v8 != '_subdata') {
              v4[v8] = n.attributes[v8];
            }
            if (n.firstChild.nodeType == 3) {
              v4._text = n.firstChild.nodeValue;
            }
            v4._name = n.nodeName;
          }
          if (n.hasChildNodes()) {
            if (n.firstChild.attributes[orderBy[depth]] == null) {
              var v7 = [];
              var v3 = 0;
              while (v3 < n.childNodes.length) {
                v7.push(this.xml2object(orderBy, n.childNodes[v3], depth + 1));
                ++v3;
              }
              v4._subdata = v7;
              return v4;
            }
            v3 = 0;
            while (v3 < n.childNodes.length) {
              v4[n.childNodes[v3].attributes[orderBy[depth]]] = this.xml2object(orderBy, n.childNodes[v3], depth + 1);
              ++v3;
            }
          }
          return v4;
        };

        ASSetPropFlags(net.typoflash.xml.XXX.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 286 __Packages.net.typoflash.utils.Debug {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.utils) {
        _global.net.typoflash.utils = new Object();
      }
      if (!_global.net.typoflash.utils.Debug) {
        var v1 = function () {};

        net.typoflash.utils.Debug = v1;
        var v2 = v1.prototype;
        v1.trace = function (msg) {
          if (_global.TF.COOKIE.data.debugEnabled) {
            var v3 = new net.typoflash.utils.ReadableDate();
            if (typeof msg == 'object') {
              msg = mx.data.binding.ObjectDumper.toString(msg);
            }
            ++net.typoflash.utils.Debug.count;
            var v5 = net.typoflash.utils.Debug.htmlHistory + '<font color=\'#ABC6AA\'>[' + v3.getTimeColonFormat() + ']</font> <font color=\'#000000\'>' + msg + '</font>';
            var v4 = net.typoflash.utils.Debug.plainHistory + '[' + v3.getTimeColonFormat() + '] ' + msg;
            if (typeof _global.TF.TEMPLATE.debug == 'function') {
              net.typoflash.utils.Debug.hasDisplay = true;
              _global.TF.TEMPLATE.debug(v5, v4);
            }
            if (_global.TF.DEBUG_WINDOW != null) {
              net.typoflash.utils.Debug.hasDisplay = true;
              _global.TF.DEBUG_WINDOW.addText(v5, v4);
            } else {
              trace('[' + v3.getTimeColonFormat() + '] ' + msg);
            }
            if (!net.typoflash.utils.Debug.hasDisplay) {
              net.typoflash.utils.Debug.htmlHistory += '<font color=\'#ABC6AA\'>[' + v3.getTimeColonFormat() + ']</font> <font color=\'#000000\'>' + msg + '</font><br/>';
              net.typoflash.utils.Debug.plainHistory += '[' + v3.getTimeColonFormat() + '] ' + msg;
            } else {
              net.typoflash.utils.Debug.htmlHistory = '';
              net.typoflash.utils.Debug.plainHistory = '';
            }
          } else {
            if (typeof msg == 'object') {
              msg = mx.data.binding.ObjectDumper.toString(msg);
            }
            trace(msg);
          }
        };

        v1.clear = function () {
          net.typoflash.utils.Debug.htmlHistory = '';
          net.typoflash.utils.Debug.plainHistory = '';
          _global.TF.DEBUG_WINDOW.setText(' ', ' ');
        };

        v1.htmlHistory = '';
        v1.plainHistory = '';
        v1.count = 0;
        v1.hasDisplay = false;
        ASSetPropFlags(net.typoflash.utils.Debug.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 287 __Packages.net.typoflash.utils.ReadableDate {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.utils) {
        _global.net.typoflash.utils = new Object();
      }
      if (!_global.net.typoflash.utils.ReadableDate) {
        var v1 = function (yearOrTimevalue, month, date, hour, minute, second, millisecond) {
          super(yearOrTimevalue, month, date, hour, minute, second, millisecond);
        };

        net.typoflash.utils.ReadableDate = v1;
        net.typoflash.utils.ReadableDate extends Date;
        var v2 = v1.prototype;
        v2.getPaddedSeconds = function () {
          var v2 = this.getSeconds();
          v2 = String(v2);
          if (v2.length == 1) {
            v2 = '0' + v2;
          }
          return v2;
        };

        v2.getPaddedMinutes = function () {
          var v2 = this.getMinutes();
          v2 = String(v2);
          if (v2.length == 1) {
            v2 = '0' + v2;
          }
          return v2;
        };

        v2.getPaddedHours = function () {
          var v2 = this.getHours();
          v2 = String(v2);
          if (v2.length == 1) {
            v2 = '0' + v2;
          }
          return v2;
        };

        v2.getPaddedDate = function () {
          var v2 = this.getDate();
          v2 = String(v2);
          if (v2.length == 1) {
            v2 = '0' + v2;
          }
          return v2;
        };

        v2.getPaddedMonth = function () {
          var v2 = this.getMonth() + 1;
          v2 = String(v2);
          if (v2.length == 1) {
            v2 = '0' + v2;
          }
          return v2;
        };

        v2.getMonthName = function () {
          var v2 = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
          return v2[this.getMonth()];
        };

        v2.getDayName = function () {
          var v2 = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
          return v2[this.getDay()];
        };

        v2.getDateSuffixed = function () {
          var v2 = ['st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st'];
          return this.getDate() + v2[this.getDate() - 1];
        };

        v2.getReadable = function () {
          if (this.getPaddedDate() / this.getPaddedDate() == 1) {
            return this.getDayName() + ' the ' + this.getDateSuffixed() + ' of ' + this.getMonthName() + ', ' + this.getFullYear();
          } else {
            return 'n/a';
          }
        };

        v2.getNewsFormat = function () {
          if (this.getPaddedDate() / this.getPaddedDate() == 1) {
            return this.getPaddedHours() + ':' + this.getPaddedMinutes() + '  ' + this.getPaddedDate() + '|' + this.getPaddedMonth() + '|' + this.getFullYear();
          } else {
            return 'n/a';
          }
        };

        v2.getDatePipeFormat = function () {
          if (this.getPaddedDate() / this.getPaddedDate() == 1) {
            return this.getPaddedDate() + '|' + this.getPaddedMonth() + '|' + this.getFullYear();
          } else {
            return 'n/a';
          }
        };

        v2.getDateSlashFormat = function () {
          if (this.getPaddedDate() / this.getPaddedDate() == 1) {
            return this.getPaddedDate() + '/' + this.getPaddedMonth() + '/' + this.getFullYear();
          } else {
            return 'n/a';
          }
        };

        v2.getTimeColonFormat = function () {
          if (this.getPaddedDate() / this.getPaddedDate() == 1) {
            return this.getPaddedHours() + ':' + this.getPaddedMinutes() + ':' + this.getPaddedSeconds();
          } else {
            return 'n/a';
          }
        };

        v2.getSymbianFormat = function () {
          var v2 = new Date();
          if (this.getPaddedDate() / this.getPaddedDate() == 1) {
            if (this.getDate() == v2.getDate()) {
              return this.getPaddedHours() + ':' + this.getPaddedMinutes();
            } else {
              return this.getPaddedDate() + '|' + this.getPaddedMonth();
            }
          } else {
            return 'n/a';
          }
        };

        ASSetPropFlags(net.typoflash.utils.ReadableDate.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 288 __Packages.mx.data.binding.ObjectDumper {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.data) {
        _global.mx.data = new Object();
      }
      if (!_global.mx.data.binding) {
        _global.mx.data.binding = new Object();
      }
      if (!_global.mx.data.binding.ObjectDumper) {
        var v1 = function () {
          this.inProgress = new Array();
        };

        mx.data.binding.ObjectDumper = v1;
        var v2 = v1.prototype;
        v1.toString = function (obj, showFunctions, showUndefined, showXMLstructures, maxLineLength, indent) {
          var v3 = new mx.data.binding.ObjectDumper();
          if (maxLineLength == undefined) {
            maxLineLength = 100;
          }
          if (indent == undefined) {
            indent = 0;
          }
          return v3.realToString(obj, showFunctions, showUndefined, showXMLstructures, maxLineLength, indent);
        };

        v2.realToString = function (obj, showFunctions, showUndefined, showXMLstructures, maxLineLength, indent) {
          var v8 = 0;
          while (v8 < this.inProgress.length) {
            if (this.inProgress[v8] == obj) {
              return '***';
            }
            ++v8;
          }
          this.inProgress.push(obj);
          ++indent;
          var v16 = typeof obj;
          var v5;
          if (obj instanceof XMLNode && showXMLstructures != true) {
            v5 = obj.toString();
          } else {
            if (obj instanceof Date) {
              v5 = obj.toString();
            } else {
              if (v16 == 'object') {
                var v4 = new Array();
                if (obj instanceof Array) {
                  v5 = '[';
                  var v15 = 0;
                  while (v15 < obj.length) {
                    v4.push(v15);
                    ++v15;
                  }
                } else {
                  v5 = '{';
                  for (var v15 in obj) {
                    v4.push(v15);
                  }
                  v4.sort();
                }
                var v9 = '';
                var v3 = 0;
                while (v3 < v4.length) {
                  var v6 = obj[v4[v3]];
                  var v7 = true;
                  if (typeof v6 == 'function') {
                    v7 = showFunctions == true;
                  }
                  if (typeof v6 == 'undefined') {
                    v7 = showUndefined == true;
                  }
                  if (v7) {
                    v5 += v9;
                    if (!(obj instanceof Array)) {
                      v5 += v4[v3] + ': ';
                    }
                    v5 += this.realToString(v6, showFunctions, showUndefined, showXMLstructures, maxLineLength, indent);
                    v9 = ', `';
                  }
                  ++v3;
                }
                if (obj instanceof Array) {
                  v5 += ']';
                } else {
                  v5 += '}';
                }
              } else {
                if (v16 == 'function') {
                  v5 = 'function';
                } else {
                  if (v16 == 'string') {
                    v5 = '"' + obj + '"';
                  } else {
                    v5 = String(obj);
                  }
                }
              }
            }
          }
          if (v5 == 'undefined') {
            v5 = '-';
          }
          this.inProgress.pop();
          if (v5.length >= maxLineLength) {
            return mx.data.binding.ObjectDumper.replaceAll(v5, '`', '\n' + this.doIndent(indent));
          }
          return mx.data.binding.ObjectDumper.replaceAll(v5, '`', '');
        };

        v1.replaceAll = function (str, from, to) {
          var v3 = str.split(from);
          var v4 = '';
          var v2 = '';
          var v1 = 0;
          while (v1 < v3.length) {
            v4 += v2 + v3[v1];
            v2 = to;
            ++v1;
          }
          return v4;
        };

        v2.doIndent = function (indent) {
          var v2 = '';
          var v1 = 0;
          while (v1 < indent) {
            v2 += '     ';
            ++v1;
          }
          return v2;
        };

        ASSetPropFlags(mx.data.binding.ObjectDumper.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 289 __Packages.net.typoflash.managers.DepthManager {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.managers) {
        _global.net.typoflash.managers = new Object();
      }
      if (!_global.net.typoflash.managers.DepthManager) {
        var v1 = function (r) {
          this.root = r;
          this.depth = {};
          this.depth.windows = 99;
          this.depth.mouseCapture = 100;
          this.depth.modalWindows = 101;
          this.depth.popups = 103;
          this.depth.cursorIcons = 104;
          this.depth.tooltips = 105;
          this.depth.temp = 7897897;
          this.currPopX = Stage.width / 2 - 100;
          this.currPopY = 100;
          this.mouse_capture_mc = this.root.createEmptyMovieClip('mouseCapture', this.depth.mouseCapture);
          this.popup_mc = this.root.createEmptyMovieClip('popupHolder', this.depth.popups);
          this.modal_windows_mc = this.root.createEmptyMovieClip('modalWindowsHolder', this.depth.modalWindows);
          this.windows_mc = this.root.createEmptyMovieClip('windowsHolder', this.depth.windows);
          var v2 = {'x': 0, 'y': 0};
          this.root.globalToLocal(v2);
          this.windows_mc._x = v2.x;
          this.modal_windows_mc._x = this.windows_mc._x;
          this.popup_mc._x = this.windows_mc._x;
          this.mouse_capture_mc._x = this.windows_mc._x;
          this.windows_mc._y = v2.y;
          this.modal_windows_mc._y = this.windows_mc._y;
          this.popup_mc._y = this.windows_mc._y;
          this.mouse_capture_mc._y = this.windows_mc._y;
        };

        net.typoflash.managers.DepthManager = v1;
        var v2 = v1.prototype;
        v2.toString = function () {
          return 'DepthManager for ' + this.root._name;
        };

        v2.newPopup = function (symbol, initObj, d) {
          if (d == null) {
            d = this.popup_mc.getNextHighestDepth();
          }
          if (symbol == null) {
            symbol = 'bNullMC';
          }
          var v4 = this.popup_mc.attachMovie(symbol, symbol + d, d, initObj);
          return v4;
        };

        v2.newWindow = function (totInitObj) {
          var v3 = this.windows_mc.getNextHighestDepth();
          var v2 = this.windows_mc.attachMovie('Window', 'windows' + v3, v3, totInitObj);
          v2._x = this.getNextX();
          v2._y = this.getNextY();
          v2.depthManager = this;
          return v2;
        };

        v2.newModalWindow = function (totInitObj) {
          var v3 = this.modal_windows_mc.getNextHighestDepth();
          var v2 = this.modal_windows_mc.attachMovie('Window', 'windows' + v3, v3, totInitObj);
          v2._x = this.getNextX();
          v2._y = this.getNextY();
          return v2;
        };

        v2.newKillMouseLayer = function () {
          var v2 = this.mouse_capture_mc.createEmptyMovieClip('killMouseLayer', this.mouse_capture_mc.getNextHighestDepth());
          v2.beginFill(16777215, 0);
          v2.lineStyle(0, 16711935, 0);
          v2.moveTo(0, 0);
          v2.lineTo(Stage.width + 1000, 0);
          v2.lineTo(Stage.width + 1000, Stage.height + 1000);
          v2.lineTo(0, Stage.height + 1000);
          v2.endFill();
          var v3 = {};
          v3.x = 0;
          v3.y = 0;
          this.mouse_capture_mc.globalToLocal(v3);
          v2._x = v3.x;
          v2._y = v3.y;
          v2.onRelease = function () {};

          v2.useHandCursor = 0;
          false;
        };

        v2.alert = function (msg, timeout) {
          var v4 = this.popup_mc.getNextHighestDepth();
          var v3 = this.popup_mc.attachMovie('Alert', 'alert' + v4, v4);
          v3.depthManager = this;
          v3._x = this.getNextX();
          v3._y = this.getNextY();
          v3.useDynamicFonts = false;
          v3.setMsg(msg);
          if (timeout > 0) {
          }
          if (_global.TF.COOKIE.data.soundEnabled) {
            v3.snd = new Sound(v3);
            v3.snd.attachSound('accept.mp3');
            v3.snd.start();
          }
          false;
        };

        v2.confirm = function (msg, accFunc, decFunc) {
          var v3 = this.popup_mc.getNextHighestDepth();
          var v2 = this.popup_mc.attachMovie('Confirm', 'confirm' + v3, v3);
          v2.depthManager = this;
          v2.useDynamicFonts = false;
          v2._x = this.getNextX();
          v2._y = this.getNextY();
          v2.setMsg(msg);
          if (accFunc != null) {
            v2.accept = function () {
              accFunc();
            };

          }
          if (decFunc != null) {
            v2.decline = function () {
              decFunc();
            };

          }
          return v2;
          false;
        };

        v2.contextMenu = function (symbol, parent, x, y, initObj) {
          var v5 = this.popup_mc.getNextHighestDepth();
          var v3 = this.popup_mc.attachMovie('ContextPopup', 'ContextPopup' + v5, v5);
          v3.depthManager = this;
          var v4 = v3.attachMovie(symbol, 'view', v5, initObj);
          v4.parent = parent;
          v4.close = function () {
            this._parent.close();
          };

          v3.setSize(v4._width, v4._height);
          if (x == null) {
            v3._x = Math.round(_root._xmouse);
          } else {
            v3._x = x;
          }
          if (y == null) {
            v3._y = Math.round(_root._ymouse - v3.bg._height);
          } else {
            v3._y = y - v3.bg._height;
          }
          return v3;
          false;
        };

        v2.getNextPopupDepth = function () {
          return this.popup_mc.getNextHighestDepth();
        };

        v2.getNextWindowDepth = function () {
          return this.windows_mc.getNextHighestDepth();
        };

        v2.getNextModalWindowDepth = function () {
          return this.modal_windows_mc.getNextHighestDepth();
        };

        v2.getNextX = function () {
          var v2 = this.currPopX + this.currPos * 10;
          if (v2 > Stage.width / 2 + 100) {
            this.currPos = 0;
          }
          return Math.round(v2);
        };

        v2.getNextY = function () {
          var v2 = this.currPopY + this.currPos * 10 + 10 * this.yCount;
          if (v2 > Stage.height / 2) {
            ++this.yCount;
            if (this.yCount > 10) {
              this.yCount = 0;
            }
          }
          ++this.currPos;
          return Math.round(v2);
        };

        v2.__set__orgX = function (v) {
          this._orgX = v;
          return this.__get__orgX();
        };

        v2.currDepth = 10;
        v2.currPos = 0;
        v2.currPopY = 0;
        v2.yCount = 0;
        v2._orgX = 0;
        v2.addProperty('orgX', function () {}, v2.__set__orgX);
        ASSetPropFlags(net.typoflash.managers.DepthManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 290 __Packages.net.typoflash.userinterface.components.bComboBox {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bComboBox) {
        var v1 = function () {
          super();
          if (this.multipleSelect == null) {
            this.multipleSelect = false;
          }
          if (this.expandable == null) {
            this.expandable = false;
          }
          if (this.autoResize == null) {
            this.autoResize = true;
          }
          this.alternateBg = false;
          this.rowHeight = 28;
          this.showNum = 5;
          this.vScrollPolicy = 'auto';
          this.hScrollPolicy = 'no';
        };

        net.typoflash.userinterface.components.bComboBox = v1;
        net.typoflash.userinterface.components.bComboBox extends net.typoflash.userinterface.components.bPopupSelector;
        var v2 = v1.prototype;
        v2.init = function () {
          this.id = 'bComboBox';
          this.bg.onRelease = function () {
            this._parent.open();
          };

          this.bg.onRollOver = function () {
            this.hilite.gotoAndStop('over');
          };

          this.bg.onRollOut = function () {
            this.hilite.gotoAndPlay('out');
          };

          if (this.label.length > 0) {
            var v4 = [];
            var v3;
            var v2 = 0;
            while (v2 < this.label.length) {
              v3 = {};
              v3.data = this.label[v2];
              v3.label = v3.data;
              if (this.data[v2] != null) {
                v3.data = this.data[v2];
              }
              v4.push(v3);
              ++v2;
            }
            this.setDataProvider(v4);
          }
        };

        v2.setSize = function (w, h) {
          w = Math.round(w);
          h = Math.round(h);
          this.width = w;
          this.height = h;
          this.bg._width = w;
          this.bg._height = h;
          this.arrow._x = w - 14;
          var v2 = {};
          v2.w = w;
          v2.h = h;
          v2.target = this;
          v2.type = 'onResize';
          this.dispatchEvent(v2);
        };

        v2.open = function () {
          this.killMouseLayer = this.createKillMouseLayer();
          var v3 = {'x': this.holder._x, 'y': this.holder._y};
          this.localToGlobal(v3);
          this.killMouseLayer.mc = this.depthManager.newPopup('bPopupBg');
          var v2 = this.killMouseLayer.mc;
          v2._x = v3.x;
          v2._y = v3.y;
          var v4 = {'expandable': this.expandable, 'multipleSelect': this.multipleSelect, 'showIcons': this.showIcons, 'alternateBg': this.alternateBg, 'rowHeight': this.rowHeight, 'popupBg': v2.bg, 'fixedWidth': this.width, 'listItem': this.listItem, 'iconInset': this.iconInset, 'html': this.html, '_vScrollPolicy': this.vScrollPolicy, '_hScrollPolicy': this.hScrollPolicy};
          this.list = v2.holder.attachMovie('bList', 'bList', 0, v4);
          v2.bg._width = this.width + 2;
          if (!this.expandable) {
            v2.bg._height = this.dataProvider.__get__length() * this.rowHeight + 2;
            v2.bg.maxHeight = v2.bg._height;
          } else {
            v2.bg._height = this.showNum * this.rowHeight + 2;
            v2.bg.maxHeight = v2.bg._height;
          }
          v2.bg.expandable = this.expandable;
          v2.bg.vScrollPolicy = this.vScrollPolicy;
          this.list.addEventListener('onSelect', this);
          this.list.addEventListener('onMultipleSelect', this);
          v2.bg.onResize = function (o) {
            this._height = Math.min(this.maxHeight, o.h + 2);
          };

          this.list.setDataProvider(this.dataProvider);
          this.list.addEventListener('onResize', v2.bg);
          this.list.setSize(this.width, this.showNum * this.rowHeight);
        };

        ASSetPropFlags(net.typoflash.userinterface.components.bComboBox.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 291 __Packages.net.typoflash.userinterface.components.bDateField {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bDateField) {
        var v1 = function () {
          super();
        };

        net.typoflash.userinterface.components.bDateField = v1;
        net.typoflash.userinterface.components.bDateField extends net.typoflash.userinterface.components.bPopupSelector;
        var v2 = v1.prototype;
        v2.init = function () {
          this.id = 'bDateField';
          this.bg.onRelease = function () {
            this._parent.open();
          };

          this.bg.onRollOver = function () {
            this.hilite.gotoAndStop('over');
          };

          this.bg.onRollOut = function () {
            this.hilite.gotoAndPlay('out');
          };

          this.width = 160;
          this.height = 30;
          this.setSize(this.width, this.height);
          this.txt.maxChars = 10;
          this.txt.autoSize = 'none';
          this.txt.restrict = '0-9 / dmy';
          if (this._selectedDate != null) {
            this.txt.text = this._selectedDate.getDateSlashFormat();
          } else {
            this.txt.text = 'dd/mm/yyyy';
          }
          this.txt.onChanged = function () {};

          this.txt.onSetFocus = function () {
            if (this.text == 'dd/mm/yyyy') {
              this.text = '';
            } else {}
          };

          this.txt.onKillFocus = function () {
            if (!this._parent.parseDate(this.text)) {
              if (this._parent._selectedDate != null) {
                this._parent.selectedDate = this._parent._selectedDate;
              } else {
                this.text = 'dd/mm/yyyy';
              }
            }
          };

        };

        v2.parseDate = function (t) {
          t = t.split('/');
          if (t.length != 3) {
            return false;
          }
          if (!(t[0] > 0 && t[0] < 32)) {
            return false;
          }
          if (!(t[1] > 0 && t[1] <= 12)) {
            return false;
          }
          if (!(t[2] > 0 && t[2] < 9999)) {
            return false;
          }
          this._selectedDate.setDate(t[0]);
          this._selectedDate.setMonth(t[1] - 1);
          this._selectedDate.setYear(t[2]);
          this.__set__selectedDate(this._selectedDate);
          return true;
        };

        v2.__get__selectedDate = function () {
          return this._selectedDate;
        };

        v2.__set__selectedDate = function (d) {
          this._selectedDate = new net.typoflash.utils.ReadableDate();
          this._selectedDate.setTime(d.getTime());
          this.txt.text = this._selectedDate.getDateSlashFormat();
          return this.__get__selectedDate();
        };

        v2.setSize = function (w, h) {
          w = Math.round(w);
          h = Math.round(h);
          this.width = w;
          this.height = h;
          this.bg._height = h;
          this.bg._width = this.bg._height;
          this.icon._height = this.bg._height;
          this.icon._width = this.bg._height;
          this.holder._y = h + 1;
          this.bg._x = w - h;
          this.icon._x = this.bg._x;
          this.txt._width = w - h - 2;
          this.txt._height = h;
          var v3 = {};
          v3.w = w;
          v3.h = h;
          v3.target = this;
          v3.type = 'onResize';
          this.dispatchEvent(v3);
        };

        v2.open = function () {
          this.killMouseLayer = this.createKillMouseLayer();
          var v3 = {'x': this.holder._x, 'y': this.holder._y};
          this.localToGlobal(v3);
          this.killMouseLayer.mc = this.depthManager.newPopup('bPopupBg');
          var v2 = this.killMouseLayer.mc;
          v2._x = v3.x;
          v2._y = v3.y;
          var v4 = {'popupBg': v2.bg, 'firstDayOfWeek': this.firstDayOfWeek, 'dayNames': this.dayNames, 'monthNames': this.monthNames, 'showToday': this.showToday, 'scaleX': this.scaleX, 'scaleY': this.scaleY};
          this.list = v2.holder.attachMovie('DateChooser', 'DateChooser', 0, v4);
          v2.bg._width = this.list.width + 2;
          v2.bg._height = this.list.height + 2;
          this.list.embedFonts = true;
          this.list.fontSize = 8;
          if (this._selectedDate != null) {
            var v5 = new Date(this._selectedDate.getTime());
            this.list.selectedDate = v5;
          }
          v2.bg.onResize = function (o) {
            this._height = Math.min(this.maxHeight, o.h + 2);
          };

          this.list.addEventListener('onResize', v2.bg);
          this.list.addEventListener('change', this);
        };

        v2.change = function (o) {
          this.__set__selectedDate(o.target.selectedDate);
          o.target = this;
          o.type = 'change';
          this.dispatchEvent(o);
          this.close();
        };

        v2.firstDayOfWeek = 1;
        v2.monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        v2.showToday = false;
        v2.scaleX = 70;
        v2.scaleY = 70;
        v2.dayNames = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        v2.addProperty('selectedDate', v2.__get__selectedDate, v2.__set__selectedDate);
        ASSetPropFlags(net.typoflash.userinterface.components.bDateField.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 292 __Packages.net.typoflash.userinterface.components.bScrollThumb {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bScrollThumb) {
        var v1 = function () {
          super();
        };

        net.typoflash.userinterface.components.bScrollThumb = v1;
        net.typoflash.userinterface.components.bScrollThumb extends MovieClip;
        var v2 = v1.prototype;
        v2.ScrollThumb = function () {};

        v2.onLoad = function () {
          this.orgY = this._y;
          this.onLoaded();
        };

        v2.setRange = function (_ymin, _ymax, _datamin, _datamax) {
          this.ymin = _ymin;
          this.ymax = _ymax;
          this.datamin = _datamin;
          this.datamax = _datamax;
        };

        v2.__set__height = function (h) {
          this._height = h;
          return this.__get__height();
        };

        v2.__get__height = function () {
          return this._height;
        };

        v2.dragThumb = function (Void) {
          this.scrollMove = Number(this._parent._ymouse - this.lastY);
          this.scrollMove += this.orgY;
          if (this.scrollMove < this.ymin) {
            this.scrollMove = this.ymin;
          } else {
            if (this.scrollMove > this.ymax) {
              this.scrollMove = this.ymax;
            }
          }
          this._parent.isScrolling = true;
          this._y = this.scrollMove;
          var v2 = Math.round((this.datamax - this.datamin) * (this._y - this.ymin) / (this.ymax - this.ymin)) + this.datamin;
          this._parent.scrollPosition = v2;
          this._parent.dispatchScrollEvent('ThumbTrack');
          updateAfterEvent();
        };

        v2.stopDragThumb = function (Void) {
          this._parent.isScrolling = false;
          this._parent.dispatchScrollEvent('ThumbPosition');
          this._parent.dispatchScrollChangedEvent();
          delete this.onMouseMove;
        };

        v2.onPress = function (Void) {
          this.orgY = this._y;
          this.lastY = this._parent._ymouse;
          this.onMouseMove = this.dragThumb;
        };

        v2.onRelease = function (Void) {
          this._parent.releaseFocus();
          this.stopDragThumb();
          super.onRelease();
        };

        v2.onReleaseOutside = function (Void) {
          this._parent.releaseFocus();
          this.stopDragThumb();
          super.onReleaseOutside();
        };

        v2.setSize = function (w, h) {
          this._width = Math.round(w);
          this.width = this._width;
          this.__set__height(Math.round(h));
        };

        v2.size = function () {
          super.size();
          this.grip_mc.move((this.width - this.grip_mc.width) / 2, (this.__get__height() - this.grip_mc.height) / 2);
        };

        v2.className = 'ScrollThumb';
        v2.btnOffset = 0;
        v2.horizontal = false;
        v2.minHeight = 3;
        v2.addProperty('height', v2.__get__height, v2.__set__height);
        ASSetPropFlags(net.typoflash.userinterface.components.bScrollThumb.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 293 __Packages.net.typoflash.userinterface.components.bScrollBar {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bScrollBar) {
        var v1 = function () {
          super();
        };

        net.typoflash.userinterface.components.bScrollBar = v1;
        net.typoflash.userinterface.components.bScrollBar extends MovieClip;
        var v2 = v1.prototype;
        v2.ScrollBar = function () {};

        v2.toString = function () {
          return 'bScrollBar';
        };

        v2.onLoad = function () {
          this.id = 'bScrollBar';
          this._visible = false;
          this._x = Math.round(this._x);
          this._y = Math.round(this._y);
          this._height = Math.round(this._height);
          this._width = Math.round(this._width);
          this._minHeight = this._width;
          this._minWidth = this._minHeight;
          this.width = this._minHeight;
          this.height = this._height;
          this.x = this._x;
          this.y = this._y;
          this._yscale = 100;
          this._xscale = 100;
          _global.TF.CORE_EVENTS.addEventListener('onSetComponentStyle', this);
          mx.events.EventDispatcher.initialize(this);
          this.upBtn.onPress = this.onUpArrow;
          this.downBtn.onPress = this.onDownArrow;
          this.downBtn.onDragOut = this.stopScrolling;
          this.upBtn.onDragOut = this.downBtn.onDragOut;
          this.downBtn.onReleaseOutside = this.downBtn.onDragOut;
          this.upBtn.onReleaseOutside = this.downBtn.onDragOut;
          this.downBtn.onRelease = this.downBtn.onDragOut;
          this.upBtn.onRelease = this.downBtn.onDragOut;
          this.slider._visible = false;
          this.slider.minHeight = 5;
          this.onLoaded();
        };

        v2.__set__scrollerWidth = function (w) {
          this.width = w;
          this.setSize(this.width, this.height);
          return this.__get__scrollerWidth();
        };

        v2.__get__scrollerWidth = function () {
          return this.width;
        };

        v2.__get__scrollPosition = function () {
          return this._scrollPosition;
        };

        v2.__set__scrollPosition = function (pos) {
          if (pos <= 0) {
            pos = 0;
          }
          this._scrollPosition = Number(pos);
          if (this.isScrolling != true) {
            pos = Math.min(pos, this.maxPos);
            pos = Math.max(pos, this.minPos);
            var v3 = (pos - this.minPos) * (this.track._height - this.slider._height) / (this.maxPos - this.minPos) + this.track._y;
            this.slider._y = v3;
          }
          return this.__get__scrollPosition();
        };

        v2.__set__target = function (t) {
          this.detachTarget();
          this._visible = true;
          if (this._parent[t] != null) {
            this._targetInstance = this._parent[t];
            t = this._targetInstance;
          } else {
            if (this[t] != null) {
              this._targetInstance = this[t];
              t = this._targetInstance;
            } else {
              this._visible = false;
            }
          }
          this.setSize(this.width, t._height);
          if (t instanceof TextField && !this.treatTextfieldAsMC) {
            this.mode = 'textfield';
            this.setScrollTarget(t);
            t.addListener(this);
            if (this.horizontal) {
              var v4 = t.hscroll;
              this.setScrollProperties(t._width, 0, t.maxhscroll);
              this.__set__scrollPosition(Math.min(v4, t.maxhscroll));
            } else {
              var v4 = t.scroll;
              var v3 = t.bottomScroll - t.scroll;
              this.setScrollProperties(v3, 1, t.maxscroll);
              this.__set__scrollPosition(Math.min(v4, t.maxscroll));
            }
          } else {
            this.mode = 'movieclip';
            if (!this.horizontal) {
              this.setScrollProperties(t._height, 0, t._height);
            } else {
              this.setScrollProperties(t._width, 0, t._width);
            }
            this.__set__scrollPosition(0);
          }
          return this.__get__target();
        };

        v2.__get__target = function () {
          return this._targetInstance;
        };

        v2.detachTarget = function () {
          this._targetInstance.removeListener(this);
          delete this._targetInstance[this.horizontal ? 'hScroller' : 'vScroller'];
          if (this._targetInstance.hScroller != undefined && this._targetInstance.vScroller != undefined) {
            this._targetInstance.unwatch('text');
            this._targetInstance.unwatch('htmltext');
          }
        };

        v2.onTextChanged = function (Void) {
          if (this._targetInstance == undefined) {
            return undefined;
          }
          clearInterval(this.synchScroll);
          if (this.horizontal) {
            var v3 = this._targetInstance.hscroll;
            this.setScrollProperties(this._targetInstance._width, 0, this._targetInstance.maxhscroll);
            this.__set__scrollPosition(Math.min(v3, this._targetInstance.maxhscroll));
          } else {
            var v3 = this._targetInstance.scroll;
            var v2 = this._targetInstance.bottomScroll - this._targetInstance.scroll;
            this.setScrollProperties(v2, 1, this._targetInstance.maxscroll);
            this.__set__scrollPosition(Math.min(v3, this._targetInstance.maxscroll));
          }
        };

        v2.callback = function (prop, oldval, newval) {
          clearInterval(this.hScroller.synchScroll);
          clearInterval(this.vScroller.synchScroll);
          this.hScroller.synchScroll = setInterval(this.hScroller, 'onTextChanged', 50);
          this.vScroller.synchScroll = setInterval(this.vScroller, 'onTextChanged', 50);
          return newval;
        };

        v2.setScrollTarget = function (tF) {
          if (this.horizontal) {
            tF.hScroller = this;
            tF.hScroller.lineScrollSize = 5;
          } else {
            tF.vScroller = this;
            tF.vScroller.lineScrollSize = 1;
          }
          this.onTextChanged();
          this.onChanged = function (Void) {
            this.onTextChanged();
          };

          this.onScroller = function (Void) {
            if (!this.isScrolling) {
              if (!this.horizontal) {
                this.scrollPosition = this._targetInstance.scroll;
              } else {
                this.scrollPosition = this._targetInstance.hscroll;
              }
            }
          };

          tF.addListener(this);
          tF.watch('text', this.callback);
          tF.watch('htmlText', this.callback);
        };

        v2.scrollHandler = function (Void) {
          if (this.horizontal) {
            var v2 = this._targetInstance.background;
            this._targetInstance.hscroll = this.scrollPosition;
            this._targetInstance.background = v2;
          } else {
            this._targetInstance.scroll = this.scrollPosition;
          }
        };

        v2.__get__pageScrollSize = function () {
          return this.largeScroll;
        };

        v2.__set__pageScrollSize = function (lScroll) {
          this.largeScroll = lScroll;
          return this.__get__pageScrollSize();
        };

        v2.__set__lineScrollSize = function (sScroll) {
          this.smallScroll = sScroll;
          return this.__get__lineScrollSize();
        };

        v2.__get__lineScrollSize = function () {
          return this.smallScroll;
        };

        v2.__get__virtualHeight = function () {
          return this.height;
        };

        v2.setSize = function (w, h) {
          this.width = Math.round(w);
          w = this.width;
          this.height = Math.round(h);
          h = this.height;
          this.downBtn.bg._height = this.width;
          this.downBtn.bg._width = this.downBtn.bg._height;
          this.upBtn.bg._height = this.downBtn.bg._height;
          this.upBtn.bg._width = this.downBtn.bg._height;
          this._minHeight = this.downBtn.bg._height;
          this._minWidth = this.downBtn.bg._height;
          var v5 = this.upBtn._height;
          var v4 = this.downBtn._height;
          this.track._y = v5;
          this.track._height = h - v5 - v4;
          this.track._width = w;
          this.downBtn._y = h - v4 / 2;
          this.onTextChanged();
          var v2 = {};
          v2.w = w;
          v2.h = h;
          v2.target = this;
          v2.type = 'onResize';
          this.dispatchEvent(v2);
        };

        v2.setScrollProperties = function (pSize, mnPos, mxPos, ls) {
          var v4;
          var v2 = this.track;
          this.pageSize = pSize;
          this.largeScroll = (ls != undefined && ls > 0) ? ls : pSize;
          this.minPos = Math.max(mnPos, 0);
          this.maxPos = Math.max(mxPos, 0);
          this._scrollPosition = Math.max(this.minPos, this._scrollPosition);
          this._scrollPosition = Math.min(this.maxPos, this._scrollPosition);
          if (this.maxPos - this.minPos > 0) {
            var v5 = this._scrollPosition;
            v2.onDragOver = this.startTrackScroller;
            v2.onPress = v2.onDragOver;
            v2.onRelease = this.releaseScrolling;
            v2.stopScrolling = this.stopScrolling;
            v2.onDragOut = v2.stopScrolling;
            v2.onReleaseOutside = this.releaseScrolling;
            v2.useHandCursor = false;
            var v3 = this.slider;
            v4 = (this.pageSize / (this.maxPos - this.minPos + this.pageSize)) * v2._height;
            if (v4 < v3.minHeight) {
              if (v2._height < v3.minHeight) {
                v3._visible = false;
              } else {
                v4 = v3.minHeight;
                v3._visible = true;
                v3.setSize(this._minWidth, v3.minHeight);
              }
            } else {
              v3._visible = true;
              v3.setSize(this._minWidth, v4);
            }
            v3.setRange(this.upBtn._height + 0, this.upBtn._height + this.track._height - v3._height, this.minPos, this.maxPos);
            v5 = Math.min(v5, this.maxPos);
            this.__set__scrollPosition(Math.max(v5, this.minPos));
          } else {
            this.slider._visible = false;
            delete v2.onPress;
            delete v2.onDragOver;
            delete v2.onRelease;
            delete v2.onDragOut;
            delete v2.onRollOver;
            delete v2.onRollOut;
            delete v2.onReleaseOutside;
          }
        };

        v2.onResize = function (o) {
          this.setSize(this.width, this.height);
        };

        v2.dispatchScrollEvent = function () {
          this.dispatchEvent({'type': 'scroll', 'target': this});
        };

        v2.isScrollBarKey = function (k) {
          if (k == 38) {
            this.scrollIt('Line', -1);
            return true;
          } else {
            if (k == 40) {
              this.scrollIt('Line', 1);
              return true;
            } else {
              if (k == 33) {
                this.scrollIt('Page', -1);
                return true;
              } else {
                if (k == 34) {
                  this.scrollIt('Page', 1);
                  return true;
                }
              }
            }
          }
          if (k == 36) {
            if (this.__get__scrollPosition() != 0) {
              this.__set__scrollPosition(0);
              this.dispatchScrollEvent(this.minMode);
            }
            return true;
            return false;
          }
          if (k == 35) {
            if (this.__get__scrollPosition() < this.maxPos) {
              this.__set__scrollPosition(this.maxPos);
              this.dispatchScrollEvent(this.maxMode);
            }
            return true;
          }
          return false;
        };

        v2.scrollIt = function (inc, mode) {
          if (this.maxPos <= 0) {
            return undefined;
          }
          var v3 = this.smallScroll;
          if (inc != 'Line') {
            v3 = (this.largeScroll == 0) ? this.pageSize : this.largeScroll;
          }
          var v2 = this._scrollPosition + mode * v3;
          if (v2 > this.maxPos) {
            v2 = this.maxPos;
          } else {
            if (v2 < this.minPos) {
              v2 = this.minPos;
            }
          }
          if (this.__get__scrollPosition() != v2) {
            this.__set__scrollPosition(v2);
            var v4 = mode < 0 ? this.minusMode : this.plusMode;
            this.dispatchScrollEvent(inc + v4);
          }
        };

        v2.startTrackScroller = function (Void) {
          this._parent.trackScroller();
          this._parent.scrolling = setInterval(this._parent, 'scrollInterval', 100, 'Page', -1);
        };

        v2.scrollInterval = function (inc, mode) {
          clearInterval(this.scrolling);
          if (inc == 'Page') {
            this.trackScroller();
          } else {
            this.scrollIt(inc, mode);
          }
          this.scrolling = setInterval(this, 'scrollInterval', 100, inc, mode);
        };

        v2.trackScroller = function (Void) {
          if (this.slider._y + this.slider.height < this._ymouse) {
            this.scrollIt('Page', 1);
          } else {
            if (this.slider._y > this._ymouse) {
              this.scrollIt('Page', -1);
            }
          }
        };

        v2.dispatchScrollChangedEvent = function (Void) {
          this.dispatchEvent({'type': 'scrollChanged'});
        };

        v2.stopScrolling = function (Void) {
          clearInterval(this._parent.scrolling);
          this._parent.scrollTrackDown_mc._visible = false;
        };

        v2.releaseScrolling = function (Void) {
          this._parent.releaseFocus();
          this.stopScrolling();
          this._parent.dispatchScrollChangedEvent();
        };

        v2.trackOver = function (Void) {};

        v2.trackOut = function (Void) {
          this._parent.scrollTrackOver_mc._visible = false;
        };

        v2.onUpArrow = function (Void) {
          this._parent.scrollIt('Line', -1);
          this._parent.scrollInterval('Line', -1);
        };

        v2.onDownArrow = function (Void) {
          this._parent.scrollIt('Line', 1);
          this._parent.scrollInterval('Line', 1);
        };

        v2.onScrollChanged = function (Void) {
          this._parent.dispatchScrollChangedEvent();
        };

        v2.treatTextfieldAsMC = false;
        v2.width = 12;
        v2.minPos = 0;
        v2.maxPos = 0;
        v2.pageSize = 0;
        v2.smallScroll = 1;
        v2.largeScroll = 1;
        v2._scrollPosition = 0;
        v2.horizontal = false;
        v2.addProperty('lineScrollSize', v2.__get__lineScrollSize, v2.__set__lineScrollSize);
        v2.addProperty('pageScrollSize', v2.__get__pageScrollSize, v2.__set__pageScrollSize);
        v2.addProperty('scrollPosition', v2.__get__scrollPosition, v2.__set__scrollPosition);
        v2.addProperty('scrollerWidth', v2.__get__scrollerWidth, v2.__set__scrollerWidth);
        v2.addProperty('target', v2.__get__target, v2.__set__target);
        v2.addProperty('virtualHeight', v2.__get__virtualHeight, function () {});
        ASSetPropFlags(net.typoflash.userinterface.components.bScrollBar.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 294 __Packages.net.typoflash.userinterface.components.bScrollPane {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bScrollPane) {
        var v1 = function () {
          super();
          this.scrollW = 12;
          if (this.resetScrollOnLoad == null) {
            this.resetScrollOnLoad = true;
          }
          if (this.transitionType == null) {
            this.transitionType = 'fade';
          }
          this.contentStack = {};
        };

        net.typoflash.userinterface.components.bScrollPane = v1;
        net.typoflash.userinterface.components.bScrollPane extends net.typoflash.userinterface.components.bComponentBase;
        var v2 = v1.prototype;
        v2.toString = function () {
          return 'bScrollPane';
        };

        v2.init = function () {
          this.id = 'bScrollPane';
          this.dummy._visible = false;
          this._depth = 100000;
          this.__set__contentPath(this._contentPath);
          if (this.resizable) {
          }
          this.vScroll.horizontal = true;
          this.hScroll.horizontal = this.vScroll.horizontal;
          this.hScroll._visible = false;
          this.vScroll._visible = this.hScroll._visible;
          this.vl = {};
          this.vl.mc = this;
          this.hl = {};
          this.hl.mc = this;
          this.vScroll.onLoaded = function () {
            var v2 = {};
            v2.type = 'onVerticalLoad';
            v2.target = this._parent;
            this._parent.dispatchEvent(v2);
            this.addEventListener('scroll', this._parent.vl);
          };

          this.hScroll.onLoaded = function () {
            var v2 = {};
            v2.type = 'onHorisontalLoad';
            v2.target = this._parent;
            this._parent.dispatchEvent(v2);
            this.addEventListener('scroll', this._parent.hl);
          };

        };

        v2.setSize = function (w, h) {
          this.width = Math.round(w);
          w = this.width;
          this.height = Math.round(h);
          h = this.height;
          if (this.vScrollPolicy == 'yes' || this.vScrollPolicy == 'auto' && this.holder._height > h) {
            w -= this.scrollW;
            this.vScroll._visible = true;
          } else {
            this.vScroll._visible = false;
          }
          if (this.hScrollPolicy == 'yes' || this.hScrollPolicy == 'auto' && this.holder._width > w) {
            h -= this.scrollW;
            this.hScroll._visible = true;
          } else {
            this.hScroll._visible = false;
          }
          this.mask._width = w;
          this.mask._height = h;
          this.hScroll._y = h;
          this.vScroll._x = w;
          this.hScroll._x = w;
          this.vl.scroll = function (eventObject) {
            this.mc.holder._y = -eventObject.target.scrollPosition;
          };

          var v5 = this.holder._height - h + 5;
          this.vScroll.setSize(this.scrollW, h);
          this.vScroll.setScrollProperties(v5, 0, v5);
          this.vScroll.__set__lineScrollSize(v5 / 10);
          this.hl.totW = this.holder._width - w;
          this.totW = this.hl.totW;
          this.hl.scroll = function (eventObject) {
            this.mc.holder._x = eventObject.target.scrollPosition - this.totW;
          };

          this.hScroll.setSize(this.scrollW, w + 5);
          this.hScroll.setScrollProperties(this.totW, 0, this.totW);
          this.hScroll.__set__scrollPosition(this.totW);
          this.hScroll.__set__lineScrollSize(this.totW / 10);
          var v4 = {};
          v4.w = w;
          v4.h = h;
          v4.target = this;
          v4.type = 'onResize';
          this.dispatchEvent(v4);
          (this.__get__contentPath()).setSize(w, h);
        };

        v2.close = function () {
          (this.__get__contentPath()).close();
        };

        v2.__set__contentPath = function (c) {
          if (c == '') {
            this.unload();
            this.holder._content.removeMovieClip();
            return undefined;
          }
          if (c.indexOf('.swf') > 0 || c.indexOf('.jpg') > 0) {
            this.holder.createEmptyMovieClip('_content', 0);
            _global.TF.LOAD_QUEUE.load(c, this.holder._content, this);
          } else {
            this.holder.attachMovie(c, '_content', 0, this.initObj);
            this.onComplete();
          }
          return this.__get__contentPath();
        };

        v2.__get__contentPath = function () {
          return this.holder._content;
        };

        v2.load = function (content, level, discardOld) {
          if (content.length == 0 && typeof content != 'object') {
            return undefined;
          }
          if (this.resetScrollOnLoad) {
            var v19 = mx.transitions.easing.Regular.easeOut;
            var v18 = 1;
            var v22 = new mx.transitions.Tween(this.holder, '_x', v19, this.holder._x, 0, v18, true);
            var v21 = new mx.transitions.Tween(this.holder, '_y', v19, this.holder._y, 0, v18, true);
            this.hScroll.__set__scrollPosition(this.totW);
            this.vScroll.__set__scrollPosition(0);
            this.hScroll.setScrollProperties(0, 0, 0);
            this.vScroll.setScrollProperties(0, 0, 0);
          }
          if (content.length == 0 && typeof content == 'object') {
            var v4 = [content];
          } else {
            var v4 = content;
          }
          if (level == null) {
            --this._depth;
            level = this._depth;
          } else {}
          this.contentStack['level' + level] = this.holder.createEmptyMovieClip('_content' + level, level);
          var v7 = this.contentStack['level' + level];
          v7._visible = false;
          v7._TFdata = {};
          v7.externalFiles = {};
          v7.loadQueueItems = {};
          var v9;
          var v6;
          var v5;
          var v16 = [];
          var v3 = 0;
          while (v3 < v4.length) {
            if (isNaN(v4[v3].depth)) {
              v6 = v3;
            } else {
              v6 = v4[v3].depth;
            }
            if (v4[v3].src.length > 0) {
              v7.externalFiles['f' + v6] = v7.createEmptyMovieClip('_content' + v6, v6);
              v9 = v7.externalFiles['f' + v6];
              v5 = {};
              v7._TFdata[v9._name] = v4[v3]._TFdata;
              v5.initObj = v4[v3].initObj;
              v5.pane = this;
              v5.level = level;
              v5.oldLevel = this.oldLevel;
              v5.onComplete = function (obj) {
                if (!obj.target.mc.initDataSet) {
                  for (var v3 in this.initObj) {
                    obj.target.mc[v3] = this.initObj[v3];
                  }
                }
                if (this.isLast && obj.target.mc != null) {
                  this.pane.onComplete(this);
                  net.typoflash.utils.Debug.trace(this.pane.id + ' finished loading \'' + obj.target.name + '\'');
                }
              };

              v5.onProgress = function (obj) {
                var v2 = {};
                v2.type = 'onLoadProgress';
                v2.target = obj;
                this.pane.dispatchEvent(v2);
              };

              v5.onPreUnLoad = function (obj) {
                var v2 = {};
                v2.type = 'onPreUnLoad';
                v2.target = obj;
                this.pane.dispatchEvent(v2);
              };

              v16.push(v5);
              var v10 = {'url': v4[v3].src, 'target': v9, 'listener': v5, 'name': v4[v3].name};
              v7.loadQueueItems['loadQueueItem_' + v6] = _global.TF.LOAD_QUEUE.load(v10);
            } else {
              if (v4[v3].symbol.length > 0) {
                v7.attachMovie(v4[v3].symbol, '_content', v6, v4[v3].initObj);
              } else {}
            }
            ++v3;
          }
          v5.isLast = true;
          if (v16.length == 0) {
            this.onComplete({'level': level, 'oldLevel': this.oldLevel});
          }
          this.oldLevel = level;
        };

        v2.unload = function (d) {
          var v8;
          var v6;
          var v4;
          var v9;
          var v7;
          var v3;
          for (v3 in this.contentStack) {
            if (typeof this.contentStack[v3] != 'movieclip') {
              delete this.contentStack[v3];
              continue;
            } else {
              v8 = (v3.split('level'))[1];
              v6 = true;
              if (d.length > 0) {
                v4 = 0;
                while (v4 < d.length) {
                  if (d[v4] == v8) {
                    v6 = false;
                  }
                  ++v4;
                }
              }
              if (v6) {
                this.contentStack[v3].onPreUnload();
                for (v7 in this.contentStack[v3].loadQueueItems) {
                  _global.TF.LOAD_QUEUE.unload(this.contentStack[v3].loadQueueItems[v7]);
                }
                this.contentStack[v3].removeMovieClip();
                delete this.contentStack[v3];
              }
            }
          }
        };

        v2.onComplete = function (o) {
          this.contentStack['level' + o.level]._visible = true;
          if (this.transitionType == 'fade') {
            this.unload([o.level, o.oldLevel]);
            var v6 = new mx.transitions.Tween(this.contentStack['level' + o.oldLevel], '_alpha', mx.transitions.easing.Regular.easeOut, this.contentStack['level' + o.oldLevel]._alpha, 0, 0.5, true);
            v6.mc = this.contentStack['level' + o.oldLevel];
            v6.onMotionFinished = function (obj) {
              for (var v3 in this.mc.loadQueueItems) {
                _global.TF.LOAD_QUEUE.unload(this.mc.loadQueueItems[v3]);
              }
              this.mc.removeMovieClip();
            };

          } else {
            if (this.transitionType == 'none') {
              this.unload([o.level]);
            } else {}
          }
          this.setSize(this.width, this.height);
          (this.__get__content()).addEventListener('onResize', this);
          var v5 = {};
          v5.type = 'onLoadComplete';
          v5.target = this;
          this.dispatchEvent(v5);
        };

        v2.onProgress = function (o) {
          this.dispatchEvent(o);
        };

        v2.__get__content = function () {
          this.holder._content;
        };

        v2.onResize = function (o) {
          this.setSize(this.width, this.height);
        };

        v2.refresh = function () {
          this.setSize(this.width, this.height);
        };

        v2.addProperty('content', v2.__get__content, function () {});
        v2.addProperty('contentPath', v2.__get__contentPath, v2.__set__contentPath);
        ASSetPropFlags(net.typoflash.userinterface.components.bScrollPane.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 295 __Packages.mx.transitions.easing.Regular {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.transitions) {
        _global.mx.transitions = new Object();
      }
      if (!_global.mx.transitions.easing) {
        _global.mx.transitions.easing = new Object();
      }
      if (!_global.mx.transitions.easing.Regular) {
        var v1 = function () {};

        mx.transitions.easing.Regular = v1;
        var v2 = v1.prototype;
        v1.easeIn = function (t, b, c, d) {
          t /= d;
          return c * t * t + b;
        };

        v1.easeOut = function (t, b, c, d) {
          t /= d;
          return -c * t * (t - 2) + b;
        };

        v1.easeInOut = function (t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return (c / 2) * t * t + b;
          }
          return (-c / 2) * (--t * (t - 2) - 1) + b;
        };

        v1.version = '1.1.0.52';
        ASSetPropFlags(mx.transitions.easing.Regular.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 296 __Packages.mx.transitions.OnEnterFrameBeacon {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.transitions) {
        _global.mx.transitions = new Object();
      }
      if (!_global.mx.transitions.OnEnterFrameBeacon) {
        var v1 = function () {};

        mx.transitions.OnEnterFrameBeacon = v1;
        var v2 = v1.prototype;
        v1.init = function () {
          var v4 = _global.MovieClip;
          if (!_root.__OnEnterFrameBeacon) {
            mx.transitions.BroadcasterMX.initialize(v4);
            var v3 = _root.createEmptyMovieClip('__OnEnterFrameBeacon', 9876);
            v3.onEnterFrame = function () {
              _global.MovieClip.broadcastMessage('onEnterFrame');
            };

          }
        };

        v1.version = '1.1.0.52';
        ASSetPropFlags(mx.transitions.OnEnterFrameBeacon.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 297 __Packages.mx.transitions.BroadcasterMX {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.transitions) {
        _global.mx.transitions = new Object();
      }
      if (!_global.mx.transitions.BroadcasterMX) {
        var v1 = function () {};

        mx.transitions.BroadcasterMX = v1;
        var v2 = v1.prototype;
        v1.initialize = function (o, dontCreateArray) {
          if (o.broadcastMessage != undefined) {
            delete o.broadcastMessage;
          }
          o.addListener = mx.transitions.BroadcasterMX.prototype.addListener;
          o.removeListener = mx.transitions.BroadcasterMX.prototype.removeListener;
          if (!dontCreateArray) {
            o._listeners = new Array();
          }
        };

        v2.addListener = function (o) {
          this.removeListener(o);
          if (this.broadcastMessage == undefined) {
            this.broadcastMessage = mx.transitions.BroadcasterMX.prototype.broadcastMessage;
          }
          return this._listeners.push(o);
        };

        v2.removeListener = function (o) {
          var v2 = this._listeners;
          var v3 = v2.length;
          while (v3--) {
            if (v2[v3] == o) {
              v2.splice(v3, 1);
              if (!v2.length) {
                this.broadcastMessage = undefined;
              }
              return true;
            }
          }
          return false;
        };

        v2.broadcastMessage = function () {
          var v5 = String(arguments.shift());
          var v4 = this._listeners.concat();
          var v6 = v4.length;
          var v3 = 0;
          while (v3 < v6) {
            v4[v3][v5].apply(v4[v3], arguments);
            ++v3;
          }
        };

        v1.version = '1.1.0.52';
        ASSetPropFlags(mx.transitions.BroadcasterMX.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 298 __Packages.mx.transitions.Tween {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.transitions) {
        _global.mx.transitions = new Object();
      }
      if (!_global.mx.transitions.Tween) {
        var v1 = function (obj, prop, func, begin, finish, duration, useSeconds) {
          mx.transitions.OnEnterFrameBeacon.init();
          if (!arguments.length) {
            return undefined;
          }
          this.obj = obj;
          this.prop = prop;
          this.begin = begin;
          this.__set__position(begin);
          this.__set__duration(duration);
          this.useSeconds = useSeconds;
          if (func) {
            this.func = func;
          }
          this.__set__finish(finish);
          this._listeners = [];
          this.addListener(this);
          this.start();
        };

        mx.transitions.Tween = v1;
        var v2 = v1.prototype;
        v2.__set__time = function (t) {
          this.prevTime = this._time;
          if (t > this.__get__duration()) {
            if (this.looping) {
              this.rewind(t - this._duration);
              this.update();
              this.broadcastMessage('onMotionLooped', this);
            } else {
              if (this.useSeconds) {
                this._time = this._duration;
                this.update();
              }
              this.stop();
              this.broadcastMessage('onMotionFinished', this);
            }
          } else {
            if (t < 0) {
              this.rewind();
              this.update();
            } else {
              this._time = t;
              this.update();
            }
          }
          return this.__get__time();
        };

        v2.__get__time = function () {
          return this._time;
        };

        v2.__set__duration = function (d) {
          this._duration = (d == null || d <= 0) ? _global.Infinity : d;
          return this.__get__duration();
        };

        v2.__get__duration = function () {
          return this._duration;
        };

        v2.__set__FPS = function (fps) {
          var v2 = this.isPlaying;
          this.stopEnterFrame();
          this._fps = fps;
          if (v2) {
            this.startEnterFrame();
          }
          return this.__get__FPS();
        };

        v2.__get__FPS = function () {
          return this._fps;
        };

        v2.__set__position = function (p) {
          this.setPosition(p);
          return this.__get__position();
        };

        v2.setPosition = function (p) {
          this.prevPos = this._pos;
          this._pos = p;
          this.obj[this.prop] = this._pos;
          this.broadcastMessage('onMotionChanged', this, this._pos);
          updateAfterEvent();
        };

        v2.__get__position = function () {
          return this.getPosition();
        };

        v2.getPosition = function (t) {
          if (t == undefined) {
            t = this._time;
          }
          return this.func(t, this.begin, this.change, this._duration);
        };

        v2.__set__finish = function (f) {
          this.change = f - this.begin;
          return this.__get__finish();
        };

        v2.__get__finish = function () {
          return this.begin + this.change;
        };

        v2.continueTo = function (finish, duration) {
          this.begin = this.position;
          this.__set__finish(finish);
          if (duration != undefined) {
            this.__set__duration(duration);
          }
          this.start();
        };

        v2.yoyo = function () {
          this.continueTo(this.begin, this.__get__time());
        };

        v2.startEnterFrame = function () {
          if (this._fps == undefined) {
            _global.MovieClip.addListener(this);
          } else {
            this._intervalID = setInterval(this, 'onEnterFrame', 1000 / this._fps);
          }
          this.isPlaying = true;
        };

        v2.stopEnterFrame = function () {
          if (this._fps == undefined) {
            _global.MovieClip.removeListener(this);
          } else {
            clearInterval(this._intervalID);
          }
          this.isPlaying = false;
        };

        v2.start = function () {
          this.rewind();
          this.startEnterFrame();
          this.broadcastMessage('onMotionStarted', this);
        };

        v2.stop = function () {
          this.stopEnterFrame();
          this.broadcastMessage('onMotionStopped', this);
        };

        v2.resume = function () {
          this.fixTime();
          this.startEnterFrame();
          this.broadcastMessage('onMotionResumed', this);
        };

        v2.rewind = function (t) {
          this._time = (t == undefined) ? 0 : t;
          this.fixTime();
          this.update();
        };

        v2.fforward = function () {
          this.__set__time(this._duration);
          this.fixTime();
        };

        v2.nextFrame = function () {
          if (this.useSeconds) {
            this.__set__time((getTimer() - this._startTime) / 1000);
          } else {
            this.__set__time(this._time + 1);
          }
        };

        v2.onEnterFrame = function () {
          this.nextFrame();
        };

        v2.prevFrame = function () {
          if (!this.useSeconds) {
            this.__set__time(this._time - 1);
          }
        };

        v2.toString = function () {
          return '[Tween]';
        };

        v2.fixTime = function () {
          if (this.useSeconds) {
            this._startTime = getTimer() - this._time * 1000;
          }
        };

        v2.update = function () {
          this.__set__position(this.getPosition(this._time));
        };

        v1.version = '1.1.0.52';
        v1.__initBeacon = mx.transitions.OnEnterFrameBeacon.init();
        v1.__initBroadcaster = mx.transitions.BroadcasterMX.initialize(mx.transitions.Tween.prototype, true);
        v2.func = function (t, b, c, d) {
          return c * t / d + b;
        };

        v2.addProperty('FPS', v2.__get__FPS, v2.__set__FPS);
        v2.addProperty('duration', v2.__get__duration, v2.__set__duration);
        v2.addProperty('finish', v2.__get__finish, v2.__set__finish);
        v2.addProperty('position', v2.__get__position, v2.__set__position);
        v2.addProperty('time', v2.__get__time, v2.__set__time);
        ASSetPropFlags(mx.transitions.Tween.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 299 __Packages.net.typoflash.userinterface.components.bList {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bList) {
        var v1 = function () {
          super();
          if (this.listItem == null) {
            this.listItem = 'bListItem';
          }
          if (this.iconMargin == null) {
            this.iconMargin = 20;
          }
          if (this.rowHeight == null) {
            this.rowHeight = 20;
          }
          if (this.fixedWidth == null) {
            this.fixedWidth = this._width;
          }
          if (this.multipleSelect == null) {
            this.multipleSelect = false;
          }
        };

        net.typoflash.userinterface.components.bList = v1;
        net.typoflash.userinterface.components.bList extends net.typoflash.userinterface.components.bComponentBase;
        var v2 = v1.prototype;
        v2.init = function () {
          this.id = 'bList';
          this.bg.onRelease = function () {
            this._parent.open();
          };

          this.bg.onRollOver = function () {
            this.hilite.gotoAndStop('over');
          };

          this.bg.onRollOut = function () {
            this.hilite.gotoAndPlay('out');
          };

          if (this.label.length > 0) {
            var v4 = [];
            var v3;
            var v2 = 0;
            while (v2 < this.label.length) {
              v3 = {};
              v3.data = this.label[v2];
              v3.label = v3.data;
              if (this.data[v2] != null) {
                v3.data = this.data[v2];
              }
              v4.push(v3);
              ++v2;
            }
            this.setDataProvider(v4);
          }
          this.scrollpane.onLoad = function () {
            this.vScrollPolicy = this._parent._vScrollPolicy;
            this.hScrollPolicy = this._parent._hScrollPolicy;
            this.setSize(this._parent.width, this._parent.height);
          };

          this.sl = {};
          this.sl.s = this.scrollpane;
          this.sl.parent = this;
          this.addEventListener('change', this.sl);
          this.sl.change = function (e) {
            this.s.refresh();
          };

          this.sl.onResize = function (e) {
            this.s.refresh();
            this.parent.dispatchEvent(e);
          };

        };

        v2.setSize = function (w, h) {
          this.scrollpane.setSize(w, h);
          this.tree.setSize(w, h);
          var v2 = {};
          this.width = w;
          v2.w = this.width;
          if (this.fixedWidth == null) {
            this.fixedWidth = w;
          }
          this.height = h;
          v2.h = this.height;
          v2.target = this;
          v2.type = 'onResize';
          this.dispatchEvent(v2);
        };

        v2.__get__fullHeight = function () {
          return this.tree.holder._height;
        };

        v2.resetScroll = function () {
          this.scrollpane.vl.scroll(0);
          this.scrollpane.holder._y = 0;
        };

        v2.__set__vScrollPolicy = function (v) {
          this.scrollpane.vScrollPolicy = v;
          return this.__get__vScrollPolicy();
        };

        v2.__set__hScrollPolicy = function (v) {
          this.scrollpane.hScrollPolicy = v;
          return this.__get__hScrollPolicy();
        };

        v2.__get__vScrollPolicy = function () {
          return this.scrollpane.vScrollPolicy;
        };

        v2.__get__hScrollPolicy = function () {
          return this.scrollpane.hScrollPolicy;
        };

        v2.setDataProvider = function (d) {
          if (d.toString() == 'bDataProvider') {
            this.dataProvider = d;
          } else {
            this.dataProvider = new net.typoflash.userinterface.components.bDataProvider(d, this.multipleSelect);
          }
          this.dataProvider.addEventListener('onSelect', this);
          this.dataProvider.addEventListener('onMultipleSelect', this);
          this.renderList();
          this.scrollpane.refresh();
          this.resetScroll();
        };

        v2.onSelect = function (o) {
          if (this.autoResize) {
            this.setSize(Math.max(this.txt._width + this.iconMargin, this.width), this.height);
          }
          this.dataProvider = o.dataProvider;
          if (!o.init) {
            o.target = this;
            this.dispatchEvent(o);
            o.type = 'change';
            this.dispatchEvent(o);
          }
        };

        v2.onMultipleSelect = function (o) {
          this.dataProvider = o.dataProvider;
          if (!o.init) {
            o.target = this;
            this.dispatchEvent(o);
            o.type = 'change';
            this.dispatchEvent(o);
          }
        };

        v2.__get__selected = function () {
          return this.dataProvider.__get__selected();
        };

        v2.__set__selected = function (s) {
          this.dataProvider.__set__selected(s);
          return this.__get__selected();
        };

        v2.setInitSelected = function (s) {
          this.dataProvider.setInitSelected(s);
        };

        v2.setSelected = function (s) {
          this.dataProvider.setSelected(s);
        };

        v2.renderList = function () {
          var v2 = {'expandable': this.expandable, 'multipleSelect': this.multipleSelect, 'showIcons': this.showIcons, 'alternateBg': this.alternateBg, 'rowHeight': this.rowHeight, 'fixedWidth': this.fixedWidth, 'listItem': this.listItem, 'iconInset': this.iconInset, 'html': this.html, 'expandIconInset': this.expandIconInset, 'openLevels': this.openLevels};
          this.tree = this.scrollpane.holder.attachMovie('bTree', 'bTree', 0, v2);
          this.tree.setDataProvider(this.dataProvider, this.multipleSelect);
          this.tree.addEventListener('onResize', this.sl);
          this.tree.renderTree();
        };

        v2.addProperty('fullHeight', v2.__get__fullHeight, function () {});
        v2.addProperty('hScrollPolicy', v2.__get__hScrollPolicy, v2.__set__hScrollPolicy);
        v2.addProperty('selected', v2.__get__selected, v2.__set__selected);
        v2.addProperty('vScrollPolicy', v2.__get__vScrollPolicy, v2.__set__vScrollPolicy);
        ASSetPropFlags(net.typoflash.userinterface.components.bList.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 300 __Packages.net.typoflash.userinterface.components.bTree {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bTree) {
        var v1 = function () {
          super();
          if (this.listItem == null) {
            this.listItem = 'bListItem';
          }
          if (this.openLevels == 'All') {
            this.openLevels = '10000000';
          } else {
            this.openLevels = '10';
          }
          if (this.rowSpacing == null) {
            this.rowSpacing = 0;
          }
          if (this.indentW == null) {
            this.indentW = 20;
          }
          if (this.iconInset == null && this.showIcons) {
            this.iconInset = 20;
          } else {
            if (!this.showIcons) {
              this.iconInset = 0;
            }
          }
          if (this.expandIconInset == null) {
            this.expandIconInset = 0;
          }
          if (this.topStroke == null) {
            this.topStroke = 0;
          }
          if (this.bottomStroke == null) {
            this.bottomStroke = 0;
          }
          if (this.expandStyle == null) {
            this.expandStyle = 'tree';
          }
          if (this.fixedWidth != null) {
            this.width = this.fixedWidth;
          }
        };

        net.typoflash.userinterface.components.bTree = v1;
        net.typoflash.userinterface.components.bTree extends net.typoflash.userinterface.components.bComponentBase;
        var v2 = v1.prototype;
        v2.init = function () {
          this.id = 'bTree';
        };

        v2.setDataProvider = function (d, m) {
          if (d.toString() == 'bDataProvider') {
            this.dataProvider = d;
          } else {
            this.dataProvider = new net.typoflash.userinterface.components.bDataProvider(d, m);
          }
          this.dataProvider.addEventListener('onSelect', this);
          this.dataProvider.addEventListener('onMultipleSelect', this);
        };

        v2.onSelect = function (o) {
          this.setDataProvider(o.dataProvider, this.multipleSelect);
          this.dispatchEvent(o);
        };

        v2.onMultipleSelect = function (o) {
          this.setDataProvider(o.dataProvider, this.multipleSelect);
          this.dispatchEvent(o);
        };

        v2.onClick = function (n) {
          var v2 = {};
          v2.type = 'onSetActive';
          v2.node = n;
          this.dispatchEvent(v2);
          this.dataProvider.__set__selected(n);
        };

        v2.renderTree = function () {
          this.holder = this.createEmptyMovieClip('root', 0);
          this.w = 0;
          this.currY = 0;
          this.itemNum = 0;
          if (this.expandable && this.expandStyle == 'tree') {
            this.inset = 20;
          } else {
            this.inset = 0;
          }
          this.renderBtns(this.dataProvider.xml.firstChild.childNodes, 0);
          if (this.fixedWidth > 0) {
            var v2 = {};
            v2.type = 'onSetWidth';
            v2.w = this.fixedWidth;
            this.dispatchEvent(v2);
          } else {
            var v2 = {};
            v2.type = 'onSetWidth';
            v2.w = this.w;
            this.dispatchEvent(v2);
          }
          this.popupBg._width = this.w + 2;
          this.popupBg._height = this.currY + 2;
          v2 = {};
          v2.type = 'onResize';
          v2.target = this;
          v2.h = this.currY + 2;
          v2.w = this.w + 2;
          this.dispatchEvent(v2);
        };

        v2.renderBtns = function (nodes, level) {
          var v15;
          var v6;
          var v16;
          var v3;
          var v4 = 0;
          while (v4 < nodes.length) {
            if (nodes[v4].attributes.item != null) {
              nodes[v4].attributes.mc = this.holder.attachMovie(nodes[v4].attributes.item, 'label' + this.itemNum, this.itemNum, nodes[v4].attributes.initObj);
              v3 = nodes[v4].attributes.mc;
            } else {
              nodes[v4].attributes.mc = this.holder.attachMovie(this.listItem, 'label' + this.itemNum, this.itemNum, nodes[v4].attributes.initObj);
              v3 = nodes[v4].attributes.mc;
            }
            v3._y = Math.round(this.currY);
            v3._x = Math.round(v3._x);
            v3._xscale = 100;
            if (this.rowHeight > 0) {
              v3.bg._height = this.rowHeight;
              v3.txt._y = Math.round((this.rowHeight - v3.txt._height) / 2);
            }
            this.currY += v3.bg._height;
            v3.bg.node = nodes[v4];
            v3.bg.mRoot = this;
            v3.txt.autoSize = 'left';
            v3.txt.antiAliasType = 'advanced';
            v3.txt.gridFitType = 'pixel';
            v3.txt.html = this.html;
            if (this.html) {
              v3.txt.htmlText = nodes[v4].attributes.label;
            } else {
              v3.txt.text = nodes[v4].attributes.label;
            }
            if (this.dynamicFont != null && this.useDynamicFonts) {
              _global.TF.FONT_MANAGER.applyTextFormatByReferenceName(this.dynamicFont, v3.txt, this.applyFontFormat);
            }
            v3.icon._x = Math.round(this.indentW * level + this.inset);
            v3.txt._x = Math.round(this.indentW * level + this.inset + this.iconInset);
            v3.icon._y = v3.txt._y;
            if (this.alternateBg) {
              if (this.itemNum % 2 == 0) {
                v3.bg.bg.gotoAndStop('even');
              }
            }
            if (nodes[v4].attributes.isSelected && this.selectable) {
              v3.bg.states.gotoAndStop('active');
            }
            if (nodes[v4].attributes.isSelected) {
              nodes[v4].attributes.selected = 'true';
            }
            if (nodes[v4].attributes.type == 'tick') {
              var v11 = v3.attachMovie('bFileMenuTick', 'tick', 20, {'_x': 0, '_y': 5});
              if (String(nodes[v4].attributes.selected) != 'true') {
                v11._visible = false;
              }
            }
            v3.onSetWidth = function (o) {
              this.bg._width = o.w;
              this.arrow._x = o.w - 15;
              this.subholder._x = o.w + 1;
            };

            if (this.fixedWidth != null) {
              v3.bg._width = this.fixedWidth;
              v3.subholder._x = this.fixedWidth + 1;
            } else {
              v3.bg._width = v3.txt._x + v3.txt._width;
            }
            this.addEventListener('onSetWidth', v3);
            if (nodes[v4].attributes.separatorBefore && v4 != 0) {
              v3.bg.topStroke._alpha = 90;
            } else {
              v3.bg.topStroke._alpha = this.topStroke;
            }
            v3.bg.bottomStroke._alpha = this.bottomStroke;
            if (nodes[v4].attributes.enabled != false && nodes[v4].attributes.enabled != 'false') {
              v3.bg.onRelease = function () {
                this.mRoot.onClick(this.node);
              };

              v3.bg.onRollOver = function () {
                this.hilite.gotoAndStop('over');
                if (this.mRoot.expandStyle == 'dropdown') {
                  if (this.node.hasChildNodes()) {
                    this.mRoot.attachSub(this.node, this._parent);
                  }
                  var v2 = {};
                  v2.type = 'onOpened';
                  v2.node = this.node;
                  this.mRoot.dispatchEvent(v2);
                }
              };

              v3.bg.onRollOut = function () {
                this.hilite.gotoAndPlay('out');
              };

              this.addEventListener('onSetActive', v3);
              v3.onSetActive = function (o) {
                if (o.node === this.node) {
                  if (this.node.attributes.type == 'tick') {
                    if (String(this.node.attributes.selected) == 'true') {
                      this.node.attributes.selected = 'false';
                      this.tick._visible = false;
                    } else {
                      this.node.attributes.selected = 'true';
                      this.tick._visible = true;
                    }
                  }
                } else {}
              };

            } else {
              v3.txt._alpha = 70;
              v3.bg._alpha = 70;
            }
            ++this.itemNum;
            if (nodes[v4].attributes.icon != null && this.showIcons) {
              var v14 = v3.icon.attachMovie(nodes[v4].attributes.icon, 'icon', 0);
            }
            if (nodes[v4].hasChildNodes() && this.expandable) {
              if (this.expandStyle == 'tree') {
                if (nodes[v4].attributes.isOpen || nodes[v4].attributes.isOpen == null && level < Number(this.openLevels)) {
                  v6 = v3.expandIcon.attachMovie('bListItemClose', 'sign', 1);
                  v6.onRelease = function () {
                    this.node.attributes.isOpen = 0;
                    this.mRoot.renderTree();
                  };

                  nodes[v4].attributes.isOpen = 1;
                  this.renderBtns(nodes[v4].childNodes, level + 1);
                } else {
                  v6 = v3.expandIcon.attachMovie('bListItemOpen', 'sign', 1);
                  v6.onRelease = function () {
                    this.node.attributes.isOpen = 1;
                    this.mRoot.renderTree();
                    var v2 = {};
                    v2.type = 'onResize';
                    v2.target = this.mRoot;
                    this.mRoot.dispatchEvent(v2);
                  };

                  nodes[v4].attributes.isOpen = 0;
                }
                v6._y = v3.txt._y + 3;
                v6._x = this.indentW * level + 3 + this.expandIconInset;
                v6.node = nodes[v4];
                v6.mRoot = this;
              } else {
                if (this.expandStyle == 'dropdown') {
                  var v10 = v3.attachMovie('bArrow', 'arrow', 10);
                  v10._y = v3._height / 2;
                  if (this.fixedWidth == null) {
                    v3.bg._width += 15;
                  }
                  v10._x = v3.bg._x - 15;
                }
              }
            }
            this.w = Math.max(this.w, v3._width + 3);
            v3.level = level;
            v3.mRoot = this;
            this.addEventListener('onSetSelected', v3);
            v3.id = v4;
            v3.node = nodes[v4];
            ++v4;
          }
        };

        v2.attachSub = function (node, mc) {
          var v5;
          var v16;
          var v7 = 50;
          var v12 = 0;
          var v22;
          var v4;
          var v6 = mc.subholder.attachMovie('bPopupBg', 'bPopupBg', 0);
          var v9 = 0;
          while (v9 < node.childNodes.length) {
            if (node.childNodes[v9].attributes.item != null) {
              node.childNodes[v9].attributes.mc = v6.holder.attachMovie(node.childNodes[v9].attributes.item, 'sub' + v9, 1000 - v9, node.childNodes[v9].attributes.initObj);
              v4 = node.childNodes[v9].attributes.mc;
            } else {
              node.childNodes[v9].attributes.mc = v6.holder.attachMovie(this.listItem, 'sub' + v9, 1000 - v9, node.childNodes[v9].attributes.initObj);
              v4 = node.childNodes[v9].attributes.mc;
            }
            v4._y = Math.round(v12);
            v4._x = Math.round(v4._x);
            v4._xscale = 100;
            if (this.rowHeight > 0) {
              v4.bg._height = this.rowHeight;
              v4.txt._y = Math.round((this.rowHeight - v4.txt._height) / 2);
            }
            v12 += v4.bg._height;
            v4.bg.node = node.childNodes[v9];
            v4.bg.mRoot = this;
            v4.txt.autoSize = 'left';
            v4.txt.antiAliasType = 'advanced';
            v4.txt.gridFitType = 'pixel';
            v4.txt.text = node.childNodes[v9].attributes.label;
            if (this.dynamicFont != null && this.useDynamicFonts) {
              _global.TF.FONT_MANAGER.applyTextFormatByReferenceName(this.dynamicFont, v4.txt, this.applyFontFormat);
            }
            v4.icon._x = Math.round(this.inset);
            v4.txt._x = Math.round(this.inset + this.iconInset);
            v4.icon._y = v4.txt._y;
            if (this.fixedWidth != null) {
              v4.bg._width = this.fixedWidth;
              v4.subholder._x = this.fixedWidth + 1;
            } else {
              v4.bg._width = v4.txt._x + v4.txt._width;
            }
            if (this.alternateBg) {
              if (this.itemNum % 2 == 0) {
                v4.bg.bg.gotoAndStop('even');
              }
            }
            if (node.childNodes[v9].attributes.isSelected && this.selectable) {
              v4.bg.states.gotoAndStop('active');
            }
            if (node.childNodes[v9].attributes.isSelected) {
              node.childNodes[v9].attributes.selected = 'true';
            }
            if (node.childNodes[v9].attributes.type == 'tick') {
              v4.bg.tick = v4.attachMovie('bFileMenuTick', 'tick', 20, {'_x': 0, '_y': 5});
              var v11 = v4.bg.tick;
              if (String(node.childNodes[v9].attributes.selected) != 'true') {
                v11._visible = false;
              }
            }
            if (node.childNodes[v9].attributes.icon != null && this.showIcons) {
              var v15 = v4.icon.attachMovie(node.childNodes[v9].attributes.icon, 'icon', 0);
            }
            if (node.childNodes[v9].attributes.separatorBefore && v9 != 0) {
              v4.bg.topStroke._alpha = 90;
            } else {
              v4.bg.topStroke._alpha = this.topStroke;
            }
            v4.bg.bottomStroke._alpha = this.bottomStroke;
            v4.bg.k = v6.k;
            v16 = v4._y + v4._height + 1;
            if (node.childNodes[v9].attributes.enabled != false && node.childNodes[v9].attributes.enabled != 'false') {
              v4.bg.onRelease = function () {
                this.mRoot.onClick(this.node);
                this.k.onPress();
              };

              v4.bg.onRollOver = function () {
                this.hilite.gotoAndStop('over');
                if (this.node.hasChildNodes()) {
                  this.mRoot.attachSub(this.node, this._parent);
                }
                var v2 = {};
                v2.type = 'onOpened';
                v2.node = this.node;
                this.mRoot.dispatchEvent(v2);
              };

              v4.bg.onRollOut = function () {
                this.hilite.gotoAndPlay('out');
              };

              this.addEventListener('onSetActive', v4.bg);
              v4.bg.onSetActive = function (o) {
                if (o.node === this.node) {
                  if (this.node.attributes.type == 'tick') {
                    if (String(this.node.attributes.selected) == 'true') {
                      this.node.attributes.selected = 'false';
                      this.tick._visible = false;
                    } else {
                      this.node.attributes.selected = 'true';
                      this.tick._visible = true;
                    }
                  }
                  this.bg.hilite.gotoAndStop('over');
                } else {
                  this.bg.states.gotoAndStop('passive');
                }
              };

            } else {}
            if (node.childNodes[v9].hasChildNodes()) {
              var v10 = v4.attachMovie('bArrow', 'arrow', 10);
              v10._y = v4._height / 2;
              if (this.fixedWidth == null) {
                v4.bg._width += 15;
              }
              v10._x = v4.bg._x - 15;
            }
            this.addEventListener('onOpened', v4.bg);
            v4.bg.onOpened = function (o) {
              if (o.node != this.node.parentNode && !this._parent._parent._parent.hitTest(_root._xmouse, _root._ymouse)) {
                this._parent._parent._parent.removeMovieClip();
              }
            };

            v7 = Math.max(v7, v4._width + 3);
            ++v9;
          }
          v9 = 0;
          while (v9 < node.childNodes.length) {
            v5 = v6.holder['sub' + v9];
            v5.arrow._x = v7 - 15;
            v5.arrow._y = v5._height / 2;
            v5.bg._width = v7;
            v5.subholder._x = v7 + 1;
            ++v9;
          }
          v6.bg._height = v12 + 2;
          v6.bg._width = v7 + 2;
          var v17 = {'x': v6._x, 'y': v6._y};
          v6._parent.localToGlobal(v17);
          if (v17.x > Stage.width - mc._width) {
            var v19 = new mx.transitions.Tween(v6, '_x', mx.transitions.easing.Regular.easeOut, -mc._width - 20, -mc._width - 5, 0.2, true);
          } else {
            var v19 = new mx.transitions.Tween(v6, '_x', mx.transitions.easing.Regular.easeOut, 20, 1, 0.2, true);
          }
        };

        v2.onResize = function (e) {
          var v2 = {};
          v2.type = 'onSetWidth';
          v2.w = e.w;
          this.dispatchEvent(v2);
        };

        v2.setSize = function (w, h) {
          this.fixedWidth = w;
          this.width = this.fixedWidth;
          this.height = h;
          var v2 = {};
          v2.type = 'onSetWidth';
          v2.w = w;
          this.dispatchEvent(v2);
        };

        ASSetPropFlags(net.typoflash.userinterface.components.bTree.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 301 __Packages.net.typoflash.userinterface.components.bTextField {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bTextField) {
        var v1 = function () {
          super();
          this.txt.autoSize = 'none';
        };

        net.typoflash.userinterface.components.bTextField = v1;
        net.typoflash.userinterface.components.bTextField extends net.typoflash.userinterface.components.bComponentBase;
        var v2 = v1.prototype;
        v2.init = function () {
          this.id = 'bTextField';
          this.defaultLabel = '';
          this.txt.mc = this;
          this.txt.onChanged = function () {
            var v2 = {};
            v2.target = this.mc;
            v2.type = 'change';
            this.mc.dispatchEvent(v2);
          };

          this.txt.text = this.defaultLabel;
        };

        v2.setSize = function (w, h) {
          this.txt._width = w - 10;
          this.txt._height = h;
          var v2 = {};
          v2.w = w;
          v2.h = h;
          v2.target = this;
          v2.type = 'onResize';
          this.dispatchEvent(v2);
          this.width = w;
          this.height = h;
        };

        v2.__set__text = function (t) {
          this.txt.text = t;
          return this.__get__text();
        };

        v2.__get__text = function () {
          return this.txt.text;
        };

        v2.getValue = function () {
          return this.__get__text();
        };

        v2.setValue = function (t) {
          this.__set__text(t);
        };

        v2.setTextProperty = function (p, v) {
          this.txt[p] = v;
        };

        v2.getTextProperty = function (p) {
          return this.txt[p];
        };

        v2.addProperty('text', v2.__get__text, v2.__set__text);
        ASSetPropFlags(net.typoflash.userinterface.components.bTextField.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 302 __Packages.net.typoflash.userinterface.components.bFileMenuItem {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bFileMenuItem) {
        var v1 = function () {
          super();
          if (this.multipleSelect == null) {
            this.multipleSelect = false;
          }
          if (this.expandable == null) {
            this.expandable = true;
          }
          if (this.autoResize == null) {
            this.autoResize = true;
          }
        };

        net.typoflash.userinterface.components.bFileMenuItem = v1;
        net.typoflash.userinterface.components.bFileMenuItem extends net.typoflash.userinterface.components.bPopupSelector;
        var v2 = v1.prototype;
        v2.init = function () {
          this.id = 'bFileMenuItem';
          this.bg.onRollOver = function () {
            this.hilite.gotoAndStop('over');
            this._parent.open();
          };

          this.bg.onRollOut = function () {
            this.hilite.gotoAndPlay('out');
          };

          if (this.label.length > 0) {
            var v4 = [];
            var v3;
            var v2 = 0;
            while (v2 < this.label.length) {
              v3 = {};
              v3.data = this.label[v2];
              v3.label = v3.data;
              if (this.data[v2] != null) {
                v3.data = this.data[v2];
              }
              v4.push(v3);
              ++v2;
            }
            this.setDataProvider(v4);
          }
        };

        v2.setSize = function (w, h) {
          w = Math.round(w);
          h = Math.round(h);
          this.fixedWidth = w;
          this.tree.setSize(w, h);
        };

        v2.open = function () {
          this.killMouseLayer = this.createKillMouseLayer();
          this.killMouseLayer.mc = this.depthManager.newPopup('bPopupBg');
          var v2 = this.killMouseLayer.mc;
          var v4 = {'expandable': true, 'expandStyle': 'dropdown', 'multipleSelect': false, 'showIcons': this.showIcons, 'iconInset': this.iconInset, 'selectable': this.selectable, 'alternateBg': false, 'rowHeight': 28, 'popupBg': v2.bg, 'fixedWidth': this.fixedWidth, 'useDynamicFonts': this.useDynamicFonts};
          this.tree = v2.holder.attachMovie('bTree', 'bTree', 0, v4);
          this.tree.setDataProvider(this.dataProvider);
          this.tree.renderTree();
          this.tree.addEventListener('onResize', v2);
          v2.onResize = function (o) {
            this._width = o.w;
            this._height = o.h;
          };

          var v3 = {'x': this.holder._x, 'y': this.holder._y};
          this.localToGlobal(v3);
          v3.x = Math.min(Stage.width - v2._width - 10, v3.x);
          v3.y = Math.min(Stage.height - v2._height - 10, v3.y);
          v2.globalToLocal(v3);
          v2._x = v3.x;
          v2._y = v3.y;
        };

        v2.selectable = false;
        ASSetPropFlags(net.typoflash.userinterface.components.bFileMenuItem.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 303 __Packages.net.typoflash.userinterface.components.bListItem {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bListItem) {
        var v1 = function () {
          super();
          this.txt.antiAliasType = 'advanced';
          this.txt.gridFitType = 'pixel';
        };

        net.typoflash.userinterface.components.bListItem = v1;
        net.typoflash.userinterface.components.bListItem extends MovieClip;
        var v2 = v1.prototype;
        v2.init = function () {};

        ASSetPropFlags(net.typoflash.userinterface.components.bListItem.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 304 __Packages.net.typoflash.userinterface.StandardBtn {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.StandardBtn) {
        var v1 = function () {
          super();
          this.width = this._width;
          this.height = this._height;
          this._yscale = 100;
          this._xscale = 100;
          this.setSize(this.width, this.height);
        };

        net.typoflash.userinterface.StandardBtn = v1;
        net.typoflash.userinterface.StandardBtn extends MovieClip;
        var v2 = v1.prototype;
        v2.onRollOver = function () {
          this.highlite.gotoAndStop('over');
          this.icon.animation.gotoAndPlay('over');
          this._selBegin = Selection.getBeginIndex();
          this._selEnd = Selection.getEndIndex();
        };

        v2.onRollOut = function () {
          this.highlite.gotoAndPlay('out');
          this.icon.animation.gotoAndPlay('out');
        };

        v2.setIcon = function (id) {
          this.icon.attachMovie(id, 'animation', 0);
          this.icon._xscale = (100 / this._xscale) * 100;
          this.icon._yscale = (100 / this._yscale) * 100;
        };

        v2.setIconSize = function (w, h) {
          this.icon._width = w;
          this.icon._height = h;
        };

        v2.setSound = function (id) {};

        v2.setState = function (state) {
          this.states.gotoAndStop(state);
        };

        v2.__set__label = function (l) {
          this.labelTxt.autoSize = 'center';
          this.labelTxt.text = l;
          this.setSize(this.labelTxt._width + 10, this.height);
          return this.__get__label();
        };

        v2.__get__label = function () {
          return this.labelTxt.text;
        };

        v2.setSize = function (w, h) {
          this.bg._width = w;
          this.states._width = this.bg._width;
          this.highlite._width = this.bg._width;
          this.bg._height = h;
          this.states._height = this.bg._height;
          this.highlite._height = this.bg._height;
          this.bg._x = w / 2;
          this.states._x = this.bg._x;
          this.highlite._x = this.bg._x;
          this.bg._y = h / 2;
          this.states._y = this.bg._y;
          this.highlite._y = this.bg._y;
        };

        v2.addProperty('label', v2.__get__label, v2.__set__label);
        ASSetPropFlags(net.typoflash.userinterface.StandardBtn.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 305 __Packages.net.typoflash.userinterface.popups.ContextPopup {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.popups) {
        _global.net.typoflash.userinterface.popups = new Object();
      }
      if (!_global.net.typoflash.userinterface.popups.ContextPopup) {
        var v1 = function () {
          super();
          this.killMouseLayer = this.depthManager.newKillMouseLayer();
          var v3 = this.killMouseLayer;
          v3.parent = this;
          v3.onPress = function () {
            this.parent.close();
          };

          this.bg.onPress = function () {};

          v3.useHandCursor = false;
          this.bg.useHandCursor = v3.useHandCursor;
          false;
        };

        net.typoflash.userinterface.popups.ContextPopup = v1;
        net.typoflash.userinterface.popups.ContextPopup extends MovieClip;
        var v2 = v1.prototype;
        v2.close = function () {
          this.killMouseLayer.removeMovieClip();
          this.removeMovieClip();
        };

        v2.setSize = function (w, h) {
          this.bg._height = h;
          this.shadow._height = h + 5;
          this.bg._width = w;
          this.shadow._width = w + 10;
        };

        ASSetPropFlags(net.typoflash.userinterface.popups.ContextPopup.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 306 __Packages.net.typoflash.userinterface.components.bTextArea {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bTextArea) {
        var v1 = function () {
          super();
          this.txt.autoSize = 'none';
        };

        net.typoflash.userinterface.components.bTextArea = v1;
        net.typoflash.userinterface.components.bTextArea extends net.typoflash.userinterface.components.bComponentBase;
        var v2 = v1.prototype;
        v2.init = function () {
          this.id = 'bTextArea';
          this.defaultLabel = '';
          this.txt.mc = this;
          this.txt.onChanged = function () {
            this.mc.setSize(this.mc.width, this.mc.height);
            var v2 = {};
            v2.target = this.mc;
            v2.type = 'change';
            this.mc.dispatchEvent(v2);
          };

          this.txt.text = this.defaultLabel;
          this.scr.__set__target(this.txt);
          this.scr.onLoaded = function () {
            this._parent.refresh();
          };

        };

        v2.__set__scrollerWidth = function (w) {
          this.scr.__set__scrollerWidth(w);
          return this.__get__scrollerWidth();
        };

        v2.__get__scrollerWidth = function () {
          return this.scr.__get__scrollerWidth();
        };

        v2.setSize = function (w, h) {
          if (this.txt.maxscroll > 1) {
            this.txt._width = w - this.__get__scrollerWidth();
            this.txt._height = h;
            this.scr._x = w - this.__get__scrollerWidth();
            this.scr.setSize(this.__get__scrollerWidth(), h);
            this.scr._visible = true;
          } else {
            this.txt._width = w;
            this.txt._height = h;
            this.scr._visible = false;
          }
          var v2 = {};
          v2.w = w;
          v2.h = h;
          v2.target = this;
          v2.type = 'onResize';
          this.dispatchEvent(v2);
          this.width = w;
          this.height = h;
        };

        v2.__set__text = function (t) {
          if (this.txt.html) {
            this.txt.htmlText = t;
          } else {
            this.txt.text = t;
          }
          if (this.dynamicFont != null && this.useDynamicFonts) {
            _global.TF.FONT_MANAGER.applyTextFormatByReferenceName(this.dynamicFont, this.txt, this.applyFontFormat);
          }
          this.setSize(this.width, this.height);
          return this.__get__text();
        };

        v2.__get__text = function () {
          if (this.txt.html) {
            return this.txt.htmlText;
          } else {
            return this.txt.text;
          }
        };

        v2.getValue = function () {
          return this.__get__text();
        };

        v2.setValue = function (t) {
          this.__set__text(t);
        };

        v2.__set__html = function (t) {
          this.txt.html = t;
          return this.__get__html();
        };

        v2.__get__html = function () {
          return this.txt.html;
        };

        v2.setTextProperty = function (p, v) {
          this.txt[p] = v;
        };

        v2.getTextProperty = function (p) {
          return this.txt[p];
        };

        v2.setScrollProperty = function (p, v) {
          this.scr[p] = v;
        };

        v2.getScrollProperty = function (p) {
          return this.scr[p];
        };

        v2.refresh = function () {
          this.setSize(this.width, this.height);
        };

        v2.addProperty('html', v2.__get__html, v2.__set__html);
        v2.addProperty('scrollerWidth', v2.__get__scrollerWidth, v2.__set__scrollerWidth);
        v2.addProperty('text', v2.__get__text, v2.__set__text);
        ASSetPropFlags(net.typoflash.userinterface.components.bTextArea.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 307 __Packages.net.typoflash.userinterface.LoginBox {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.LoginBox) {
        var v1 = function () {
          super();
        };

        net.typoflash.userinterface.LoginBox = v1;
        net.typoflash.userinterface.LoginBox extends MovieClip;
        var v2 = v1.prototype;
        v2.onFELoginStatus = function (obj) {
          net.typoflash.utils.Debug.trace(this.bId + ' got on' + this.mode + 'LoginStatus: ' + obj.status);
          if (this.mode == 'FE') {
            this.onLoginStatus(obj);
          }
        };

        v2.onBELoginStatus = function (obj) {
          net.typoflash.utils.Debug.trace(this.bId + ' got on' + this.mode + 'LoginStatus: ' + obj.status);
          if (this.mode == 'BE') {
            this.onLoginStatus(obj);
          }
        };

        v2.onLoginStatus = function (obj) {
          if (_global.TF.COOKIE.data['store' + this.mode + 'userdataEnabled']) {
            this.rememberMe_chk.selected = true;
            this.psw_txt._visible = true;
            this.usr_txt._visible = this.psw_txt._visible;
            if (this.usr_txt.length <= 0) {
              this.usr_txt.text = _global.TF.COOKIE.getData(this.mode + '_USR');
              this.psw_txt.text = _global.TF.COOKIE.getData(this.mode + '_PSW');
            }
          } else {
            this.rememberMe_chk.selected = false;
          }
          if (obj.status == true) {
            this.submitBtn.setIcon('icon_logout');
            this.submitBtn.onRelease = function () {
              net.typoflash.Authentication[this._parent.mode + 'logout']();
            };

            this.gotoAndStop('logout');
            if (_global.TF[this.mode + '_USER'].first_name.length > 0) {
              this.status_txt.text = 'WELCOME ' + _global.TF[this.mode + '_USER'].first_name.toUpperCase();
            } else {
              this.status_txt.text = 'WELCOME ' + _global.TF[this.mode + '_USER'].username.toUpperCase();
            }
            this.rememberMe_chk._visible = false;
            this.usr_txt._visible = this.rememberMe_chk._visible;
            this.psw_txt._visible = this.rememberMe_chk._visible;
          } else {
            if (obj.status == 'pending') {
              this.submitBtn.setIcon('icon_pending');
              this.submitBtn.onRelease = this.loginFunction;
              this.psw_txt.type = 'input';
              this.usr_txt.type = 'input';
              this.status_txt.text = '';
              this.usr_txt._visible = false;
              this.psw_txt._visible = this.usr_txt._visible;
            } else {
              if (obj.errortype > 0) {
                this.submitBtn.setIcon('icon_login');
                this.submitBtn.onRelease = this.loginFunction;
                this.gotoAndStop('login');
                this.psw_txt.type = 'input';
                this.usr_txt.type = 'input';
                this.psw_txt.password = true;
                this.rememberMe_chk._visible = true;
                this.usr_txt._visible = this.rememberMe_chk._visible;
                this.psw_txt._visible = this.rememberMe_chk._visible;
              } else {
                this.submitBtn.setIcon('icon_login');
                this.submitBtn.onRelease = this.loginFunction;
                this.gotoAndStop('login');
                this.psw_txt.type = 'input';
                this.usr_txt.type = 'input';
                this.psw_txt.password = true;
                this.rememberMe_chk._visible = true;
                this.usr_txt._visible = this.rememberMe_chk._visible;
                this.psw_txt._visible = this.rememberMe_chk._visible;
              }
            }
          }
        };

        v2.onLoad = function () {
          _global.TF.CORE_EVENTS.addEventListener('onBELoginStatus', this);
          _global.TF.CORE_EVENTS.addEventListener('onFELoginStatus', this);
          this.submitBtn.onRelease = this.loginFunction;
          if (this.autoCheck) {
            net.typoflash.Authentication['getActive' + this.mode + 'User']();
            this.submitBtn.setIcon('icon_pending');
          }
          this.psw_txt.type = 'input';
          this.usr_txt.type = 'input';
          this.psw_txt.password = true;
          var v3 = new Object();
          v3.root = this;
          v3.click = function (event_obj) {
            _global.TF.COOKIE.setData('store' + this.root.mode + 'userdataEnabled', event_obj.target.selected);
            net.typoflash.utils.Debug.trace('_global[\'TF\'][\'COOKIE\'].data.store' + this.root.mode + 'userdataEnabled ' + _global.TF.COOKIE.data['store' + this.root.mode + 'userdataEnabled']);
          };

          this.rememberMe_chk.addEventListener('click', v3);
        };

        v2.loginFunction = function () {
          net.typoflash.utils.Debug.trace(this + ' got loginFunction ' + this._parent.mode);
          if (this._parent.usr_txt.text.length > 0 && this._parent.psw_txt.text.length > 0) {
            if (_global.TF.COOKIE.getData(this._parent.mode + '_USR') == this._parent.usr_txt.text && _global.TF.COOKIE.getData(this._parent.mode + '_PSW') == this._parent.psw_txt.text) {
              net.typoflash.Authentication[this._parent.mode + 'login'](this._parent.usr_txt.text, this._parent.psw_txt.text, _global.TF.COOKIE.getData(this._parent.mode + '_SALT'));
            } else {
              _global.TF.COOKIE.setData(this._parent.mode + '_SALT', null);
              net.typoflash.Authentication[this._parent.mode + 'login'](this._parent.usr_txt.text, this._parent.psw_txt.text);
            }
          }
        };

        v2.setMode = function (mode) {
          this.mode = mode;
          this['on' + mode + 'LoginStatus'] = function (obj) {
            this.onLoginStatus(obj);
          };

          if (this.autoCheck) {
            net.typoflash.Authentication['getActive' + mode + 'User']();
          }
          _global.TF.CORE_EVENTS.addEventListener('on' + mode + 'LoginStatus', this);
        };

        v2.bId = 'LoginBox';
        ASSetPropFlags(net.typoflash.userinterface.LoginBox.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 196 __Packages.mx.core.UIObject {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.UIObject) {
        var v1 = function () {
          super();
          this.constructObject();
        };

        mx.core.UIObject = v1;
        mx.core.UIObject extends MovieClip;
        var v2 = v1.prototype;
        v2.__get__width = function () {
          return this._width;
        };

        v2.__get__height = function () {
          return this._height;
        };

        v2.__get__left = function () {
          return this._x;
        };

        v2.__get__x = function () {
          return this._x;
        };

        v2.__get__top = function () {
          return this._y;
        };

        v2.__get__y = function () {
          return this._y;
        };

        v2.__get__right = function () {
          return this._parent.width - (this._x + this.__get__width());
        };

        v2.__get__bottom = function () {
          return this._parent.height - (this._y + this.__get__height());
        };

        v2.getMinHeight = function (Void) {
          return this._minHeight;
        };

        v2.setMinHeight = function (h) {
          this._minHeight = h;
        };

        v2.__get__minHeight = function () {
          return this.getMinHeight();
        };

        v2.__set__minHeight = function (h) {
          this.setMinHeight(h);
          return this.__get__minHeight();
        };

        v2.getMinWidth = function (Void) {
          return this._minWidth;
        };

        v2.setMinWidth = function (w) {
          this._minWidth = w;
        };

        v2.__get__minWidth = function () {
          return this.getMinWidth();
        };

        v2.__set__minWidth = function (w) {
          this.setMinWidth(w);
          return this.__get__minWidth();
        };

        v2.setVisible = function (x, noEvent) {
          if (x != this._visible) {
            this._visible = x;
            if (noEvent != true) {
              this.dispatchEvent({'type': x ? 'reveal' : 'hide'});
            }
          }
        };

        v2.__get__visible = function () {
          return this._visible;
        };

        v2.__set__visible = function (x) {
          this.setVisible(x, false);
          return this.__get__visible();
        };

        v2.__get__scaleX = function () {
          return this._xscale;
        };

        v2.__set__scaleX = function (x) {
          this._xscale = x;
          return this.__get__scaleX();
        };

        v2.__get__scaleY = function () {
          return this._yscale;
        };

        v2.__set__scaleY = function (y) {
          this._yscale = y;
          return this.__get__scaleY();
        };

        v2.doLater = function (obj, fn) {
          if (this.methodTable == undefined) {
            this.methodTable = new Array();
          }
          this.methodTable.push({'obj': obj, 'fn': fn});
          this.onEnterFrame = this.doLaterDispatcher;
        };

        v2.doLaterDispatcher = function (Void) {
          delete this.onEnterFrame;
          if (this.invalidateFlag) {
            this.redraw();
          }
          var v3 = this.methodTable;
          this.methodTable = new Array();
          if (v3.length > 0) {
            var v2;
            v2 = v3.shift();
            while (v2 != undefined) {
              v2.obj[v2.fn]();
            }
          }
        };

        v2.cancelAllDoLaters = function (Void) {
          delete this.onEnterFrame;
          this.methodTable = new Array();
        };

        v2.invalidate = function (Void) {
          this.invalidateFlag = true;
          this.onEnterFrame = this.doLaterDispatcher;
        };

        v2.invalidateStyle = function (Void) {
          this.invalidate();
        };

        v2.redraw = function (bAlways) {
          if (this.invalidateFlag || bAlways) {
            this.invalidateFlag = false;
            var v2;
            for (v2 in this.tfList) {
              this.tfList[v2].draw();
            }
            this.draw();
            this.dispatchEvent({'type': 'draw'});
          }
        };

        v2.draw = function (Void) {};

        v2.move = function (x, y, noEvent) {
          var v3 = this._x;
          var v2 = this._y;
          this._x = x;
          this._y = y;
          if (noEvent != true) {
            this.dispatchEvent({'type': 'move', 'oldX': v3, 'oldY': v2});
          }
        };

        v2.setSize = function (w, h, noEvent) {
          var v3 = this.__width;
          var v2 = this.__height;
          this.__width = w;
          this.__height = h;
          this.size();
          if (noEvent != true) {
            this.dispatchEvent({'type': 'resize', 'oldWidth': v3, 'oldHeight': v2});
          }
        };

        v2.size = function (Void) {
          this._width = this.__width;
          this._height = this.__height;
        };

        v2.drawRect = function (x1, y1, x2, y2) {
          this.moveTo(x1, y1);
          this.lineTo(x2, y1);
          this.lineTo(x2, y2);
          this.lineTo(x1, y2);
          this.lineTo(x1, y1);
        };

        v2.createLabel = function (name, depth, text) {
          this.createTextField(name, depth, 0, 0, 0, 0);
          var v2 = this[name];
          v2._color = mx.core.UIObject.textColorList;
          v2._visible = false;
          v2.__text = text;
          if (this.tfList == undefined) {
            this.tfList = new Object();
          }
          this.tfList[name] = v2;
          v2.invalidateStyle();
          this.invalidate();
          v2.styleName = this;
          return v2;
        };

        v2.createObject = function (linkageName, id, depth, initobj) {
          return this.attachMovie(linkageName, id, depth, initobj);
        };

        v2.createClassObject = function (className, id, depth, initobj) {
          var v3 = className.symbolName == undefined;
          if (v3) {
            Object.registerClass(className.symbolOwner.symbolName, className);
          }
          var v4 = mx.core.UIObject(this.createObject(className.symbolOwner.symbolName, id, depth, initobj));
          if (v3) {
            Object.registerClass(className.symbolOwner.symbolName, className.symbolOwner);
          }
          return v4;
        };

        v2.createEmptyObject = function (id, depth) {
          return this.createClassObject(mx.core.UIObject, id, depth);
        };

        v2.destroyObject = function (id) {
          var v2 = this[id];
          if (v2.getDepth() < 0) {
            var v4 = this.buildDepthTable();
            var v5 = this.findNextAvailableDepth(0, v4, 'up');
            var v3 = v5;
            v2.swapDepths(v3);
          }
          v2.removeMovieClip();
          delete this[id];
        };

        v2.getSkinIDName = function (tag) {
          return this.idNames[tag];
        };

        v2.setSkin = function (tag, linkageName, initObj) {
          if (_global.skinRegistry[linkageName] == undefined) {
            mx.skins.SkinElement.registerElement(linkageName, mx.skins.SkinElement);
          }
          return this.createObject(linkageName, this.getSkinIDName(tag), tag, initObj);
        };

        v2.createSkin = function (tag) {
          var v2 = this.getSkinIDName(tag);
          this.createEmptyObject(v2, tag);
          return this[v2];
        };

        v2.createChildren = function (Void) {};

        v2._createChildren = function (Void) {
          this.createChildren();
          this.childrenCreated = true;
        };

        v2.constructObject = function (Void) {
          if (this._name == undefined) {
            return undefined;
          }
          this.init();
          this._createChildren();
          this.createAccessibilityImplementation();
          this._endInit();
          if (this.validateNow) {
            this.redraw(true);
          } else {
            this.invalidate();
          }
        };

        v2.initFromClipParameters = function (Void) {
          var v4 = false;
          var v2;
          for (v2 in this.clipParameters) {
            if (this.hasOwnProperty(v2)) {
              v4 = true;
              this['def_' + v2] = this[v2];
              delete this[v2];
            }
          }
          if (v4) {
            for (v2 in this.clipParameters) {
              var v3 = this['def_' + v2];
              if (v3 != undefined) {
                this[v2] = v3;
              }
            }
          }
        };

        v2.init = function (Void) {
          this.__width = this._width;
          this.__height = this._height;
          if (this.initProperties == undefined) {
            this.initFromClipParameters();
          } else {
            this.initProperties();
          }
          if (_global.cascadingStyles == true) {
            this.stylecache = new Object();
          }
        };

        v2.getClassStyleDeclaration = function (Void) {
          var v4 = this;
          var v3 = this.className;
          while (v3 != undefined) {
            if (this.ignoreClassStyleDeclaration[v3] == undefined) {
              if (_global.styles[v3] != undefined) {
                return _global.styles[v3];
              }
            }
            v4 = v4.__proto__;
            v3 = v4.className;
          }
        };

        v2.setColor = function (color) {};

        v2.__getTextFormat = function (tf, bAll) {
          var v8 = this.stylecache.tf;
          if (v8 != undefined) {
            var v3;
            for (v3 in mx.styles.StyleManager.TextFormatStyleProps) {
              if (bAll || mx.styles.StyleManager.TextFormatStyleProps[v3]) {
                if (tf[v3] == undefined) {
                  tf[v3] = v8[v3];
                }
              }
            }
            return false;
          }
          var v6 = false;
          for (v3 in mx.styles.StyleManager.TextFormatStyleProps) {
            if (bAll || mx.styles.StyleManager.TextFormatStyleProps[v3]) {
              if (tf[v3] == undefined) {
                var v5 = this._tf[v3];
                if (v5 != undefined) {
                  tf[v3] = v5;
                } else {
                  if (v3 == 'font' && this.fontFamily != undefined) {
                    tf[v3] = this.fontFamily;
                  } else {
                    if (v3 == 'size' && this.fontSize != undefined) {
                      tf[v3] = this.fontSize;
                    } else {
                      if (v3 == 'color' && this.color != undefined) {
                        tf[v3] = this.color;
                      } else {
                        if (v3 == 'leftMargin' && this.marginLeft != undefined) {
                          tf[v3] = this.marginLeft;
                        } else {
                          if (v3 == 'rightMargin' && this.marginRight != undefined) {
                            tf[v3] = this.marginRight;
                          } else {
                            if (v3 == 'italic' && this.fontStyle != undefined) {
                              tf[v3] = this.fontStyle == v3;
                            } else {
                              if (v3 == 'bold' && this.fontWeight != undefined) {
                                tf[v3] = this.fontWeight == v3;
                              } else {
                                if (v3 == 'align' && this.textAlign != undefined) {
                                  tf[v3] = this.textAlign;
                                } else {
                                  if (v3 == 'indent' && this.textIndent != undefined) {
                                    tf[v3] = this.textIndent;
                                  } else {
                                    if (v3 == 'underline' && this.textDecoration != undefined) {
                                      tf[v3] = this.textDecoration == v3;
                                    } else {
                                      if (v3 == 'embedFonts' && this.embedFonts != undefined) {
                                        tf[v3] = this.embedFonts;
                                      } else {
                                        v6 = true;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v6) {
            var v9 = this.styleName;
            if (v9 != undefined) {
              if (typeof v9 != 'string') {
                v6 = v9.__getTextFormat(tf, true, this);
              } else {
                if (_global.styles[v9] != undefined) {
                  v6 = _global.styles[v9].__getTextFormat(tf, true, this);
                }
              }
            }
          }
          if (v6) {
            var v10 = this.getClassStyleDeclaration();
            if (v10 != undefined) {
              v6 = v10.__getTextFormat(tf, true, this);
            }
          }
          if (v6) {
            if (_global.cascadingStyles) {
              if (this._parent != undefined) {
                v6 = this._parent.__getTextFormat(tf, false);
              }
            }
          }
          if (v6) {
            v6 = _global.style.__getTextFormat(tf, true, this);
          }
          return v6;
        };

        v2._getTextFormat = function (Void) {
          var v2 = this.stylecache.tf;
          if (v2 != undefined) {
            return v2;
          }
          v2 = new TextFormat();
          this.__getTextFormat(v2, true);
          this.stylecache.tf = v2;
          if (this.enabled == false) {
            var v3 = this.getStyle('disabledColor');
            v2.color = v3;
          }
          return v2;
        };

        v2.getStyleName = function (Void) {
          var v2 = this.styleName;
          if (v2 != undefined) {
            if (typeof v2 != 'string') {
              return v2.getStyleName();
            } else {
              return v2;
            }
          }
          if (this._parent != undefined) {
            return this._parent.getStyleName();
          } else {
            return undefined;
          }
        };

        v2.getStyle = function (styleProp) {
          var v3;
          ++_global.getStyleCounter;
          if (this[styleProp] != undefined) {
            return this[styleProp];
          }
          var v6 = this.styleName;
          if (v6 != undefined) {
            if (typeof v6 != 'string') {
              v3 = v6.getStyle(styleProp);
            } else {
              var v7 = _global.styles[v6];
              v3 = v7.getStyle(styleProp);
            }
          }
          if (v3 != undefined) {
            return v3;
          }
          v7 = this.getClassStyleDeclaration();
          if (v7 != undefined) {
            v3 = v7[styleProp];
          }
          if (v3 != undefined) {
            return v3;
          }
          if (_global.cascadingStyles) {
            if (mx.styles.StyleManager.isInheritingStyle(styleProp) || mx.styles.StyleManager.isColorStyle(styleProp)) {
              var v5 = this.stylecache;
              if (v5 != undefined) {
                if (v5[styleProp] != undefined) {
                  return v5[styleProp];
                }
              }
              if (this._parent != undefined) {
                v3 = this._parent.getStyle(styleProp);
              } else {
                v3 = _global.style[styleProp];
              }
              if (v5 != undefined) {
                v5[styleProp] = v3;
              }
              return v3;
            }
          }
          if (v3 == undefined) {
            v3 = _global.style[styleProp];
          }
          return v3;
        };

        v1.mergeClipParameters = function (o, p) {
          for (var v3 in p) {
            o[v3] = p[v3];
          }
          return true;
        };

        v1.symbolName = 'UIObject';
        v1.symbolOwner = mx.core.UIObject;
        v1.version = '2.0.2.127';
        v1.textColorList = {'color': 1, 'disabledColor': 1};
        v2.invalidateFlag = false;
        v2.lineWidth = 1;
        v2.lineColor = 0;
        v2.tabEnabled = false;
        v2.clipParameters = {'visible': 1, 'minHeight': 1, 'minWidth': 1, 'maxHeight': 1, 'maxWidth': 1, 'preferredHeight': 1, 'preferredWidth': 1};
        v2.addProperty('bottom', v2.__get__bottom, function () {});
        v2.addProperty('height', v2.__get__height, function () {});
        v2.addProperty('left', v2.__get__left, function () {});
        v2.addProperty('minHeight', v2.__get__minHeight, v2.__set__minHeight);
        v2.addProperty('minWidth', v2.__get__minWidth, v2.__set__minWidth);
        v2.addProperty('right', v2.__get__right, function () {});
        v2.addProperty('scaleX', v2.__get__scaleX, v2.__set__scaleX);
        v2.addProperty('scaleY', v2.__get__scaleY, v2.__set__scaleY);
        v2.addProperty('top', v2.__get__top, function () {});
        v2.addProperty('visible', v2.__get__visible, v2.__set__visible);
        v2.addProperty('width', v2.__get__width, function () {});
        v2.addProperty('x', v2.__get__x, function () {});
        v2.addProperty('y', v2.__get__y, function () {});
        ASSetPropFlags(mx.core.UIObject.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 246 __Packages.mx.skins.SkinElement {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.SkinElement) {
        var v1 = function () {
          super();
        };

        mx.skins.SkinElement = v1;
        mx.skins.SkinElement extends MovieClip;
        var v2 = v1.prototype;
        v1.registerElement = function (name, className) {
          Object.registerClass(name, (className == undefined) ? mx.skins.SkinElement : className);
          _global.skinRegistry[name] = true;
        };

        v2.__set__visible = function (visible) {
          this._visible = visible;
        };

        v2.move = function (x, y) {
          this._x = x;
          this._y = y;
        };

        v2.setSize = function (w, h) {
          this._width = w;
          this._height = h;
        };

        ASSetPropFlags(mx.skins.SkinElement.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 247 __Packages.mx.styles.CSSTextStyles {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.styles) {
        _global.mx.styles = new Object();
      }
      if (!_global.mx.styles.CSSTextStyles) {
        var v1 = function () {};

        mx.styles.CSSTextStyles = v1;
        var v2 = v1.prototype;
        v1.addTextStyles = function (o, bColor) {
          o.addProperty('textAlign', function () {
            return this._tf.align;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.align = x;
          });
          o.addProperty('fontWeight', function () {
            return (this._tf.bold != undefined) ? (this._tf.bold ? 'bold' : 'none') : undefined;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.bold = x == 'bold';
          });
          if (bColor) {
            o.addProperty('color', function () {
              return this._tf.color;
            }, function (x) {
              if (this._tf == undefined) {
                this._tf = new TextFormat();
              }
              this._tf.color = x;
            });
          }
          o.addProperty('fontFamily', function () {
            return this._tf.font;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.font = x;
          });
          o.addProperty('textIndent', function () {
            return this._tf.indent;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.indent = x;
          });
          o.addProperty('fontStyle', function () {
            return (this._tf.italic != undefined) ? (this._tf.italic ? 'italic' : 'none') : undefined;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.italic = x == 'italic';
          });
          o.addProperty('marginLeft', function () {
            return this._tf.leftMargin;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.leftMargin = x;
          });
          o.addProperty('marginRight', function () {
            return this._tf.rightMargin;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.rightMargin = x;
          });
          o.addProperty('fontSize', function () {
            return this._tf.size;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.size = x;
          });
          o.addProperty('textDecoration', function () {
            return (this._tf.underline != undefined) ? (this._tf.underline ? 'underline' : 'none') : undefined;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.underline = x == 'underline';
          });
          o.addProperty('embedFonts', function () {
            return this._tf.embedFonts;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.embedFonts = x;
          });
        };

        ASSetPropFlags(mx.styles.CSSTextStyles.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 249 __Packages.mx.styles.CSSStyleDeclaration {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.styles) {
        _global.mx.styles = new Object();
      }
      if (!_global.mx.styles.CSSStyleDeclaration) {
        var v1 = function () {};

        mx.styles.CSSStyleDeclaration = v1;
        var v2 = v1.prototype;
        v2.__getTextFormat = function (tf, bAll) {
          var v5 = false;
          if (this._tf != undefined) {
            var v2;
            for (v2 in mx.styles.StyleManager.TextFormatStyleProps) {
              if (bAll || mx.styles.StyleManager.TextFormatStyleProps[v2]) {
                if (tf[v2] == undefined) {
                  var v3 = this._tf[v2];
                  if (v3 != undefined) {
                    tf[v2] = v3;
                  } else {
                    v5 = true;
                  }
                }
              }
            }
            return v5;
          }
          v5 = true;
          return v5;
        };

        v2.getStyle = function (styleProp) {
          var v2 = this[styleProp];
          var v3 = mx.styles.StyleManager.getColorName(v2);
          return (v3 == undefined) ? v2 : v3;
        };

        v1.classConstruct = function () {
          mx.styles.CSSTextStyles.addTextStyles(mx.styles.CSSStyleDeclaration.prototype, true);
          return true;
        };

        v1.classConstructed = mx.styles.CSSStyleDeclaration.classConstruct();
        v1.CSSTextStylesDependency = mx.styles.CSSTextStyles;
        ASSetPropFlags(mx.styles.CSSStyleDeclaration.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 248 __Packages.mx.styles.StyleManager {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.styles) {
        _global.mx.styles = new Object();
      }
      if (!_global.mx.styles.StyleManager) {
        var v1 = function () {};

        mx.styles.StyleManager = v1;
        var v2 = v1.prototype;
        v1.registerInheritingStyle = function (styleName) {
          mx.styles.StyleManager.inheritingStyles[styleName] = true;
        };

        v1.isInheritingStyle = function (styleName) {
          return mx.styles.StyleManager.inheritingStyles[styleName] == true;
        };

        v1.registerColorStyle = function (styleName) {
          mx.styles.StyleManager.colorStyles[styleName] = true;
        };

        v1.isColorStyle = function (styleName) {
          return mx.styles.StyleManager.colorStyles[styleName] == true;
        };

        v1.registerColorName = function (colorName, colorValue) {
          mx.styles.StyleManager.colorNames[colorName] = colorValue;
        };

        v1.isColorName = function (colorName) {
          return mx.styles.StyleManager.colorNames[colorName] != undefined;
        };

        v1.getColorName = function (colorName) {
          return mx.styles.StyleManager.colorNames[colorName];
        };

        v1.inheritingStyles = {'color': true, 'direction': true, 'fontFamily': true, 'fontSize': true, 'fontStyle': true, 'fontWeight': true, 'textAlign': true, 'textIndent': true};
        v1.colorStyles = {'barColor': true, 'trackColor': true, 'borderColor': true, 'buttonColor': true, 'color': true, 'dateHeaderColor': true, 'dateRollOverColor': true, 'disabledColor': true, 'fillColor': true, 'highlightColor': true, 'scrollTrackColor': true, 'selectedDateColor': true, 'shadowColor': true, 'strokeColor': true, 'symbolBackgroundColor': true, 'symbolBackgroundDisabledColor': true, 'symbolBackgroundPressedColor': true, 'symbolColor': true, 'symbolDisabledColor': true, 'themeColor': true, 'todayIndicatorColor': true, 'shadowCapColor': true, 'borderCapColor': true, 'focusColor': true};
        v1.colorNames = {'black': 0, 'white': 16777215, 'red': 16711680, 'green': 65280, 'blue': 255, 'magenta': 16711935, 'yellow': 16776960, 'cyan': 65535, 'haloGreen': 8453965, 'haloBlue': 2881013, 'haloOrange': 16761344};
        v1.TextFormatStyleProps = {'font': true, 'size': true, 'color': true, 'leftMargin': false, 'rightMargin': false, 'italic': true, 'bold': true, 'align': true, 'indent': true, 'underline': false, 'embedFonts': false};
        v1.TextStyleMap = {'textAlign': true, 'fontWeight': true, 'color': true, 'fontFamily': true, 'textIndent': true, 'fontStyle': true, 'lineHeight': true, 'marginLeft': true, 'marginRight': true, 'fontSize': true, 'textDecoration': true, 'embedFonts': true};
        ASSetPropFlags(mx.styles.StyleManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 197 __Packages.mx.core.UIComponent {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.UIComponent) {
        var v1 = function () {
          super();
        };

        mx.core.UIComponent = v1;
        mx.core.UIComponent extends mx.core.UIObject;
        var v2 = v1.prototype;
        v2.__get__width = function () {
          return this.__width;
        };

        v2.__get__height = function () {
          return this.__height;
        };

        v2.setVisible = function (x, noEvent) {
          super.setVisible(x, noEvent);
        };

        v2.enabledChanged = function (id, oldValue, newValue) {
          this.setEnabled(newValue);
          this.invalidate();
          delete this.stylecache.tf;
          return newValue;
        };

        v2.setEnabled = function (enabled) {
          this.invalidate();
        };

        v2.getFocus = function () {
          var selFocus = Selection.getFocus();
          return (selFocus === null) ? null : eval(selFocus);
        };

        v2.setFocus = function () {
          Selection.setFocus(this);
        };

        v2.getFocusManager = function () {
          var v2 = this;
          while (v2 != undefined) {
            if (v2.focusManager != undefined) {
              return v2.focusManager;
            }
            v2 = v2._parent;
          }
          return undefined;
        };

        v2.onKillFocus = function (newFocus) {
          this.removeEventListener('keyDown', this);
          this.removeEventListener('keyUp', this);
          this.dispatchEvent({'type': 'focusOut'});
          this.drawFocus(false);
        };

        v2.onSetFocus = function (oldFocus) {
          this.addEventListener('keyDown', this);
          this.addEventListener('keyUp', this);
          this.dispatchEvent({'type': 'focusIn'});
          if ((this.getFocusManager()).bDrawFocus != false) {
            this.drawFocus(true);
          }
        };

        v2.findFocusInChildren = function (o) {
          if (o.focusTextField != undefined) {
            return o.focusTextField;
          }
          if (o.tabEnabled == true) {
            return o;
          }
          return undefined;
        };

        v2.findFocusFromObject = function (o) {
          if (o.tabEnabled != true) {
            if (o._parent == undefined) {
              return undefined;
            }
            if (o._parent.tabEnabled == true) {
              o = o._parent;
              return o;
            }
            if (o._parent.tabChildren) {
              o = this.findFocusInChildren(o._parent);
              return o;
            }
            o = this.findFocusFromObject(o._parent);
          }
          return o;
        };

        v2.pressFocus = function () {
          var v3 = this.findFocusFromObject(this);
          var v2 = this.getFocus();
          if (v3 != v2) {
            v2.drawFocus(false);
            if ((this.getFocusManager()).bDrawFocus != false) {
              v3.drawFocus(true);
            }
          }
        };

        v2.releaseFocus = function () {
          var v2 = this.findFocusFromObject(this);
          if (v2 != this.getFocus()) {
            v2.setFocus();
          }
        };

        v2.isParent = function (o) {
          while (o != undefined) {
            if (o == this) {
              return true;
            }
            o = o._parent;
          }
          return false;
        };

        v2.size = function () {};

        v2.init = function () {
          super.init();
          this._xscale = 100;
          this._yscale = 100;
          this._focusrect = _global.useFocusRect == false;
          this.watch('enabled', this.enabledChanged);
          if (this.enabled == false) {
            this.setEnabled(false);
          }
        };

        v2.dispatchValueChangedEvent = function (value) {
          this.dispatchEvent({'type': 'valueChanged', 'value': value});
        };

        v1.symbolName = 'UIComponent';
        v1.symbolOwner = mx.core.UIComponent;
        v1.version = '2.0.2.127';
        v1.kStretch = 5000;
        v2.focusEnabled = true;
        v2.tabEnabled = true;
        v2.origBorderStyles = {'themeColor': 16711680};
        v2.clipParameters = {};
        v1.mergedClipParameters = mx.core.UIObject.mergeClipParameters(mx.core.UIComponent.prototype.clipParameters, mx.core.UIObject.prototype.clipParameters);
        v2.addProperty('height', v2.__get__height, function () {});
        v2.addProperty('width', v2.__get__width, function () {});
        ASSetPropFlags(mx.core.UIComponent.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 198 __Packages.mx.controls.SimpleButton {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.SimpleButton) {
        var v1 = function () {
          super();
        };

        mx.controls.SimpleButton = v1;
        mx.controls.SimpleButton extends mx.core.UIComponent;
        var v2 = v1.prototype;
        v2.init = function (Void) {
          super.init();
          if (this.preset == undefined) {
            this.boundingBox_mc._visible = false;
            this.boundingBox_mc._height = 0;
            this.boundingBox_mc._width = 0;
          }
          this.useHandCursor = false;
        };

        v2.createChildren = function (Void) {
          if (this.preset != undefined) {
            var v2 = this[this.idNames[this.preset]];
            this[this.refNames[this.preset]] = v2;
            this.skinName = v2;
            if (this.falseOverSkin.length == 0) {
              this.rolloverSkin = this.fus;
            }
            if (this.falseOverIcon.length == 0) {
              this.rolloverIcon = this.fui;
            }
            this.initializing = false;
          } else {
            if (this.__state == true) {
              this.setStateVar(true);
            } else {
              if (this.falseOverSkin.length == 0) {
                this.rolloverSkin = this.fus;
              }
              if (this.falseOverIcon.length == 0) {
                this.rolloverIcon = this.fui;
              }
            }
          }
        };

        v2.setIcon = function (tag, linkageName) {
          return this.setSkin(tag + 8, linkageName);
        };

        v2.changeIcon = function (tag, linkageName) {
          this.linkLength = linkageName.length;
          var v2 = this.stateNames[tag] + 'Icon';
          this[v2] = linkageName;
          this[this.idNames[tag + 8]] = v2;
          this.setStateVar(this.getState());
        };

        v2.changeSkin = function (tag, linkageName) {
          var v2 = this.stateNames[tag] + 'Skin';
          this[v2] = linkageName;
          this[this.idNames[tag]] = v2;
          this.setStateVar(this.getState());
        };

        v2.viewIcon = function (varName) {
          var v4 = varName + 'Icon';
          var v3 = this[v4];
          if (typeof v3 == 'string') {
            var v5 = v3;
            if (this.__emphasized) {
              if (this[v3 + 'Emphasized'].length > 0) {
                v3 += 'Emphasized';
              }
            }
            if (this[v3].length == 0) {
              return undefined;
            }
            v3 = this.setIcon(this.tagMap[v5], this[v3]);
            if (v3 == undefined && _global.isLivePreview) {
              v3 = this.setIcon(0, 'ButtonIcon');
            }
            this[v4] = v3;
          }
          this.iconName._visible = false;
          this.iconName = v3;
          this.iconName._visible = true;
        };

        v2.removeIcons = function () {
          var v3 = 0;
          while (v3 < 2) {
            var v2 = 8;
            while (v2 < 16) {
              this.destroyObject(this.idNames[v2]);
              this[this.stateNames[v2 - 8] + 'Icon'] = '';
              ++v2;
            }
            ++v3;
          }
          this.refresh();
        };

        v2.setSkin = function (tag, linkageName, initobj) {
          if (initobj == undefined) {
            var v3 = super.setSkin(tag, linkageName, {'styleName': this});
            this.calcSize(tag, v3);
            return v3;
          }
          var v3 = super.setSkin(tag, linkageName, initobj);
          this.calcSize(tag, v3);
          return v3;
        };

        v2.calcSize = function (Void) {
          this.__width = this._width;
          this.__height = this._height;
        };

        v2.viewSkin = function (varName, initObj) {
          var v3 = varName + 'Skin';
          var v2 = this[v3];
          if (typeof v2 == 'string') {
            var v4 = v2;
            if (this.__emphasized) {
              if (this[v2 + 'Emphasized'].length > 0) {
                v2 += 'Emphasized';
              }
            }
            if (this[v2].length == 0) {
              return undefined;
            }
            v2 = this.setSkin(this.tagMap[v4], this[v2], (initObj != undefined) ? initObj : {'styleName': this});
            this[v3] = v2;
          }
          this.skinName._visible = false;
          this.skinName = v2;
          this.skinName._visible = true;
        };

        v2.showEmphasized = function (e) {
          if (e && !this.__emphatic) {
            if (mx.controls.SimpleButton.emphasizedStyleDeclaration != undefined) {
              this.__emphaticStyleName = this.styleName;
              this.styleName = mx.controls.SimpleButton.emphasizedStyleDeclaration;
            }
            this.__emphatic = true;
          } else {
            if (this.__emphatic) {
              this.styleName = this.__emphaticStyleName;
            }
            this.__emphatic = false;
          }
        };

        v2.refresh = function (Void) {
          var v2 = this.getState();
          if (this.enabled == false) {
            this.viewIcon('disabled');
            this.viewSkin('disabled');
          } else {
            this.viewSkin(this.phase);
            this.viewIcon(this.phase);
          }
          this.setView(this.phase == 'down');
          this.iconName.enabled = this.enabled;
        };

        v2.setView = function (offset) {
          if (this.iconName == undefined) {
            return undefined;
          }
          var v2 = offset ? this.btnOffset : 0;
          this.iconName._x = (this.__width - this.iconName._width) / 2 + v2;
          this.iconName._y = (this.__height - this.iconName._height) / 2 + v2;
        };

        v2.setStateVar = function (state) {
          if (state) {
            if (this.trueOverSkin.length == 0) {
              this.rolloverSkin = this.tus;
            } else {
              this.rolloverSkin = this.trs;
            }
            if (this.trueOverIcon.length == 0) {
              this.rolloverIcon = this.tui;
            } else {
              this.rolloverIcon = this.tri;
            }
            this.upSkin = this.tus;
            this.downSkin = this.tds;
            this.disabledSkin = this.dts;
            this.upIcon = this.tui;
            this.downIcon = this.tdi;
            this.disabledIcon = this.dti;
          } else {
            if (this.falseOverSkin.length == 0) {
              this.rolloverSkin = this.fus;
            } else {
              this.rolloverSkin = this.frs;
            }
            if (this.falseOverIcon.length == 0) {
              this.rolloverIcon = this.fui;
            } else {
              this.rolloverIcon = this.fri;
            }
            this.upSkin = this.fus;
            this.downSkin = this.fds;
            this.disabledSkin = this.dfs;
            this.upIcon = this.fui;
            this.downIcon = this.fdi;
            this.disabledIcon = this.dfi;
          }
          this.__state = state;
        };

        v2.setState = function (state) {
          if (state != this.__state) {
            this.setStateVar(state);
            this.invalidate();
          }
        };

        v2.size = function (Void) {
          this.refresh();
        };

        v2.draw = function (Void) {
          if (this.initializing) {
            this.initializing = false;
            this.skinName.visible = true;
            this.iconName.visible = true;
          }
          this.size();
        };

        v2.getState = function (Void) {
          return this.__state;
        };

        v2.setToggle = function (val) {
          this.__toggle = val;
          if (this.__toggle == false) {
            this.setState(false);
          }
        };

        v2.getToggle = function (Void) {
          return this.__toggle;
        };

        v2.__set__toggle = function (val) {
          this.setToggle(val);
          return this.__get__toggle();
        };

        v2.__get__toggle = function () {
          return this.getToggle();
        };

        v2.__set__value = function (val) {
          this.setSelected(val);
          return this.__get__value();
        };

        v2.__get__value = function () {
          return this.getSelected();
        };

        v2.__set__selected = function (val) {
          this.setSelected(val);
          return this.__get__selected();
        };

        v2.__get__selected = function () {
          return this.getSelected();
        };

        v2.setSelected = function (val) {
          if (this.__toggle) {
            this.setState(val);
          } else {
            this.setState(this.initializing ? val : this.__state);
          }
        };

        v2.getSelected = function () {
          return this.__state;
        };

        v2.setEnabled = function (val) {
          if (this.enabled != val) {
            super.setEnabled(val);
            this.invalidate();
          }
        };

        v2.onPress = function (Void) {
          this.pressFocus();
          this.phase = 'down';
          this.refresh();
          this.dispatchEvent({'type': 'buttonDown'});
          if (this.autoRepeat) {
            this.interval = setInterval(this, 'onPressDelay', this.getStyle('repeatDelay'));
          }
        };

        v2.onPressDelay = function (Void) {
          this.dispatchEvent({'type': 'buttonDown'});
          if (this.autoRepeat) {
            clearInterval(this.interval);
            this.interval = setInterval(this, 'onPressRepeat', this.getStyle('repeatInterval'));
          }
        };

        v2.onPressRepeat = function (Void) {
          this.dispatchEvent({'type': 'buttonDown'});
          updateAfterEvent();
        };

        v2.onRelease = function (Void) {
          this.releaseFocus();
          this.phase = 'rollover';
          if (this.interval != undefined) {
            clearInterval(this.interval);
            delete this.interval;
          }
          if (this.getToggle()) {
            this.setState(!this.getState());
          } else {
            this.refresh();
          }
          this.dispatchEvent({'type': 'click'});
        };

        v2.onDragOut = function (Void) {
          this.phase = 'up';
          this.refresh();
          this.dispatchEvent({'type': 'buttonDragOut'});
        };

        v2.onDragOver = function (Void) {
          if (this.phase != 'up') {
            this.onPress();
            return undefined;
          } else {
            this.phase = 'down';
            this.refresh();
          }
        };

        v2.onReleaseOutside = function (Void) {
          this.releaseFocus();
          this.phase = 'up';
          if (this.interval != undefined) {
            clearInterval(this.interval);
            delete this.interval;
          }
        };

        v2.onRollOver = function (Void) {
          this.phase = 'rollover';
          this.refresh();
        };

        v2.onRollOut = function (Void) {
          this.phase = 'up';
          this.refresh();
        };

        v2.getLabel = function (Void) {
          return this.fui.text;
        };

        v2.setLabel = function (val) {
          if (typeof this.fui == 'string') {
            this.createLabel('fui', 8, val);
            this.fui.styleName = this;
          } else {
            this.fui.text = val;
          }
          var v4 = this.fui._getTextFormat();
          var v2 = v4.getTextExtent2(val);
          this.fui._width = v2.width + 5;
          this.fui._height = v2.height + 5;
          this.iconName = this.fui;
          this.setView(this.__state);
        };

        v2.__get__emphasized = function () {
          return this.__emphasized;
        };

        v2.__set__emphasized = function (val) {
          this.__emphasized = val;
          var v2 = 0;
          while (v2 < 8) {
            this[this.idNames[v2]] = this.stateNames[v2] + 'Skin';
            if (typeof this[this.idNames[v2 + 8]] == 'movieclip') {
              this[this.idNames[v2 + 8]] = this.stateNames[v2] + 'Icon';
            }
            ++v2;
          }
          this.showEmphasized(this.__emphasized);
          this.setStateVar(this.__state);
          this.invalidateStyle();
          return this.__get__emphasized();
        };

        v2.keyDown = function (e) {
          if (e.code == 32) {
            this.onPress();
          }
        };

        v2.keyUp = function (e) {
          if (e.code == 32) {
            this.onRelease();
          }
        };

        v2.onKillFocus = function (newFocus) {
          super.onKillFocus();
          if (this.phase != 'up') {
            this.phase = 'up';
            this.refresh();
          }
        };

        v1.symbolName = 'SimpleButton';
        v1.symbolOwner = mx.controls.SimpleButton;
        v1.version = '2.0.2.127';
        v2.className = 'SimpleButton';
        v2.style3dInset = 4;
        v2.btnOffset = 1;
        v2.__toggle = false;
        v2.__state = false;
        v2.__emphasized = false;
        v2.__emphatic = false;
        v1.falseUp = 0;
        v1.falseDown = 1;
        v1.falseOver = 2;
        v1.falseDisabled = 3;
        v1.trueUp = 4;
        v1.trueDown = 5;
        v1.trueOver = 6;
        v1.trueDisabled = 7;
        v2.falseUpSkin = 'SimpleButtonUp';
        v2.falseDownSkin = 'SimpleButtonIn';
        v2.falseOverSkin = '';
        v2.falseDisabledSkin = 'SimpleButtonUp';
        v2.trueUpSkin = 'SimpleButtonIn';
        v2.trueDownSkin = '';
        v2.trueOverSkin = '';
        v2.trueDisabledSkin = 'SimpleButtonIn';
        v2.falseUpIcon = '';
        v2.falseDownIcon = '';
        v2.falseOverIcon = '';
        v2.falseDisabledIcon = '';
        v2.trueUpIcon = '';
        v2.trueDownIcon = '';
        v2.trueOverIcon = '';
        v2.trueDisabledIcon = '';
        v2.phase = 'up';
        v2.fui = 'falseUpIcon';
        v2.fus = 'falseUpSkin';
        v2.fdi = 'falseDownIcon';
        v2.fds = 'falseDownSkin';
        v2.frs = 'falseOverSkin';
        v2.fri = 'falseOverIcon';
        v2.dfi = 'falseDisabledIcon';
        v2.dfs = 'falseDisabledSkin';
        v2.tui = 'trueUpIcon';
        v2.tus = 'trueUpSkin';
        v2.tdi = 'trueDownIcon';
        v2.tds = 'trueDownSkin';
        v2.trs = 'trueOverSkin';
        v2.tri = 'trueOverIcon';
        v2.dts = 'trueDisabledSkin';
        v2.dti = 'trueDisabledIcon';
        v2.rolloverSkin = mx.controls.SimpleButton.prototype.frs;
        v2.rolloverIcon = mx.controls.SimpleButton.prototype.fri;
        v2.upSkin = mx.controls.SimpleButton.prototype.fus;
        v2.downSkin = mx.controls.SimpleButton.prototype.fds;
        v2.disabledSkin = mx.controls.SimpleButton.prototype.dfs;
        v2.upIcon = mx.controls.SimpleButton.prototype.fui;
        v2.downIcon = mx.controls.SimpleButton.prototype.fdi;
        v2.disabledIcon = mx.controls.SimpleButton.prototype.dfi;
        v2.initializing = true;
        v2.idNames = ['fus', 'fds', 'frs', 'dfs', 'tus', 'tds', 'trs', 'dts', 'fui', 'fdi', 'fri', 'dfi', 'tui', 'tdi', 'tri', 'dti'];
        v2.stateNames = ['falseUp', 'falseDown', 'falseOver', 'falseDisabled', 'trueUp', 'trueDown', 'trueOver', 'trueDisabled'];
        v2.refNames = ['upSkin', 'downSkin', 'rolloverSkin', 'disabledSkin'];
        v2.tagMap = {'falseUpSkin': 0, 'falseDownSkin': 1, 'falseOverSkin': 2, 'falseDisabledSkin': 3, 'trueUpSkin': 4, 'trueDownSkin': 5, 'trueOverSkin': 6, 'trueDisabledSkin': 7, 'falseUpIcon': 0, 'falseDownIcon': 1, 'falseOverIcon': 2, 'falseDisabledIcon': 3, 'trueUpIcon': 4, 'trueDownIcon': 5, 'trueOverIcon': 6, 'trueDisabledIcon': 7};
        v2.addProperty('emphasized', v2.__get__emphasized, v2.__set__emphasized);
        v2.addProperty('selected', v2.__get__selected, v2.__set__selected);
        v2.addProperty('toggle', v2.__get__toggle, v2.__set__toggle);
        v2.addProperty('value', v2.__get__value, v2.__set__value);
        ASSetPropFlags(mx.controls.SimpleButton.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 199 __Packages.mx.controls.Button {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.Button) {
        var v1 = function () {
          super();
        };

        mx.controls.Button = v1;
        mx.controls.Button extends mx.controls.SimpleButton;
        var v2 = v1.prototype;
        v2.init = function (Void) {
          super.init();
        };

        v2.draw = function () {
          if (this.initializing) {
            this.labelPath.visible = true;
          }
          super.draw();
          if (this.initIcon != undefined) {
            this._setIcon(this.initIcon);
          }
          delete this.initIcon;
        };

        v2.onRelease = function (Void) {
          super.onRelease();
        };

        v2.createChildren = function (Void) {
          super.createChildren();
        };

        v2.setSkin = function (tag, linkageName, initobj) {
          return super.setSkin(tag, linkageName, initobj);
        };

        v2.viewSkin = function (varName) {
          var v3 = this.getState() ? 'true' : 'false';
          v3 += this.enabled ? this.phase : 'disabled';
          super.viewSkin(varName, {'styleName': this, 'borderStyle': v3});
        };

        v2.invalidateStyle = function (c) {
          this.labelPath.invalidateStyle(c);
          super.invalidateStyle(c);
        };

        v2.setColor = function (c) {
          var v2 = 0;
          while (v2 < 8) {
            this[this.idNames[v2]].redraw(true);
            ++v2;
          }
        };

        v2.setEnabled = function (enable) {
          this.labelPath.enabled = enable;
          super.setEnabled(enable);
        };

        v2.calcSize = function (tag, ref) {
          if (this.__width == undefined || this.__height == undefined) {
            return undefined;
          }
          if (tag < 7) {
            ref.setSize(this.__width, this.__height, true);
          }
        };

        v2.size = function (Void) {
          this.setState(this.getState());
          this.setHitArea(this.__width, this.__height);
          var v3 = 0;
          while (v3 < 8) {
            var v4 = this.idNames[v3];
            if (typeof this[v4] == 'movieclip') {
              this[v4].setSize(this.__width, this.__height, true);
            }
            ++v3;
          }
          super.size();
        };

        v2.__set__labelPlacement = function (val) {
          this.__labelPlacement = val;
          this.invalidate();
          return this.__get__labelPlacement();
        };

        v2.__get__labelPlacement = function () {
          return this.__labelPlacement;
        };

        v2.getLabelPlacement = function (Void) {
          return this.__labelPlacement;
        };

        v2.setLabelPlacement = function (val) {
          this.__labelPlacement = val;
          this.invalidate();
        };

        v2.getBtnOffset = function (Void) {
          if (this.getState()) {
            var v2 = this.btnOffset;
            return v2;
          }
          if (this.phase == 'down') {
            v2 = this.btnOffset;
            return v2;
          }
          v2 = 0;
          return v2;
        };

        v2.setView = function (offset) {
          var v16 = offset ? this.btnOffset : 0;
          var v12 = this.getLabelPlacement();
          var v7 = 0;
          var v6 = 0;
          var v11 = 0;
          var v8 = 0;
          var v5 = 0;
          var v4 = 0;
          var v3 = this.labelPath;
          var v2 = this.iconName;
          var v15 = v3.textWidth;
          var v14 = v3.textHeight;
          var v9 = this.__width - this.borderW - this.borderW;
          var v10 = this.__height - this.borderW - this.borderW;
          if (v2 != undefined) {
            v7 = v2._width;
            v6 = v2._height;
          }
          if (v12 == 'left' || v12 == 'right') {
            if (v3 != undefined) {
              v11 = Math.min(v9 - v7, v15 + 5);
              v3._width = v11;
              v8 = Math.min(v10, v14 + 5);
              v3._height = v8;
            }
            if (v12 == 'right') {
              v5 = v7;
              if (this.centerContent) {
                v5 += (v9 - v11 - v7) / 2;
              }
              v2._x = v5 - v7;
            } else {
              v5 = v9 - v11 - v7;
              if (this.centerContent) {
                v5 /= 2;
              }
              v2._x = v5 + v11;
            }
            v4 = 0;
            v2._y = v4;
            if (this.centerContent) {
              v2._y = (v10 - v6) / 2;
              v4 = (v10 - v8) / 2;
            }
            if (!this.centerContent) {
              v2._y += Math.max(0, (v8 - v6) / 2);
            }
          } else {
            if (v3 != undefined) {
              v11 = Math.min(v9, v15 + 5);
              v3._width = v11;
              v8 = Math.min(v10 - v6, v14 + 5);
              v3._height = v8;
            }
            v5 = (v9 - v11) / 2;
            v2._x = (v9 - v7) / 2;
            if (v12 == 'top') {
              v4 = v10 - v8 - v6;
              if (this.centerContent) {
                v4 /= 2;
              }
              v2._y = v4 + v8;
            } else {
              v4 = v6;
              if (this.centerContent) {
                v4 += (v10 - v8 - v6) / 2;
              }
              v2._y = v4 - v6;
            }
          }
          var v13 = this.borderW + v16;
          v3._x = v5 + v13;
          v3._y = v4 + v13;
          v2._x += v13;
          v2._y += v13;
        };

        v2.__set__label = function (lbl) {
          this.setLabel(lbl);
          return this.__get__label();
        };

        v2.setLabel = function (label) {
          if (label == '') {
            this.labelPath.removeTextField();
            this.refresh();
            return undefined;
          }
          if (this.labelPath == undefined) {
            var v2 = this.createLabel('labelPath', 200, label);
            v2._width = v2.textWidth + 5;
            v2._height = v2.textHeight + 5;
            if (this.initializing) {
              v2.visible = false;
            }
          } else {
            delete this.labelPath.__text;
            this.labelPath.text = label;
            this.refresh();
          }
        };

        v2.getLabel = function (Void) {
          return (this.labelPath.__text != undefined) ? this.labelPath.__text : this.labelPath.text;
        };

        v2.__get__label = function () {
          return this.getLabel();
        };

        v2._getIcon = function (Void) {
          return this._iconLinkageName;
        };

        v2.__get__icon = function () {
          if (this.initializing) {
            return this.initIcon;
          }
          return this._iconLinkageName;
        };

        v2._setIcon = function (linkage) {
          if (this.initializing) {
            if (linkage == '') {
              return undefined;
            }
            this.initIcon = linkage;
          } else {
            if (linkage == '') {
              this.removeIcons();
              return undefined;
            }
            super.changeIcon(0, linkage);
            super.changeIcon(1, linkage);
            super.changeIcon(3, linkage);
            super.changeIcon(4, linkage);
            super.changeIcon(5, linkage);
            this._iconLinkageName = linkage;
            this.refresh();
          }
        };

        v2.__set__icon = function (linkage) {
          this._setIcon(linkage);
          return this.__get__icon();
        };

        v2.setHitArea = function (w, h) {
          if (this.hitArea_mc == undefined) {
            this.createEmptyObject('hitArea_mc', 100);
          }
          var v2 = this.hitArea_mc;
          v2.clear();
          v2.beginFill(16711680);
          v2.drawRect(0, 0, w, h);
          v2.endFill();
          v2.setVisible(false);
        };

        v1.symbolName = 'Button';
        v1.symbolOwner = mx.controls.Button;
        v2.className = 'Button';
        v1.version = '2.0.2.127';
        v2.btnOffset = 0;
        v2._color = 'buttonColor';
        v2.__label = 'default value';
        v2.__labelPlacement = 'right';
        v2.falseUpSkin = 'ButtonSkin';
        v2.falseDownSkin = 'ButtonSkin';
        v2.falseOverSkin = 'ButtonSkin';
        v2.falseDisabledSkin = 'ButtonSkin';
        v2.trueUpSkin = 'ButtonSkin';
        v2.trueDownSkin = 'ButtonSkin';
        v2.trueOverSkin = 'ButtonSkin';
        v2.trueDisabledSkin = 'ButtonSkin';
        v2.falseUpIcon = '';
        v2.falseDownIcon = '';
        v2.falseOverIcon = '';
        v2.falseDisabledIcon = '';
        v2.trueUpIcon = '';
        v2.trueDownIcon = '';
        v2.trueOverIcon = '';
        v2.trueDisabledIcon = '';
        v2.clipParameters = {'labelPlacement': 1, 'icon': 1, 'toggle': 1, 'selected': 1, 'label': 1};
        v1.mergedClipParameters = mx.core.UIObject.mergeClipParameters(mx.controls.Button.prototype.clipParameters, mx.controls.SimpleButton.prototype.clipParameters);
        v2.centerContent = true;
        v2.borderW = 1;
        v2.addProperty('icon', v2.__get__icon, v2.__set__icon);
        v2.addProperty('label', v2.__get__label, v2.__set__label);
        v2.addProperty('labelPlacement', v2.__get__labelPlacement, v2.__set__labelPlacement);
        ASSetPropFlags(mx.controls.Button.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 200 __Packages.mx.controls.CheckBox {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.CheckBox) {
        var v1 = function () {
          super();
        };

        mx.controls.CheckBox = v1;
        mx.controls.CheckBox extends mx.controls.Button;
        var v2 = v1.prototype;
        v2.onRelease = function () {
          super.onRelease();
        };

        v2.init = function () {
          super.init();
        };

        v2.size = function () {
          super.size();
        };

        v2.__get__emphasized = function () {
          return undefined;
        };

        v2.calcPreferredHeight = function () {
          var v5 = this._getTextFormat();
          var v3 = (v5.getTextExtent2(this.labelPath.text)).height;
          var v4 = this.iconName._height;
          var v2 = 0;
          if (this.__labelPlacement == 'left' || this.__labelPlacement == 'right') {
            v2 = Math.max(v3, v4);
            return Math.max(14, v2);
          }
          v2 = v3 + v4;
          return Math.max(14, v2);
        };

        v2.__set__toggle = function (v) {
          return this.__get__toggle();
        };

        v2.__get__toggle = function () {};

        v2.__set__icon = function (v) {
          return this.__get__icon();
        };

        v2.__get__icon = function () {};

        v1.symbolName = 'CheckBox';
        v1.symbolOwner = mx.controls.CheckBox;
        v1.version = '2.0.2.127';
        v2.className = 'CheckBox';
        v2.ignoreClassStyleDeclaration = {'Button': 1};
        v2.btnOffset = 0;
        v2.__toggle = true;
        v2.__selected = false;
        v2.__labelPlacement = 'right';
        v2.__label = 'CheckBox';
        v2.falseUpSkin = '';
        v2.falseDownSkin = '';
        v2.falseOverSkin = '';
        v2.falseDisabledSkin = '';
        v2.trueUpSkin = '';
        v2.trueDownSkin = '';
        v2.trueOverSkin = '';
        v2.trueDisabledSkin = '';
        v2.falseUpIcon = 'CheckFalseUp';
        v2.falseDownIcon = 'CheckFalseDown';
        v2.falseOverIcon = 'CheckFalseOver';
        v2.falseDisabledIcon = 'CheckFalseDisabled';
        v2.trueUpIcon = 'CheckTrueUp';
        v2.trueDownIcon = 'CheckTrueDown';
        v2.trueOverIcon = 'CheckTrueOver';
        v2.trueDisabledIcon = 'CheckTrueDisabled';
        v2.clipParameters = {'label': 1, 'labelPlacement': 1, 'selected': 1};
        v1.mergedClipParameters = mx.core.UIObject.mergeClipParameters(mx.controls.CheckBox.prototype.clipParameters, mx.controls.Button.prototype.clipParameters);
        v2.centerContent = false;
        v2.borderW = 0;
        v2.addProperty('emphasized', v2.__get__emphasized, function () {});
        v2.addProperty('icon', v2.__get__icon, v2.__set__icon);
        v2.addProperty('toggle', v2.__get__toggle, v2.__set__toggle);
        ASSetPropFlags(mx.controls.CheckBox.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 308 __Packages.net.typoflash.Authentication {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.Authentication) {
        var v1 = function () {
          net.typoflash.Authentication._gateway = _global.TF.REMOTING_GATEWAY;
          _global.TF.CORE_EVENTS.addEventListener('onRelayConnectionStatus', this);
        };

        net.typoflash.Authentication = v1;
        var v2 = v1.prototype;
        v2.toString = function () {
          return 'Authentication';
        };

        v1.FElogin = function (usr, psw, oldsalt) {
          if (_global.TF.FE_SECURITY_LEVEL == null) {
            _global.TF.FE_SECURITY_LEVEL = 'challenged';
          }
          if (_global.TF.FE_SECURITY_LEVEL == 'challenged' && oldsalt.length <= 0) {
            var v4 = getTimer() / Math.random();
            v4 = escape(v4);
          }
          net.typoflash.utils.Debug.trace('Should go to supermode now');
          if (oldsalt.length <= 0 && _global.TF.FE_SECURITY_LEVEL != 'normal') {
            var v8 = new net.typoflash.datahandling.MD5();
            var v9 = psw;
            var v5 = v8.encrypt(psw);
            psw = net.typoflash.Authentication.challengePsw(usr, v5, v4);
            net.typoflash.utils.Debug.trace('Psw was: ' + v9 + ' md5: ' + v5 + ' super: ' + psw);
          } else {
            v4 = oldsalt;
          }
          net.typoflash.Authentication.serv = new mx.remoting.Service(_global.TF.REMOTING_GATEWAY, null, 'typoflash.remoting.contentrendering', null, null);
          var v10 = net.typoflash.Authentication.serv.FElogin(usr, psw, v4);
          if (_global.TF.COOKIE.data.storeFEuserdataEnabled) {
            _global.TF.COOKIE.setData('FE_USR', usr);
            _global.TF.COOKIE.setData('FE_PSW', psw);
            _global.TF.COOKIE.setData('FE_SALT', v4);
          } else {
            _global.TF.COOKIE.setData('FE_USR', '');
            _global.TF.COOKIE.setData('FE_PSW', '');
            _global.TF.COOKIE.setData('FE_SALT', '');
          }
          net.typoflash.utils.Debug.trace('If login successful you will be acting as a FEuser');
          net.typoflash.utils.Debug.trace('Normal security usr: ' + usr + ' psw: ' + psw + ' salt: ' + v4 + ' oldsalt: ' + oldsalt);
          v10.__set__responder(new mx.rpc.RelayResponder(new net.typoflash.Authentication(), 'FEloginResult', 'error'));
          var v3 = {};
          v3.type = 'onFELoginStatus';
          v3.status = 'pending';
          _global.TF.CORE_EVENTS.dispatchEvent(v3);
        };

        v2.FEloginResult = function (data) {
          net.typoflash.utils.Debug.trace(data);
          if (data.result.errortype > 0) {
            var v4 = {};
            v4.type = 'onFELoginStatus';
            v4.status = false;
            v4.errortype = data.result.errortype;
            v4.errormsg = data.result.errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            if (data.result) {
              _global.TF.FE_USER = {};
              for (var v3 in data.result) {
                _global.TF.FE_USER[v3] = data.result[v3];
              }
              var v4 = {};
              v4.type = 'onFELoginStatus';
              v4.status = true;
              _global.TF.CORE_EVENTS.dispatchEvent(v4);
              net.typoflash.Authentication._isLogged = true;
            } else {
              net.typoflash.utils.Debug.trace('Falied to log in');
              var v4 = {};
              v4.type = 'onFELoginStatus';
              v4.status = false;
              _global.TF.CORE_EVENTS.dispatchEvent(v4);
              net.typoflash.Authentication._isLogged = false;
            }
          }
        };

        v2.FEloginStatus = function (data) {};

        v1.BElogin = function (usr, psw, oldsalt) {
          if (_global.TF.BE_SECURITY_LEVEL == null) {
            _global.TF.BE_SECURITY_LEVEL = 'challenged';
          }
          if (_global.TF.BE_SECURITY_LEVEL == 'challenged' && oldsalt.length <= 0) {
            var v4 = getTimer() / Math.random();
            v4 = escape(v4);
          }
          if (oldsalt.length <= 0) {
            var v7 = new net.typoflash.datahandling.MD5();
            psw = v7.encrypt(psw);
            psw = net.typoflash.Authentication.challengePsw(usr, psw, v4);
          } else {
            v4 = oldsalt;
          }
          net.typoflash.Authentication.serv = new mx.remoting.Service(_global.TF.REMOTING_GATEWAY, null, 'typoflash.remoting.contentediting', null, null);
          var v8 = net.typoflash.Authentication.serv.BElogin(usr, psw, v4);
          if (_global.TF.COOKIE.data.storeBEuserdataEnabled) {
            _global.TF.COOKIE.setData('BE_USR', usr);
            _global.TF.COOKIE.setData('BE_PSW', psw);
            _global.TF.COOKIE.setData('BE_SALT', v4);
          } else {
            _global.TF.COOKIE.setData('BE_USR', '');
            _global.TF.COOKIE.setData('BE_PSW', '');
            _global.TF.COOKIE.setData('BE_SALT', '');
          }
          net.typoflash.utils.Debug.trace('usr: ' + usr + ' psw: ' + psw + ' salt: ' + v4 + ' oldsalt: ' + oldsalt);
          v8.__set__responder(new mx.rpc.RelayResponder(new net.typoflash.Authentication(), 'BEloginResult', 'error'));
          var v3 = {};
          v3.type = 'onBELoginStatus';
          v3.status = 'pending';
          _global.TF.CORE_EVENTS.dispatchEvent(v3);
        };

        v2.BEloginResult = function (data) {
          net.typoflash.utils.Debug.trace(data);
          _global.TF.BE_USER = null;
          if (_global.TF.COOKIE.data.storeBEuserdataEnabled) {
            _global.TF.COOKIE.setData('BE_USER', null);
          }
          if (data.result.errortype > 0) {
            var v4 = {};
            v4.type = 'onBELoginStatus';
            v4.status = false;
            v4.errortype = data.result.errortype;
            v4.errormsg = data.result.errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            if (data.result) {
              _global.TF.BE_USER = {};
              for (var v3 in data.result) {
                _global.TF.BE_USER[v3] = data.result[v3];
              }
              var v4 = {};
              v4.type = 'onBELoginStatus';
              v4.status = true;
              _global.TF.CORE_EVENTS.dispatchEvent(v4);
            } else {
              net.typoflash.utils.Debug.trace('Falied to log in');
              var v4 = {};
              v4.type = 'onBELoginStatus';
              v4.status = false;
              _global.TF.CORE_EVENTS.dispatchEvent(v4);
            }
          }
        };

        v2.BEloginStatus = function (data) {};

        v1.challengePsw = function (usr, psw, salt) {
          var v1 = new net.typoflash.datahandling.MD5();
          var v2 = usr + ':' + psw + ':' + salt;
          var v3 = v1.encrypt(v2);
          return v3;
        };

        v2.onRelayConnectionStatus = function (obj) {};

        v1.FElogout = function () {
          net.typoflash.Authentication.serv = new mx.remoting.Service(_global.TF.REMOTING_GATEWAY, null, 'typoflash.remoting.contentrendering', null, null);
          var v3 = net.typoflash.Authentication.serv.FElogout();
          v3.__set__responder(new mx.rpc.RelayResponder(new net.typoflash.Authentication(), 'logoutFEResult', 'error'));
          var v2 = {};
          v2.type = 'onFELoginStatus';
          v2.status = 'pending';
          _global.TF.CORE_EVENTS.dispatchEvent(v2);
        };

        v2.logoutFEResult = function (data) {
          _global.TF.FE_USER = '';
          var v2 = {};
          v2.type = 'onFELoginStatus';
          v2.status = !data.result;
          _global.TF.CORE_EVENTS.dispatchEvent(v2);
          net.typoflash.Authentication._isLogged = false;
        };

        v2.logoutFEStatus = function (data) {
          net.typoflash.utils.Debug.trace('\n\n\nlogoutStatus ' + mx.data.binding.ObjectDumper.toString(data.result));
        };

        v1.getActiveFEUser = function () {
          net.typoflash.Authentication.serv = new mx.remoting.Service(_global.TF.REMOTING_GATEWAY, null, 'typoflash.remoting.contentrendering', null, null);
          var v3 = net.typoflash.Authentication.serv.getActiveFEuser();
          v3.__set__responder(new mx.rpc.RelayResponder(new net.typoflash.Authentication(), 'getActiveFEResult', 'error'));
          var v2 = {};
          v2.type = 'onFELoginStatus';
          v2.status = 'pending';
          _global.TF.CORE_EVENTS.dispatchEvent(v2);
        };

        v2.getActiveFEResult = function (data) {
          if (data.result.uid > 0) {
            _global.TF.FE_USER = {};
            for (var v3 in data.result) {
              _global.TF.FE_USER[v3] = data.result[v3];
            }
            var v4 = {};
            v4.type = 'onFELoginStatus';
            net.typoflash.Authentication._isLogged = true;
            v4.status = net.typoflash.Authentication._isLogged;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            net.typoflash.utils.Debug.trace('No active FE user ');
            net.typoflash.utils.Debug.trace(data.result);
            var v4 = {};
            v4.type = 'onFELoginStatus';
            net.typoflash.Authentication._isLogged = false;
            v4.status = net.typoflash.Authentication._isLogged;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          }
        };

        v1.getActiveBEUser = function () {
          net.typoflash.Authentication.serv = new mx.remoting.Service(_global.TF.REMOTING_GATEWAY, null, 'typoflash.remoting.contentediting', null, null);
          net.typoflash.utils.Debug.trace(_global.TF.REMOTING_GATEWAY);
          var v3 = net.typoflash.Authentication.serv.getActiveBEuser();
          v3.__set__responder(new mx.rpc.RelayResponder(new net.typoflash.Authentication(), 'getActiveBEResult', 'error'));
          var v2 = {};
          v2.type = 'onBELoginStatus';
          v2.status = 'pending';
          _global.TF.CORE_EVENTS.dispatchEvent(v2);
        };

        v2.getActiveBEResult = function (data) {
          if (data.result.uid > 0) {
            _global.TF.BE_USER = {};
            for (var v3 in data.result) {
              _global.TF.BE_USER[v3] = data.result[v3];
            }
            net.typoflash.utils.Debug.trace('Authentication.getActiveBEResult: Active BE user is ' + _global.TF.BE_USER.username);
            var v4 = {};
            v4.type = 'onBELoginStatus';
            v4.status = true;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            net.typoflash.utils.Debug.trace('Authentication.getActiveBEResult: No active BE user ');
            net.typoflash.utils.Debug.trace(data.result);
            var v4 = {};
            v4.type = 'onBELoginStatus';
            v4.status = false;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          }
        };

        v1.BElogout = function () {
          net.typoflash.Authentication.serv = new mx.remoting.Service(_global.TF.REMOTING_GATEWAY, null, 'typoflash.remoting.contentediting', null, null);
          var v3 = net.typoflash.Authentication.serv.BElogout();
          v3.__set__responder(new mx.rpc.RelayResponder(new net.typoflash.Authentication(), 'logoutBEResult', 'error'));
          var v2 = {};
          v2.type = 'onBELoginStatus';
          v2.status = 'pending';
          _global.TF.CORE_EVENTS.dispatchEvent(v2);
        };

        v2.logoutBEResult = function (data) {
          net.typoflash.utils.Debug.trace('logoutBEResult');
          net.typoflash.utils.Debug.trace(data);
          var v2 = {};
          v2.type = 'onBELoginStatus';
          v2.status = !data.result;
          _global.TF.CORE_EVENTS.dispatchEvent(v2);
        };

        v2.error = function (data) {
          net.typoflash.utils.Debug.trace(data);
        };

        v1.__get__gateway = function () {
          return net.typoflash.Authentication._gateway;
        };

        v1.__get__isLogged = function () {
          if (net.typoflash.Authentication._isLogged == null) {
            net.typoflash.Authentication._isLogged = false;
          }
          return net.typoflash.Authentication._isLogged;
        };

        v1._instance = null;
        v2.isLoggedButNotIdentified = false;
        v1.addProperty('gateway', v1.__get__gateway, function () {});
        v1.addProperty('isLogged', v1.__get__isLogged, function () {});
        ASSetPropFlags(net.typoflash.Authentication.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 309 __Packages.mx.remoting.Service {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.Service) {
        var v1 = function (gatewayURI, logger, serviceName, conn, resp) {
          super();
          this.log = logger;
          this.log.logInfo('Creating Service for ' + serviceName, mx.services.Log.VERBOSE);
          if (gatewayURI == '' && conn == null) {
            gatewayURI = mx.remoting.NetServices.gatewayUrl;
          }
          gatewayURI = mx.remoting.NetServices.getHttpUrl(gatewayURI);
          if (conn == null) {
            conn = mx.remoting.NetServices.getConnection(gatewayURI);
            if (conn == null) {
              this.log.logInfo('Creating gateway connection for ' + gatewayURI, mx.services.Log.VERBOSE);
              conn = mx.remoting.NetServices.createGatewayConnection(gatewayURI, logger);
            }
          }
          this.__conn = conn;
          conn.updateConfig();
          this._allowRes = true;
          this.__serviceName = serviceName;
          this.__responder = resp;
          this.log.logInfo('Successfully created Service', mx.services.Log.VERBOSE);
        };

        mx.remoting.Service = v1;
        mx.remoting.Service extends Object;
        var v2 = v1.prototype;
        v2.__get__connection = function () {
          return this.__conn;
        };

        v2.__resolve = function (methodName) {
          if (this._allowRes) {
            var v2 = this.__makeOpFunc(methodName);
            this[methodName] = v2;
            return v2;
          } else {
            return null;
          }
        };

        v2.__makeOpFunc = function (name) {
          var op = new mx.remoting.Operation(name, this);
          var v3 = function () {
            op.invoke(arguments);
            return op.send();
          };

          v3.send = function () {
            return op.createThenSend();
          };

          v3.setResponder = function (resp) {
            op.responder = resp;
          };

          v3.getRequest = function () {
            return op.request;
          };

          v3.setRequest = function (val) {
            op.request = val;
          };

          v3.addProperty('request', v3.getRequest, v3.setRequest);
          v3.operation = op;
          return v3;
        };

        v2.__get__name = function () {
          return this.__serviceName;
        };

        v2.__get__responder = function () {
          return this.__responder;
        };

        v1.version = '1.2.0.124';
        v2._allowRes = false;
        v2.addProperty('connection', v2.__get__connection, function () {});
        v2.addProperty('name', v2.__get__name, function () {});
        v2.addProperty('responder', v2.__get__responder, function () {});
        ASSetPropFlags(mx.remoting.Service.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 310 __Packages.mx.services.Log {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.services) {
        _global.mx.services = new Object();
      }
      if (!_global.mx.services.Log) {
        var v1 = function (logLevel, name) {
          this.level = (logLevel == undefined) ? mx.services.Log.BRIEF : logLevel;
          this.name = (name == undefined) ? '' : name;
        };

        mx.services.Log = v1;
        var v2 = v1.prototype;
        v2.logInfo = function (msg, level) {
          if (level == undefined) {
            level = mx.services.Log.BRIEF;
          }
          if (level <= this.level) {
            if (level == mx.services.Log.DEBUG) {
              this.onLog(this.getDateString() + ' [DEBUG] ' + this.name + ': ' + msg);
            } else {
              this.onLog(this.getDateString() + ' [INFO] ' + this.name + ': ' + msg);
            }
          }
        };

        v2.logDebug = function (msg) {
          this.logInfo(msg, mx.services.Log.DEBUG);
        };

        v2.getDateString = function () {
          var v1 = new Date();
          return v1.getMonth() + 1 + '/' + v1.getDate() + ' ' + v1.getHours() + ':' + v1.getMinutes() + ':' + v1.getSeconds();
        };

        v2.onLog = function (message) {
          trace(message);
        };

        v1.NONE = -1;
        v1.BRIEF = 0;
        v1.VERBOSE = 1;
        v1.DEBUG = 2;
        ASSetPropFlags(mx.services.Log.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 311 __Packages.mx.remoting.Connection {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.Connection) {
        var v1 = function () {
          super();
        };

        mx.remoting.Connection = v1;
        mx.remoting.Connection extends NetConnection;
        var v2 = v1.prototype;
        v2.getService = function (serviceName, client) {
          var v2 = new mx.remoting.NetServiceProxy(this, serviceName, client);
          return v2;
        };

        v2.setCredentials = function (userId, password) {
          this.addHeader('Credentials', false, {'userid': userId, 'password': password});
        };

        v2.clone = function () {
          var v2 = new mx.remoting.Connection();
          v2.connect(this.uri);
          return v2;
        };

        v2.getDebugId = function () {
          return null;
        };

        v2.getDebugConfig = function () {
          return null;
        };

        v2.setDebugId = function (id) {};

        v2.updateConfig = function () {};

        v2.call = function () {
          super.call.apply(super, arguments);
        };

        v2.close = function () {
          super.close();
        };

        v2.connect = function (url) {
          return super.connect(url);
        };

        v2.addHeader = function (name, mustUnderstand, obj) {
          super.addHeader(name, mustUnderstand, obj);
        };

        v2.trace = function (traceObj) {};

        v2.AppendToGatewayUrl = function (urlSuffix) {
          this.__urlSuffix = urlSuffix;
          if (this.__originalUrl == null) {
            this.__originalUrl = this.uri;
          }
          var v2 = this.__originalUrl + urlSuffix;
          this.connect(v2);
        };

        v2.ReplaceGatewayUrl = function (newUrl) {
          this.connect(newUrl);
        };

        v2.RequestPersistentHeader = function (info) {
          this.addHeader(info.name, info.mustUnderstand, info.data);
        };

        v1.version = '1.2.0.124';
        ASSetPropFlags(mx.remoting.Connection.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 312 __Packages.mx.remoting.NetServiceProxy {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.NetServiceProxy) {
        var v1 = function (netC, servName, cli) {
          super();
          if (netC != null) {
            this.nc = netC;
            this.serviceName = servName;
            this.client = cli;
          }
          this._allowRes = true;
        };

        mx.remoting.NetServiceProxy = v1;
        mx.remoting.NetServiceProxy extends Object;
        var v2 = v1.prototype;
        v2._setParentService = function (service) {
          this.nc = service.nc;
          this.client = service.client;
        };

        v2.__resolve = function (methodName) {
          if (this._allowRes) {
            var v3 = function () {
              if (this.client != null) {
                arguments.unshift(new mx.remoting.NetServiceProxyResponder(this, methodName));
              } else {
                if (typeof arguments[0].onResult != 'function') {
                  mx.remoting.NetServices.trace('NetServices', 'warning', 3, 'There is no defaultResponder, and no responder was given in call to ' + methodName);
                  arguments.unshift(new mx.remoting.NetServiceProxyResponder(this, methodName));
                }
              }
              if (typeof this.serviceName == 'function') {
                this.serviceName = this.servicename;
              }
              arguments.unshift(this.serviceName + '.' + methodName);
              return this.nc.call.apply(this.nc, arguments);
            };

            return v3;
          } else {
            return null;
          }
        };

        v1.registerNetServiceProxy = function () {
          Object.registerClass('NetServiceProxy', mx.remoting.NetServiceProxy);
          return true;
        };

        v1.init = mx.remoting.NetServiceProxy.registerNetServiceProxy();
        v2._allowRes = false;
        ASSetPropFlags(mx.remoting.NetServiceProxy.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 313 __Packages.mx.remoting.NetServiceProxyResponder {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.NetServiceProxyResponder) {
        var v1 = function (serv, method) {
          super();
          this.service = serv;
          this.methodName = method;
        };

        mx.remoting.NetServiceProxyResponder = v1;
        mx.remoting.NetServiceProxyResponder extends Object;
        var v2 = v1.prototype;
        v2.onResult = function (result) {
          var v2 = this.service.client;
          if (result instanceof mx.remoting.NetServiceProxy || result instanceof mx.remoting.RecordSet) {
            result._setParentService(this.service);
          }
          var v4 = this.methodName + '_Result';
          if (typeof v2[v4] == 'function') {
            v2[v4].apply(v2, [result]);
          } else {
            if (typeof v2.onResult == 'function') {
              v2.onResult(result);
            } else {
              mx.remoting.NetServices.trace('NetServices', 'info', 1, v4 + ' was received from server: ' + result);
            }
          }
        };

        v2.onStatus = function (result) {
          var v4 = this.service.client;
          var v6 = this.methodName + '_Status';
          if (typeof v4[v6] == 'function') {
            v4[v6].apply(v4, [result]);
          } else {
            if (typeof v4.onStatus == 'function') {
              v4.onStatus(result);
            } else {
              if (typeof _root.onStatus == 'function') {
                _root.onStatus(result);
              } else {
                if (typeof _global.System.onStatus == 'function') {
                  _global.System.onStatus(result);
                } else {
                  mx.remoting.NetServices.trace('NetServices', 'info', 2, v6 + ' was received from server: <' + result.level + '> ' + result.description);
                }
              }
            }
          }
        };

        ASSetPropFlags(mx.remoting.NetServiceProxyResponder.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 314 __Packages.mx.data.PageableData {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.data) {
        _global.mx.data = new Object();
      }
      if (!_global.mx.data.PageableData) {
        _global.mx.data.PageableData = function () {};

      }
    #endinitclip
  }

  movieClip 315 __Packages.mx.data.DataRange {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.data) {
        _global.mx.data = new Object();
      }
      if (!_global.mx.data.DataRange) {
        _global.mx.data.DataRange = function () {};

      }
    #endinitclip
  }

  movieClip 316 __Packages.mx.data.PageableList {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.data) {
        _global.mx.data = new Object();
      }
      if (!_global.mx.data.PageableList) {
        _global.mx.data.PageableList = function () {};

        _global.mx.data.PageableList implements _global.mx.data.PageableData;
      }
    #endinitclip
  }

  movieClip 317 __Packages.mx.remoting.RecordSet {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.RecordSet) {
        var v1 = function (columnNames) {
          super();
          mx.events.EventDispatcher.initialize(this);
          this._items = new Array();
          this.uniqueID = 0;
          if (this.mTitles != null) {
            return undefined;
          }
          if (this.serverInfo == null) {
            if (this.serverinfo != null) {
              this.serverInfo = this.serverinfo;
            }
          }
          if (this.serverInfo == null) {
            this.mTitles = columnNames;
            return undefined;
          }
          if (this.serverInfo.version != 1) {
            mx.remoting.NetServices.trace('RecordSet', 'warning', 100, 'Received incompatible RecordSet version from server');
            return undefined;
          }
          this.mTitles = this.serverInfo.columnNames;
          this.mRecordsAvailable = 0;
          this.setData((this.serverInfo.cursor == null) ? 0 : this.serverInfo.cursor - 1, this.serverInfo.initialData);
          if (this.serverInfo.initialData.length != this.serverInfo.totalCount) {
            this.mRecordSetID = this.serverInfo.id;
            if (this.mRecordSetID != null) {
              this.serviceName = (this.serverInfo.serviceName == null) ? 'RecordSet' : this.serverInfo.serviceName;
              this.mTotalCount = this.serverInfo.totalCount;
              this.mDeliveryMode = 'ondemand';
              this.mAllNotified = false;
              this.mOutstandingRecordCount = 0;
            } else {
              mx.remoting.NetServices.trace('RecordSet', 'warning', 102, 'Missing some records, but there\'s no RecordSet id');
            }
          }
          this.serverInfo = null;
        };

        mx.remoting.RecordSet = v1;
        mx.remoting.RecordSet extends Object;
        var v2 = v1.prototype;
        _global.mx.remoting.RecordSet implements _global.mx.data.PageableList;
        v2.addItem = function (item) {
          this.addItemAt(this.__get__length(), item);
        };

        v2.addItemAt = function (index, item) {
          var v3 = true;
          if (index < this.__get__length() && index >= 0) {
            (this.__get__items()).splice(index, 0, item);
          } else {
            if (index == this.__get__length()) {
              (this.__get__items())[index] = item;
            } else {
              v3 = false;
              mx.remoting.NetServices.trace('Cannot add an item outside the bounds of the RecordSet');
              return undefined;
            }
          }
          if (v3) {
            item.__ID__ = this.uniqueID++;
          }
          this.updateViews('addItems', index, index);
        };

        v2.addEventListener = function (event, listener) {};

        v2.clear = function () {
          if (this.checkLocal()) {
            return undefined;
          }
          var v2 = (this.__get__items()).length;
          (this.__get__items()).splice(0);
          this.uniqueID = 0;
          this.updateViews('removeItems', 0, v2);
        };

        v2.contains = function (itmToCheck) {
          if (this.isObjectEmpty(itmToCheck)) {
            return false;
          }
          var v5;
          var v4;
          var v2 = 0;
          while (v2 < (this.__get__items()).length) {
            v5 = (this.__get__items())[v2];
            v4 = true;
            for (var v6 in itmToCheck) {
              if (itmToCheck[v6] != v5[v6]) {
                v4 = false;
                break;
              }
            }
                        if (v4) {
              return true;
            }
            ++v2;
          }
          return false;
        };

        v2.getColumnNames = function () {
          return this.mTitles;
        };

        v2.__get__columnNames = function () {
          return this.getColumnNames();
        };

        v2.getLocalLength = function () {
          return (this.__get__items()).length;
        };

        v2.getLength = function () {
          if (this.mRecordSetID != null) {
            return this.mTotalCount;
          } else {
            return (this.__get__items()).length;
          }
        };

        v2.getIterator = function () {
          var v2 = new mx.remoting.RecordSetIterator(this);
          return v2;
        };

        v2.__get__length = function () {
          return this.getLength();
        };

        v2.getItemAt = function (index) {
          if (index < 0 || index >= this.__get__length()) {
            return null;
          }
          if (this.mRecordSetID == null) {
            return (this.__get__items())[index];
          }
          this.requestRecord(index);
          var v3 = (this.__get__items())[index];
          if (v3 == 1) {
            return 'in progress';
          }
          return v3;
        };

        v2.getItemID = function (index) {
          return (this.__get__items())[index].__ID__;
        };

        v2.__get__items = function () {
          return this._items;
        };

        v2.initialize = function (info) {};

        v2.filter = function (filterFunction, context) {
          if (this.checkLocal()) {
            return undefined;
          }
          var v4 = new mx.remoting.RecordSet(this.mTitles);
          var v5 = this.__get__length();
          var v3 = 0;
          while (v3 < v5) {
            var v2 = this.getItemAt(v3);
            if (v2 != null && v2 != 1 && filterFunction(v2, context)) {
              v4.addItem(v2);
            }
            ++v3;
          }
          return v4;
        };

        v2.sortItems = function (compareFunc, optionFlags) {
          if (this.checkLocal()) {
            return undefined;
          }
          (this.__get__items()).sort(compareFunc, optionFlags);
          this.updateViews('sort');
        };

        v2.sortItemsBy = function (fieldNames, order, optionFlags) {
          if (this.checkLocal()) {
            return undefined;
          }
          if (typeof order == 'string') {
            (this.__get__items()).sortOn(fieldNames);
            if (order.toUpperCase() == 'DESC') {
              (this.__get__items()).reverse();
            }
          } else {
            (this.__get__items()).sortOn(fieldNames, optionFlags);
          }
          this.updateViews('sort');
        };

        v2.sort = function (compareFunc) {
          if (this.checkLocal()) {
            return undefined;
          }
          (this.__get__items()).sort(compareFunc);
          this.updateViews('sort');
        };

        v2.isEmpty = function () {
          return (this.__get__items()).length == 0;
        };

        v2.isLocal = function () {
          return this.mRecordSetID == null;
        };

        v2.isFullyPopulated = function () {
          return this.isLocal();
        };

        v2.getRemoteLength = function () {
          if (this.isLocal()) {
            return this.mRecordsAvailable;
          } else {
            return this.mTotalCount;
          }
        };

        v2.getNumberAvailable = function () {
          if (this.isLocal()) {
            return this.getLength();
          } else {
            return this.mRecordsAvailable;
          }
        };

        v2.replaceItemAt = function (index, item) {
          if (index >= 0 && index <= this.__get__length()) {
            var v3 = this.getItemID(index);
            (this.__get__items())[index] = item;
            (this.__get__items())[index].__ID__ = v3;
            this.updateViews('updateItems', index, index);
          }
        };

        v2.removeAll = function () {
          this.clear();
        };

        v2.removeItemAt = function (index) {
          var v3 = this._items[index];
          this._items.splice(index, 1);
          var v5 = [this._items[index]];
          var v4 = [this.getItemID(index)];
          this.dispatchEvent({'type': 'modelChanged', 'eventName': 'removeItems', 'firstItem': index, 'lastItem': index, 'removedItems': v5, 'removedIDs': v4});
          return v3;
        };

        v2.removeEventListener = function (event, listener) {};

        v2.requestRange = function (range) {
          var v2 = range.getStart();
          var v3 = range.getEnd();
          return this.internalRequestRange(v2, v3);
        };

        v2.setDeliveryMode = function (mode, pagesize, numPrefetchPages) {
          this.mDeliveryMode = mode.toLowerCase();
          this.stopFetchAll();
          if (pagesize == null || pagesize <= 0) {
            pagesize = 25;
          }
          switch (this.mDeliveryMode) {
              break;
            case 'ondemand':
            case 'page':
              if (numPrefetchPages == null) {
                numPrefetchPages = 0;
              }
              this.mPageSize = pagesize;
              this.mNumPrefetchPages = numPrefetchPages;
              break;
            case 'fetchall':
              this.stopFetchAll();
              this.startFetchAll(pagesize);
              break;
            default:
              mx.remoting.NetServices.trace('RecordSet', 'warning', 107, 'SetDeliveryMode: unknown mode string');
          }
        };

        v2.editField = function (index, fieldName, value) {
          this.changeFieldValue(index, fieldName, value);
        };

        v2.getEditingData = function (index, fieldName) {
          return (this.__get__items())[index][fieldName];
        };

        v2.setField = function (index, fieldName, value) {
          this.changeFieldValue(index, fieldName, value);
        };

        v2.changeFieldValue = function (index, fieldName, value) {
          if (this.checkLocal()) {
            return undefined;
          }
          if (index < 0 || index >= this.getLength()) {
            return undefined;
          }
          (this.__get__items())[index][fieldName] = value;
          this.updateViews('updateItems', index, index);
        };

        v2.isObjectEmpty = function (objToCheck) {
          var v1 = true;
          for (var v3 in objToCheck) {
            v1 = false;
                        return v1;
          }
          return v1;
        };

        v2.arrayToObject = function (anArray) {
          if (this.mTitles == null) {
            mx.remoting.NetServices.trace('RecordSet', 'warning', 105, 'getItem: titles are not available');
            return null;
          }
          var v4 = new Object();
          var v5 = anArray.length;
          var v3;
          var v2 = 0;
          while (v2 < v5) {
            v3 = this.mTitles[v2];
            if (v3 == null) {
              v3 = 'column' + v2 + 1;
            }
            v4[v3] = anArray[v2];
            ++v2;
          }
          return v4;
        };

        v2.checkLocal = function () {
          if (this.isLocal()) {
            return false;
          } else {
            mx.remoting.NetServices.trace('RecordSet', 'warning', 108, 'Operation not allowed on partial recordset');
            return true;
          }
        };

        v2.getRecordSetService = function () {
          if (this.mRecordSetService == null) {
            if (this.gateway_conn == null) {
              this.gateway_conn = mx.remoting.NetServices.createGatewayConnection();
            } else {
              if (_global.netDebugInstance != undefined) {
                this.gateway_conn = this.gateway_conn.clone();
              }
            }
            if (_global.netDebugInstance != undefined) {
              this.gateway_conn.setupRecordSet();
              this.gateway_conn.setDebugId('RecordSet ' + this.mRecordSetID);
            }
            this.mRecordSetService = this.gateway_conn.getService(this.serviceName, this);
            if (this.mRecordSetService == null) {
              mx.remoting.NetServices.trace('RecordSet', 'warning', 101, 'Failed to create RecordSet service');
              this.mRecordSetService = null;
            }
          }
          return this.mRecordSetService;
        };

        v2.internalRequestRange = function (index, lastIndex) {
          var v6 = -1;
          if (index < 0) {
            index = 0;
          }
          if (lastIndex >= this.getRemoteLength()) {
            lastIndex = this.getRemoteLength() - 1;
          }
          var v3;
          var v4;
          while (index <= lastIndex) {
            for (;;) {
              if (!(index <= lastIndex && (this.__get__items())[index] != null)) break;
              ++index;
            }
            v3 = index;
            for (;;) {
              if (!(index <= lastIndex && (this.__get__items())[index] == null)) break;
              ++this.mOutstandingRecordCount;
              (this.__get__items())[index] = 1;
              ++index;
            }
            v4 = index - 1;
            if (v3 <= v4) {
              this.logger.logInfo(' Fetching records from index [' + v3 + '] to index [' + v4 + ']');
              (this.getRecordSetService()).getRecords(this.mRecordSetID, v3 + 1, v4 - v3 + 1);
              v6 = v4;
              this.updateViews('fetchRows', v3, v4);
            }
          }
          return v6;
        };

        v2.removeItems = function (index, len) {
          var v3 = new Array();
          var v2 = 0;
          while (v2 < len) {
            v3.push(this.getItemID(index + v2));
            ++v2;
          }
          var v6 = (this.__get__items()).splice(index, len);
          this.dispatchEvent({'type': 'modelChanged', 'eventName': 'removeItems', 'firstItem': index, 'lastItem': index + len - 1, 'removedItems': v6, 'removedIDs': v3});
        };

        v2.getRecords_Result = function (info) {
          this.setData(info.Cursor - 1, info.Page);
          this.mOutstandingRecordCount -= info.Page.length;
          this.updateViews('updateItems', info.Cursor - 1, info.Cursor - 1 + info.Page.length - 1);
          if (this.mRecordsAvailable == this.mTotalCount && !this.mAllNotified) {
            this.updateViews('allRows');
            this.mRecordSetService.release();
            this.mAllNotified = true;
            this.mRecordSetID = null;
            this.mRecordSetService = null;
          }
        };

        v2.release_Result = function () {};

        v2.requestOneRecord = function (index) {
          if ((this.__get__items())[index] == null) {
            if (this.mDeliveryMode == 'ondemand') {
              this.logger.logInfo(' INFO: Fetching Record [' + index + ']');
            }
            (this.getRecordSetService()).getRecords(this.mRecordSetID, index + 1, 1);
            ++this.mOutstandingRecordCount;
            (this.__get__items())[index] = 1;
            this.updateViews('fetchRows', index, index);
          }
        };

        v2.requestRecord = function (index) {
          if (this.mDeliveryMode != 'page') {
            this.requestOneRecord(index);
          } else {
            var v2 = int(index / this.mPageSize) * this.mPageSize;
            var v3 = v2 + this.mPageSize * (this.mNumPrefetchPages + 1) - 1;
            this.internalRequestRange(v2, v3);
          }
        };

        v2._setParentService = function (service) {
          this.gateway_conn = service.nc;
        };

        v2.setData = function (start, dataArray) {
          var v5 = dataArray.length;
          var v3;
          var v4;
          var v2 = 0;
          while (v2 < v5) {
            v3 = v2 + start;
            v4 = (this.__get__items())[v3];
            if (v4 != null && v4 != 1) {
              mx.remoting.NetServices.trace('RecordSet', 'warning', 106, 'Already got record # ' + v3);
            } else {
              this.mRecordsAvailable += 1;
            }
            (this.__get__items())[v3] = this.arrayToObject(dataArray[v2]);
            (this.__get__items())[v3].__ID__ = this.uniqueID++;
            ++v2;
          }
        };

        v2.startFetchAll = function (pagesize) {
          if (this.mDataFetcher != null) {
            this.mDataFetcher.disable();
          }
          this.mDataFetcher = new mx.remoting.RsDataFetcher(this, pagesize);
        };

        v2.stopFetchAll = function () {
          this.mDataFetcher.disable();
          this.mDataFetcher = null;
        };

        v2.updateViews = function (event, first, last) {
          this.dispatchEvent({'type': 'modelChanged', 'eventName': event, 'firstItem': first, 'lastItem': last});
        };

        v1.registerRecordSet = function () {
          Object.registerClass('RecordSet', mx.remoting.RecordSet);
          return true;
        };

        v1.version = '1.2.0.124';
        v1.init = mx.remoting.RecordSet.registerRecordSet();
        v2.addProperty('columnNames', v2.__get__columnNames, function () {});
        v2.addProperty('items', v2.__get__items, function () {});
        v2.addProperty('length', v2.__get__length, function () {});
        ASSetPropFlags(mx.remoting.RecordSet.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 318 __Packages.mx.remoting.NetServices {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.NetServices) {
        var v1 = function () {
          super();
        };

        mx.remoting.NetServices = v1;
        mx.remoting.NetServices extends Object;
        var v2 = v1.prototype;
        v1.setDefaultGatewayUrl = function (url) {
          mx.remoting.NetServices.defaultGatewayUrl = url;
        };

        v1.setGatewayUrl = function (url) {
          mx.remoting.NetServices.gatewayUrl = url;
        };

        v1.createGatewayConnection = function (url, infoLogger) {
          mx.remoting.NetServices.logger = infoLogger;
          if (url == undefined) {
            url = mx.remoting.NetServices.gatewayUrl;
            if (url == undefined) {
              url = mx.remoting.NetServices.defaultGatewayUrl;
            }
          }
          if (url == undefined) {
            mx.remoting.NetServices.trace('NetServices', 'warning', 4, 'createGatewayConnection - gatewayUrl is undefined');
            mx.remoting.NetServices.logger.logInfo('NetServices: createGatewayConnection - gateway url <' + url + '> is undefined', mx.services.Log.DEBUG);
            return null;
          }
          var v2 = new mx.remoting.Connection();
          v2.connect(url);
          mx.remoting.NetServices.__sharedConnections[url] = v2;
          return v2;
        };

        v1.getConnection = function (uri) {
          return mx.remoting.NetServices.__sharedConnections[uri];
        };

        v1.getHostUrl = function () {
          if (!mx.remoting.NetServices.isHttpUrl(_root._url)) {
            mx.remoting.NetServices.trace('NetServices', 'warning', 4, 'createGatewayConnection - gatewayUrl is invalid');
            return null;
          }
          var v2 = _root._url.indexOf('/', 8);
          if (v2 < 0) {
            mx.remoting.NetServices.trace('NetServices', 'warning', 4, 'createGatewayConnection - gatewayUrl is invalid');
            return null;
          }
          return _root._url.substring(0, v2);
        };

        v1.isHttpUrl = function (url) {
          return url.indexOf('http://') == 0 || url.indexOf('https://') == 0;
        };

        v1.getHttpUrl = function (url) {
          if (!mx.remoting.NetServices.isHttpUrl(url)) {
            url = mx.remoting.NetServices.getHostUrl() + url;
          }
          return url;
        };

        v1.trace = function (who, severity, number, message) {
          mx.remoting.NetServices.traceNetServices(who, severity, number, message);
        };

        v1.version = '1.2.0.124';
        v1.gatewayUrl = _root.gatewayUrl;
        v1.__sharedConnections = new Array();
        ASSetPropFlags(mx.remoting.NetServices.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 319 __Packages.mx.utils.Iterator {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.utils) {
        _global.mx.utils = new Object();
      }
      if (!_global.mx.utils.Iterator) {
        _global.mx.utils.Iterator = function () {};

      }
    #endinitclip
  }

  movieClip 320 __Packages.mx.remoting.RecordSetIterator {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.RecordSetIterator) {
        var v1 = function (rec) {
          this._recordSet = rec;
          this._cursor = 0;
        };

        mx.remoting.RecordSetIterator = v1;
        var v2 = v1.prototype;
        _global.mx.remoting.RecordSetIterator implements _global.mx.utils.Iterator;
        v2.hasNext = function () {
          return this._cursor < this._recordSet.getLength();
        };

        v2.next = function () {
          return this._recordSet.getItemAt(this._cursor++);
        };

        v1.version = '1.2.0.124';
        ASSetPropFlags(mx.remoting.RecordSetIterator.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 321 __Packages.mx.remoting.RsDataFetcher {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.RsDataFetcher) {
        var v1 = function (pgRS, increment) {
          super();
          this.mRecordSet = pgRS;
          this.mRecordSet.addEventListener('modelChanged', this);
          this.mIncrement = increment;
          this.mNextRecord = 0;
          this.mEnabled = true;
          this.doNext();
        };

        mx.remoting.RsDataFetcher = v1;
        mx.remoting.RsDataFetcher extends Object;
        var v2 = v1.prototype;
        v2.disable = function () {
          this.mEnabled = false;
        };

        v2.doNext = function () {
          if (this.mEnabled) {
            while (!false) {
              if (this.mNextRecord >= this.mRecordSet.getRemoteLength()) {
                return undefined;
              }
              var v2 = new mx.remoting.RsDataRange(this.mNextRecord, this.mNextRecord + this.mIncrement - 1);
              this.mHighestRequested = this.mRecordSet.requestRange(v2);
              this.mNextRecord += this.mIncrement;
              if (this.mHighestRequested > 0) {
                return undefined;
              }
            }
          }
        };

        v2.modelChanged = function (eventObj) {
          if (eventObj.eventName == 'updateItems' && eventObj.firstItem <= this.mHighestRequested && eventObj.lastItem >= this.mHighestRequested) {
            this.doNext();
          }
          if (eventObj.eventName == 'allRows') {
            this.disable();
          }
        };

        ASSetPropFlags(mx.remoting.RsDataFetcher.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 322 __Packages.mx.remoting.RsDataRange {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.RsDataRange) {
        var v1 = function (s, e) {
          super();
          this._start = s;
          this._end = e;
        };

        mx.remoting.RsDataRange = v1;
        mx.remoting.RsDataRange extends Object;
        var v2 = v1.prototype;
        _global.mx.remoting.RsDataRange implements _global.mx.data.DataRange;
        v2.getStart = function () {
          return this._start;
        };

        v2.getEnd = function () {
          return this._end;
        };

        v2.setEnd = function (e) {
          this._end = e;
        };

        v2.setStart = function (s) {
          this._start = s;
        };

        ASSetPropFlags(mx.remoting.RsDataRange.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 323 __Packages.mx.rpc.Responder {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.rpc) {
        _global.mx.rpc = new Object();
      }
      if (!_global.mx.rpc.Responder) {
        _global.mx.rpc.Responder = function () {};

      }
    #endinitclip
  }

  movieClip 324 __Packages.mx.rpc.ResultEvent {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.rpc) {
        _global.mx.rpc = new Object();
      }
      if (!_global.mx.rpc.ResultEvent) {
        var v1 = function (res) {
          super();
          this.__result = res;
        };

        mx.rpc.ResultEvent = v1;
        mx.rpc.ResultEvent extends Object;
        var v2 = v1.prototype;
        v2.__get__result = function () {
          return this.__result;
        };

        v2.addProperty('result', v2.__get__result, function () {});
        ASSetPropFlags(mx.rpc.ResultEvent.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 325 __Packages.mx.rpc.FaultEvent {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.rpc) {
        _global.mx.rpc = new Object();
      }
      if (!_global.mx.rpc.FaultEvent) {
        var v1 = function (f) {
          super();
          this.__fault = f;
        };

        mx.rpc.FaultEvent = v1;
        mx.rpc.FaultEvent extends Object;
        var v2 = v1.prototype;
        v2.__get__fault = function () {
          return this.__fault;
        };

        v2.addProperty('fault', v2.__get__fault, function () {});
        ASSetPropFlags(mx.rpc.FaultEvent.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 326 __Packages.mx.rpc.Fault {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.rpc) {
        _global.mx.rpc = new Object();
      }
      if (!_global.mx.rpc.Fault) {
        var v1 = function (code, msg, detail, type) {
          super();
          this.__faultcode = code;
          this.__faultstring = msg;
          this.__detail = detail;
          this.__type = type;
        };

        mx.rpc.Fault = v1;
        mx.rpc.Fault extends Object;
        var v2 = v1.prototype;
        v2.__get__faultcode = function () {
          return this.__faultcode;
        };

        v2.__get__faultstring = function () {
          return this.__faultstring;
        };

        v2.__get__detail = function () {
          return this.__detail;
        };

        v2.__get__description = function () {
          if (this.__description == null) {
            if (this.__faultstring.indexOf(':') > -1) {
              this.__description = this.__faultstring.substring(this.__faultstring.indexOf(':') + 1);
              var v2 = 0;
              while (this.__description.indexOf(' ', v2) == v2) {
                ++v2;
              }
              if (v2 > 0) {
                this.__description = this.__description.substring(v2);
              }
              return this.__description;
            }
            this.__description = this.__faultstring;
          }
          return this.__description;
        };

        v2.__get__type = function () {
          return this.__type;
        };

        v2.addProperty('description', v2.__get__description, function () {});
        v2.addProperty('detail', v2.__get__detail, function () {});
        v2.addProperty('faultcode', v2.__get__faultcode, function () {});
        v2.addProperty('faultstring', v2.__get__faultstring, function () {});
        v2.addProperty('type', v2.__get__type, function () {});
        ASSetPropFlags(mx.rpc.Fault.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 327 __Packages.mx.remoting.Operation {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.Operation) {
        var v1 = function (methodName, parent) {
          this.__service = parent;
          this.__responder = parent.responder;
          this.__methodName = methodName;
          this.__invokationName = this.__service.__get__name() + '.' + methodName;
          this.__request = new Object();
          this.__arguments = new Array();
        };

        mx.remoting.Operation = v1;
        var v2 = v1.prototype;
        v2.createThenSend = function (Void) {
          this.createArguments();
          return this.send();
        };

        v2.send = function (Void) {
          this.__service.log.logInfo('Invoking ' + this.__methodName + ' on ' + this.__service.__get__name());
          var v3 = new mx.remoting.PendingCall(this.__service, this.__methodName);
          v3.__set__responder(this.__responder);
          var v2 = null;
          if (this.__arguments == null) {
            v2 = new Array();
            this.__invokationName = this.__service.__get__name() + '.' + this.__methodName;
            v2.unshift(this.__invokationName, v3);
            (this.__service.__get__connection()).call.apply(this.__service.__get__connection(), v2);
            return v3;
          }
          v2 = this.__arguments.concat();
          this.__invokationName = this.__service.__get__name() + '.' + this.__methodName;
          v2.unshift(this.__invokationName, v3);
          (this.__service.__get__connection()).call.apply(this.__service.__get__connection(), v2);
          return v3;
        };

        v2.invoke = function (a) {
          this.__arguments = a;
        };

        v2.__get__responder = function () {
          return this.__responder;
        };

        v2.__set__responder = function (r) {
          this.__responder = r;
          return this.__get__responder();
        };

        v2.__get__request = function () {
          return this.__request;
        };

        v2.__set__request = function (r) {
          this.__request = r;
          return this.__get__request();
        };

        v2.__get__name = function () {
          return this.__methodName;
        };

        v2.createArguments = function () {
          if (this.__request != null) {
            this.__arguments = new Array();
            for (var v2 in this.__request) {
              if (v2 != 'arguments') {
                this.__arguments.unshift(this.__request[v2]);
              }
            }
          }
        };

        v2.addProperty('name', v2.__get__name, function () {});
        v2.addProperty('request', v2.__get__request, v2.__set__request);
        v2.addProperty('responder', v2.__get__responder, v2.__set__responder);
        ASSetPropFlags(mx.remoting.Operation.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 328 __Packages.mx.remoting.PendingCall {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.remoting) {
        _global.mx.remoting = new Object();
      }
      if (!_global.mx.remoting.PendingCall) {
        var v1 = function (srv, methodName) {
          super();
          this.__service = srv;
          this.__methodName = methodName;
        };

        mx.remoting.PendingCall = v1;
        mx.remoting.PendingCall extends Object;
        var v2 = v1.prototype;
        v2.__get__responder = function () {
          return this.__responder;
        };

        v2.__set__responder = function (res) {
          this.__responder = res;
          return this.__get__responder();
        };

        v2.onResult = function (result) {
          result.serviceName = result.serviceName;
          if (result != null) {
            if (result instanceof mx.remoting.NetServiceProxy) {
              var v4 = new mx.remoting.Service(null, null, result.serviceName, this.__service.__get__connection(), this.__service.__get__responder());
              result = v4;
            } else {
              if (result instanceof mx.remoting.RecordSet) {
                var v3 = new mx.remoting.NetServiceProxy(this.__service.__get__connection());
                result._setParentService(v3);
                result.logger = this.__service.log;
              }
            }
          }
          if (this.__responder != null) {
            this.__responder.onResult(new mx.rpc.ResultEvent(result));
          }
          if (this.__service.log != null) {
            this.__service.log.logInfo(this.__service.__get__name() + '.' + this.__methodName + '() returned ' + mx.data.binding.ObjectDumper.toString(result));
          }
        };

        v2.onStatus = function (status) {
          if (this.__responder != null) {
            this.__responder.onFault(new mx.rpc.FaultEvent(new mx.rpc.Fault(status.code, status.description, status.details, status.type)));
          }
          if (this.__service.log != null) {
            this.__service.log.logDebug('Service invocation failed.');
            this.__service.log.logDebug(this.__service.__get__name() + '.' + this.__methodName + '() returned ' + mx.data.binding.ObjectDumper.toString(status));
          }
        };

        v2.__get__methodName = function () {
          return this.__methodName;
        };

        v1.inited = mx.remoting.NetServiceProxy.registerNetServiceProxy();
        v2.addProperty('methodName', v2.__get__methodName, function () {});
        v2.addProperty('responder', v2.__get__responder, v2.__set__responder);
        ASSetPropFlags(mx.remoting.PendingCall.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 329 __Packages.net.typoflash.datahandling.MD5 {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.datahandling) {
        _global.net.typoflash.datahandling = new Object();
      }
      if (!_global.net.typoflash.datahandling.MD5) {
        var v1 = function (s) {
          if (s.length > 0) {
            this.str = s;
          } else {
            this.str = '';
          }
          this.enc = this.MD5_encrypt();
        };

        net.typoflash.datahandling.MD5 = v1;
        var v2 = v1.prototype;
        v2.encrypt = function (s) {
          this.str = s;
          this.enc = this.MD5_encrypt();
          return this.enc;
        };

        v2.setString = function (s) {
          this.str = s;
          this.enc = this.MD5_encrypt();
        };

        v2.encrypted = function () {
          return this.enc;
        };

        v2.original = function () {
          return this.str;
        };

        v2.bitAND = function (a, b) {
          if (a < 0 && b < 0) {
            var v3 = a & 1 & (b & 1);
            var v4 = a >>> 1 & b >>> 1;
            return v4 << 1 | v3;
          } else {
            return a & b;
          }
        };

        v2.rhex = function (num) {
          var v4 = '';
          var v2 = 0;
          while (v2 <= 3) {
            v4 += this.HEX_CHARS.charAt(this.bitAND(num >> v2 * 8 + 4, 15)) + this.HEX_CHARS.charAt(this.bitAND(num >> v2 * 8, 15));
            ++v2;
          }
          return v4;
        };

        v2.str2blks_MD5 = function (str) {
          var v4 = (this.str.length + 8 >> 6) + 1;
          var v3 = new Array(v4 * 16);
          var v2 = 0;
          while (v2 < v4 * 16) {
            v3[v2] = 0;
            ++v2;
          }
          v2 = 0;
          while (v2 < this.str.length) {
            v3[v2 >> 2] |= this.str.charCodeAt(v2) << (v2 % 4) * 8;
            ++v2;
          }
          v3[v2 >> 2] |= 128 << (v2 % 4) * 8;
          v3[v4 * 16 - 2] = this.str.length * 8;
          return v3;
        };

        v2.addme = function (x, y) {
          var v2 = this.bitAND(x, 65535) + this.bitAND(y, 65535);
          var v3 = (x >> 16) + (y >> 16) + (v2 >> 16);
          return v3 << 16 | this.bitAND(v2, 65535);
        };

        v2.rol = function (num, cnt) {
          return num << cnt | num >>> 32 - cnt;
        };

        v2.cmn = function (q, a, b, x, s, t) {
          return this.addme(this.rol(this.addme(this.addme(a, q), this.addme(x, t)), s), b);
        };

        v2.ff = function (a, b, c, d, x, s, t) {
          return this.cmn(this.bitAND(b, c) | this.bitAND(~b, d), a, b, x, s, t);
        };

        v2.gg = function (a, b, c, d, x, s, t) {
          return this.cmn(this.bitAND(b, d) | this.bitAND(c, ~d), a, b, x, s, t);
        };

        v2.hh = function (a, b, c, d, x, s, t) {
          return this.cmn(b ^ c ^ d, a, b, x, s, t);
        };

        v2.ii = function (a, b, c, d, x, s, t) {
          return this.cmn(c ^ (b | ~d), a, b, x, s, t);
        };

        v2.MD5_encrypt = function () {
          var v7 = this.str2blks_MD5(this.str);
          var v5 = 1732584193;
          var v4 = -271733879;
          var v3 = -1732584194;
          var v2 = 271733878;
          var v6 = 0;
          while (v6 < v7.length) {
            var v11 = v5;
            var v10 = v4;
            var v9 = v3;
            var v8 = v2;
            v5 = this.ff(v5, v4, v3, v2, v7[v6 + 0], 7, -680876936);
            v2 = this.ff(v2, v5, v4, v3, v7[v6 + 1], 12, -389564586);
            v3 = this.ff(v3, v2, v5, v4, v7[v6 + 2], 17, 606105819);
            v4 = this.ff(v4, v3, v2, v5, v7[v6 + 3], 22, -1044525330);
            v5 = this.ff(v5, v4, v3, v2, v7[v6 + 4], 7, -176418897);
            v2 = this.ff(v2, v5, v4, v3, v7[v6 + 5], 12, 1200080426);
            v3 = this.ff(v3, v2, v5, v4, v7[v6 + 6], 17, -1473231341);
            v4 = this.ff(v4, v3, v2, v5, v7[v6 + 7], 22, -45705983);
            v5 = this.ff(v5, v4, v3, v2, v7[v6 + 8], 7, 1770035416);
            v2 = this.ff(v2, v5, v4, v3, v7[v6 + 9], 12, -1958414417);
            v3 = this.ff(v3, v2, v5, v4, v7[v6 + 10], 17, -42063);
            v4 = this.ff(v4, v3, v2, v5, v7[v6 + 11], 22, -1990404162);
            v5 = this.ff(v5, v4, v3, v2, v7[v6 + 12], 7, 1804603682);
            v2 = this.ff(v2, v5, v4, v3, v7[v6 + 13], 12, -40341101);
            v3 = this.ff(v3, v2, v5, v4, v7[v6 + 14], 17, -1502002290);
            v4 = this.ff(v4, v3, v2, v5, v7[v6 + 15], 22, 1236535329);
            v5 = this.gg(v5, v4, v3, v2, v7[v6 + 1], 5, -165796510);
            v2 = this.gg(v2, v5, v4, v3, v7[v6 + 6], 9, -1069501632);
            v3 = this.gg(v3, v2, v5, v4, v7[v6 + 11], 14, 643717713);
            v4 = this.gg(v4, v3, v2, v5, v7[v6 + 0], 20, -373897302);
            v5 = this.gg(v5, v4, v3, v2, v7[v6 + 5], 5, -701558691);
            v2 = this.gg(v2, v5, v4, v3, v7[v6 + 10], 9, 38016083);
            v3 = this.gg(v3, v2, v5, v4, v7[v6 + 15], 14, -660478335);
            v4 = this.gg(v4, v3, v2, v5, v7[v6 + 4], 20, -405537848);
            v5 = this.gg(v5, v4, v3, v2, v7[v6 + 9], 5, 568446438);
            v2 = this.gg(v2, v5, v4, v3, v7[v6 + 14], 9, -1019803690);
            v3 = this.gg(v3, v2, v5, v4, v7[v6 + 3], 14, -187363961);
            v4 = this.gg(v4, v3, v2, v5, v7[v6 + 8], 20, 1163531501);
            v5 = this.gg(v5, v4, v3, v2, v7[v6 + 13], 5, -1444681467);
            v2 = this.gg(v2, v5, v4, v3, v7[v6 + 2], 9, -51403784);
            v3 = this.gg(v3, v2, v5, v4, v7[v6 + 7], 14, 1735328473);
            v4 = this.gg(v4, v3, v2, v5, v7[v6 + 12], 20, -1926607734);
            v5 = this.hh(v5, v4, v3, v2, v7[v6 + 5], 4, -378558);
            v2 = this.hh(v2, v5, v4, v3, v7[v6 + 8], 11, -2022574463);
            v3 = this.hh(v3, v2, v5, v4, v7[v6 + 11], 16, 1839030562);
            v4 = this.hh(v4, v3, v2, v5, v7[v6 + 14], 23, -35309556);
            v5 = this.hh(v5, v4, v3, v2, v7[v6 + 1], 4, -1530992060);
            v2 = this.hh(v2, v5, v4, v3, v7[v6 + 4], 11, 1272893353);
            v3 = this.hh(v3, v2, v5, v4, v7[v6 + 7], 16, -155497632);
            v4 = this.hh(v4, v3, v2, v5, v7[v6 + 10], 23, -1094730640);
            v5 = this.hh(v5, v4, v3, v2, v7[v6 + 13], 4, 681279174);
            v2 = this.hh(v2, v5, v4, v3, v7[v6 + 0], 11, -358537222);
            v3 = this.hh(v3, v2, v5, v4, v7[v6 + 3], 16, -722521979);
            v4 = this.hh(v4, v3, v2, v5, v7[v6 + 6], 23, 76029189);
            v5 = this.hh(v5, v4, v3, v2, v7[v6 + 9], 4, -640364487);
            v2 = this.hh(v2, v5, v4, v3, v7[v6 + 12], 11, -421815835);
            v3 = this.hh(v3, v2, v5, v4, v7[v6 + 15], 16, 530742520);
            v4 = this.hh(v4, v3, v2, v5, v7[v6 + 2], 23, -995338651);
            v5 = this.ii(v5, v4, v3, v2, v7[v6 + 0], 6, -198630844);
            v2 = this.ii(v2, v5, v4, v3, v7[v6 + 7], 10, 1126891415);
            v3 = this.ii(v3, v2, v5, v4, v7[v6 + 14], 15, -1416354905);
            v4 = this.ii(v4, v3, v2, v5, v7[v6 + 5], 21, -57434055);
            v5 = this.ii(v5, v4, v3, v2, v7[v6 + 12], 6, 1700485571);
            v2 = this.ii(v2, v5, v4, v3, v7[v6 + 3], 10, -1894986606);
            v3 = this.ii(v3, v2, v5, v4, v7[v6 + 10], 15, -1051523);
            v4 = this.ii(v4, v3, v2, v5, v7[v6 + 1], 21, -2054922799);
            v5 = this.ii(v5, v4, v3, v2, v7[v6 + 8], 6, 1873313359);
            v2 = this.ii(v2, v5, v4, v3, v7[v6 + 15], 10, -30611744);
            v3 = this.ii(v3, v2, v5, v4, v7[v6 + 6], 15, -1560198380);
            v4 = this.ii(v4, v3, v2, v5, v7[v6 + 13], 21, 1309151649);
            v5 = this.ii(v5, v4, v3, v2, v7[v6 + 4], 6, -145523070);
            v2 = this.ii(v2, v5, v4, v3, v7[v6 + 11], 10, -1120210379);
            v3 = this.ii(v3, v2, v5, v4, v7[v6 + 2], 15, 718787259);
            v4 = this.ii(v4, v3, v2, v5, v7[v6 + 9], 21, -343485551);
            v5 = this.addme(v5, v11);
            v4 = this.addme(v4, v10);
            v3 = this.addme(v3, v9);
            v2 = this.addme(v2, v8);
            v6 += 16;
          }
          return this.rhex(v5) + this.rhex(v4) + this.rhex(v3) + this.rhex(v2);
        };

        v2.HEX_CHARS = '0123456789abcdef';
        ASSetPropFlags(net.typoflash.datahandling.MD5.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 330 __Packages.mx.rpc.RelayResponder {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.rpc) {
        _global.mx.rpc = new Object();
      }
      if (!_global.mx.rpc.RelayResponder) {
        var v1 = function (resp, resultFunc, faultFunc) {
          super();
          this.__obj = resp;
          this.__onFault = faultFunc;
          this.__onResult = resultFunc;
        };

        mx.rpc.RelayResponder = v1;
        mx.rpc.RelayResponder extends Object;
        var v2 = v1.prototype;
        _global.mx.rpc.RelayResponder implements _global.mx.rpc.Responder;
        v2.onFault = function (fault) {
          this.__obj[this.__onFault](fault);
        };

        v2.onResult = function (result) {
          this.__obj[this.__onResult](result);
        };

        ASSetPropFlags(mx.rpc.RelayResponder.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 331 __Packages.net.typoflash.editor.FileMenu {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.editor) {
        _global.net.typoflash.editor = new Object();
      }
      if (!_global.net.typoflash.editor.FileMenu) {
        var v1 = function () {
          super();
          _global.TF.EDITOR.addEventListener('onRegisterObject', this);
          _global.TF.EDITOR.addEventListener('onUnregisterObject', this);
          _global.TF.CORE_EVENTS.addEventListener('onDebugStatus', this);
        };

        net.typoflash.editor.FileMenu = v1;
        net.typoflash.editor.FileMenu extends MovieClip;
        var v2 = v1.prototype;
        v2.onRegisterObject = function (o) {
          var v3 = this.filemenu.dataProvider.array2xml(_global.TF.CONF.LIST);
          this.filemenu.dataProvider.replaceChildNodes('selectObject', v3);
        };

        v2.onUnregisterObject = function (o) {
          var v3 = this.filemenu.dataProvider.array2xml(_global.TF.CONF.LIST);
          this.filemenu.dataProvider.replaceChildNodes('selectObject', v3);
        };

        v2.onLoad = function () {
          this.filemenuItem = [];
          this.filemenuItem.push({'label': 'File', 'data': 'file', 'subdata': [{'label': 'New component', 'data': 'addComponent', 'separatorBefore': 'true'}, {'label': 'Save all settings...', 'data': 'saveSettings', 'separatorBefore': 'true', 'subdata': [{'label': 'for this page', 'data': 'globalStorePageData'}, {'label': 'for all pages', 'data': 'globalStoreTemplateData'}]}]});
          this.filemenuItem.push({'label': 'Edit', 'data': 'edit', 'subdata': [{'label': 'Revert all', 'data': 'globalRevert'}, {'label': 'Send to centre', 'data': 'sendToCentre'}, {'label': 'Clear cache', 'data': 'clearCache', 'separatorBefore': 'true'}]});
          this.filemenuItem.push({'label': 'View', 'data': 'view', 'subdata': [{'label': 'Template', 'data': 'Template', 'type': 'tick', 'func': 'toggleVisible', 'selected': this.trueIfNotSetFalse(_global.TF.COOKIE.data.TFTemplateEditable)}, {'label': 'Frames', 'data': 'Frame', 'type': 'tick', 'func': 'toggleVisible', 'selected': this.trueIfNotSetFalse(_global.TF.COOKIE.data.TFFrameEditable)}, {'label': 'Menus', 'data': 'Menu', 'type': 'tick', 'func': 'toggleVisible', 'selected': this.trueIfNotSetFalse(_global.TF.COOKIE.data.TFMenuEditable)}, {'label': 'MovieClips', 'data': 'MC', 'type': 'tick', 'func': 'toggleVisible', 'selected': this.trueIfNotSetFalse(_global.TF.COOKIE.data.TFMCEditable)}, {'label': 'Components', 'data': 'Component', 'type': 'tick', 'func': 'toggleVisible', 'selected': this.trueIfNotSetFalse(_global.TF.COOKIE.data.TFComponentEditable)}, {'label': 'Open html version', 'data': 'gotoHtml', 'separatorBefore': 'true'}]});
          this.filemenuItem.push({'label': 'Select', 'data': 'selectObject', 'subdata': _global.TF.CONF.LIST});
          this.filemenuItem.push({'label': 'Tools', 'data': 'tools', 'subdata': [{'label': 'Go to Typo3 backend', 'data': 'gotoT3be'}, {'label': 'Debug', 'data': 'debug', 'separatorBefore': 'true', 'subdata': [{'label': 'Trace Motherload', 'data': 'traceMotherLoad'}, {'label': 'Trace Current Page', 'data': 'traceCurrentPage'}, {'label': 'Clear debug history', 'data': 'clearDebug'}]}]});
          this.filemenuItem.push({'label': 'Help', 'data': 'help', 'subdata': [{'label': 'Visit TypoFlash.net', 'data': 'gotoTypoflash', 'separatorBefore': 'true'}, {'label': 'Go to Typo3.org', 'data': 'gotoT3'}, {'label': 'About TypoFlash', 'data': 'about', 'separatorBefore': 'true'}]});
          this.knowledgeBase = new net.typoflash.base.MenuBase();
          this.knowledgeBase.mainSymbol = this.filemenu;
          this.knowledgeBase.rootPid = 'menu';
          this.knowledgeBase.onGetMenu = function (o) {
            if (o.data.menuId == this.menuId) {
              var v4 = this.mainSymbol.dataProvider.xml.getNodeBy('attributes.data', 'help');
              var v3 = this.mainSymbol.dataProvider.xml.getNodeBy('attributes.data', 'knowledgebase');
              v3.removeNode();
              var v2 = this.mainSymbol.array2xml(o.data);
              v2.firstChild.attributes.label = 'Knowledge base';
              v2.firstChild.attributes.data = 'knowledgebase';
              v4.appendChild(v2.firstChild);
            }
          };

          var v4 = {};
          v4.change = function (c) {
            if (typeof _global.TF.EDITOR[c.node.attributes.data] == 'function') {
              _global.TF.EDITOR[c.node.attributes.data]();
            } else {
              if (c.node.parentNode.attributes.data == 'selectObject') {
                _global.TF.EDITOR.loadEditor(c.node.attributes.data);
              } else {
                if (c.node.attributes.func == 'toggleVisible') {
                  _global.TF.EDITOR.toggleVisible(c.node.attributes.data, c.node.attributes.selected);
                } else {
                  if (typeof _global.TF.EDITOR['open' + c.node.attributes.label] == 'function' && String(c.node.attributes.selected) == 'true' && c.node.attributes.type == 'tick') {
                  } else {
                    if (typeof _global.TF.EDITOR['close' + c.node.attributes.label] == 'function' && String(c.node.attributes.selected) == 'false' && c.node.attributes.type == 'tick') {
                    } else {
                      if (c.node.attributes.uid > 0) {
                        this.knowledgeBase.onClick(c.node);
                      } else {
                        _global.TF.EDITOR.depthManager.alert('To do: ' + c.node.attributes.label);
                      }
                    }
                  }
                }
              }
            }
          };

          v4.knowledgeBase = this.knowledgeBase;
          this.filemenu.addEventListener('change', v4);
          this.filemenu.addEventListener('onDropdownRollOver', this);
          this.filemenu.addEventListener('onDropdownRollOut', this);
          this.filemenu.depthManager = _global.TF.EDITOR.depthManager;
          this.filemenu.showIcons = true;
          this.filemenu.iconInset = 16;
          this.filemenu.useDynamicFonts = false;
          this.filemenu.setDataProvider(this.filemenuItem);
        };

        v2.onDropdownRollOver = function (c) {
          if (c.node.parentNode.attributes.data == 'selectObject') {
            _global.TF.EDITOR.showBoundingBox(c.node.attributes.data);
          }
        };

        v2.onDropdownRollOut = function (c) {
          if (c.node.parentNode.attributes.data == 'selectObject') {
            _global.TF.EDITOR.hideBoundingBox(c.node.attributes.data);
          }
        };

        v2.trueIfNotSetFalse = function (s) {
          if (s != false && s != 'false') {
            return true;
          } else {
            return false;
          }
        };

        ASSetPropFlags(net.typoflash.editor.FileMenu.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 332 __Packages.net.typoflash.base.Configurable {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.base) {
        _global.net.typoflash.base = new Object();
      }
      if (!_global.net.typoflash.base.Configurable) {
        var v1 = function () {
          super();
          mx.events.EventDispatcher.initialize(this);
        };

        net.typoflash.base.Configurable = v1;
        net.typoflash.base.Configurable extends MovieClip;
        var v2 = v1.prototype;
        v2.onLoad = function () {
          if (_global.TF == null) {
            net.typoflash.utils.Debug.trace('TYPOFLASH global namespace is not set. Should be set in either core or template config.');
          }
          if (_global.TF.CONTENT_RENDERING == null) {
            _global.TF.CONTENT_RENDERING = net.typoflash.ContentRendering.global;
          }
          this._preGetPageListener = {};
          this._preGetPageListener.onGetPage = net.typoflash.utils.Proxy.create(this, this.preparseGetPage);
          _global.TF.CONTENT_RENDERING.addEventListener('onGetPage', this._preGetPageListener);
          _global.TF.CONTENT_RENDERING.addEventListener('onPageState', this);
          _global.TF.CONTENT_RENDERING.addEventListener('onGetMotherload', this);
          _global.TF.CONTENT_RENDERING.addEventListener('onClearCache', this);
          _global.TF.CORE_EVENTS.addEventListener('onSetPage', this);
          _global.TF.CORE_EVENTS.addEventListener('onFELoginStatus', this);
          this._width = Math.round(this._width);
          this._height = Math.round(this._height);
          this._x = Math.round(this._x);
          this._y = Math.round(this._y);
          this._yscale = 100;
          this._xscale = 100;
          this._TFtweenFunc = net.typoflash.utils.TweenFunc.easeInOutQuad;
          this._TFtweenTime = 0.7;
          this.stageLister = {};
          this.stageLister.root = this;
          this.stageLister.onResize = function () {
            this.root.onStageResize();
          };

          Stage.addListener(this.stageLister);
          this.onStageResize();
          if (_global.TF.CURR_PAGE_STATE_STR.length > 0 && _global.TF.CONTENT_RENDERING.pageState[_global.TF.PID] == null) {
            var v3 = {'type': 'onExtPageState', 'state': _global.TF.CURR_PAGE_STATE_STR};
            _global.TF.CORE_EVENTS.dispatchEvent(v3);
            _global.TF.CURR_PAGE_STATE_STR = null;
          }
          this._TFglue = new net.typoflash.Glue(this, this._tweenPhysicalProps);
          this._TFglue.__set__disablePhysicalConfig(this._disablePhysicalConfig);
          this._onLoad();
        };

        v2.toString = function () {
          return 'Configurable';
        };

        v2.preparseGetPage = function (o) {
          if (this._TFkey == null && this._TFeditorClass != 'Menu') {
            var v4 = new net.typoflash.datahandling.MD5();
            var v3 = v4.encrypt(String(this));
            this._TFkey = this._TFeditorClass + '_' + _global.TF.CONTENT_RENDERING.page.TEMPLATE.uid + '_' + _global.TF.CONTENT_RENDERING.page.TEMPLATE.template_pid + '_' + v3.substr(v3.length - 5, 5);
            this._TFglue.__set__key(this._TFkey);
          }
          this._TFglue.getPageData();
          this._TFglue.apply();
          if (this._TFeditorClass == null) {
            net.typoflash.utils.Debug.trace('Issue issue issue preparseGetPage called by undefined _TFeditorClass ' + this._TFkey + ' path: ' + this);
          }
          this.onGetPage(o);
        };

        v2.onData = function (o) {};

        v2.onUnload = function () {
          _global.TF.CONTENT_RENDERING.removeEventListener('onGetPage', this._preGetPageListener);
          _global.TF.CONTENT_RENDERING.removeEventListener('onPageState', this);
          _global.TF.CONTENT_RENDERING.removeEventListener('onGetMotherload', this);
          _global.TF.CONTENT_RENDERING.removeEventListener('onClearCache', this);
          _global.TF.CORE_EVENTS.removeEventListener('onSetPage', this);
          _global.TF.CORE_EVENTS.removeEventListener('onFELoginStatus', this);
          this._TFglue.unregister();
          delete this._TFglue;
        };

        v2.override = function (physicalProp, localProp) {
          this._TFglue.override(physicalProp, localProp);
        };

        v2.__get__glue = function () {
          return this._TFglue;
        };

        v2.__set__boundingBox = function (s) {
          this._TFglue.__set__boundingBox(s);
          return this.__get__boundingBox();
        };

        v2.__get__boundingBox = function () {
          return this._TFglue.__get__boundingBox();
        };

        v2.__set__tweenPhysicalProps = function (s) {
          this._tweenPhysicalProps = s;
          this._TFglue.__set__tween(this._tweenPhysicalProps);
          return this.__get__tweenPhysicalProps();
        };

        v2.__get__tweenPhysicalProps = function () {
          return this._tweenPhysicalProps;
        };

        v2.getLanguage = function (x, field) {
          if (x.lang[_global.TF.LANGUAGE][field] != null) {
            return x.lang[_global.TF.LANGUAGE][field];
          } else {
            if (x.lang[0][field] != null) {
              return x.lang[0][field];
            } else {
              return '';
            }
          }
        };

        v2._TFeditorClass = 'MC';
        v2._tweenPhysicalProps = true;
        v2._disablePhysicalConfig = false;
        v2.addProperty('boundingBox', v2.__get__boundingBox, v2.__set__boundingBox);
        v2.addProperty('glue', v2.__get__glue, function () {});
        v2.addProperty('tweenPhysicalProps', v2.__get__tweenPhysicalProps, v2.__set__tweenPhysicalProps);
        ASSetPropFlags(net.typoflash.base.Configurable.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 333 __Packages.net.typoflash.Glue {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.Glue) {
        var v1 = function (mc, useTween) {
          if (typeof mc != 'movieclip') {
            net.typoflash.utils.Debug.trace('net.typoflash.component needs a movieclip in the constructor function');
            return undefined;
          }
          this._TFmc = mc;
          mx.events.EventDispatcher.initialize(this);
          this._physicalProps = {'_x': '_x', '_y': '_y', '_width': '_width', '_height': '_height', '_rotation': '_rotation', '_alpha': '_alpha', '_yscale': '_yscale', '_xscale': '_xscale'};
          this._TForg = {};
          this._TFdata = {};
          if (useTween != null) {
            this.__set__tween(useTween);
          }
          this.addEventListener('onData', this._TFmc);
          this.addEventListener('onGetMedia', this._TFmc);
          this.addEventListener('onGetMediaFromCategory', this._TFmc);
          _global.TF.CONTENT_EDITING.addEventListener('onExternalEdit', this);
          _global.TF.CORE_EVENTS.addEventListener('onEnableGlue', this);
          this.storeOriginalPhysicalProps();
          if (this._TFmc._TFeditorClass == 'Component' || this._TFmc._TFeditorClass == null) {
            this._TFmc._TFeditorClass = 'Component';
            this.__set__editorClass('Component');
            this.getComponentdata();
            _global.TF.CONTENT_RENDERING.addEventListener('onClearCache', this);
            _global.TF.CONTENT_RENDERING.addEventListener('onParsePageData', this);
            if (this._TFkey == null) {
              this._TFdata._TFkey = this._TFeditorClass + '_' + _global.TF.CONTENT_RENDERING.page.TEMPLATE.uid + '_' + _global.TF.CONTENT_RENDERING.page.TEMPLATE.template_pid + '_' + this._TFdata.componentRecord.uid + '_' + this._TFdata.uid;
              this._TFmc._TFkey = this._TFdata._TFkey;
              this.__set__key(this._TFdata._TFkey);
            }
            this.getPageData();
            if (!this._tweenPhysicalProps) {
            }
          } else {
            this.__set__editorClass(this._TFmc._TFeditorClass);
          }
          if (this._TFmc.onUnload != null) {
            this._oldOnUnload = this._TFmc.onUnload;
          }
          this._TFmc.onUnload = net.typoflash.utils.Proxy.create(this, this.unregister);
          if (_global.TF.COOKIE.data['TF' + this.__get__editorClass() + 'Editable'] != false) {
            this.__set__enabled(true);
          } else {
            this.__set__enabled(false);
          }
          this.__set__boundingBox(this._TFmc);
        };

        net.typoflash.Glue = v1;
        var v2 = v1.prototype;
        v2.toString = function () {
          return 'Glue';
        };

        v2.getData = function () {
          return this._TFdata;
        };

        v2.__get__data = function () {
          return this._TFdata;
        };

        v2.__get__mc = function () {
          return this._TFmc;
        };

        v2.__set__pen = function (p) {
          this._TFpen = p;
          return this.__get__pen();
        };

        v2.__get__pen = function () {
          return this._TFpen;
        };

        v2.__set__editor = function (k) {
          this._TFeditor = k;
          return this.__get__editor();
        };

        v2.__get__editor = function () {
          return this._TFeditor;
        };

        v2.__set__confEditor = function (k) {
          this._TFmc.confEditor = k;
          return this.__get__confEditor();
        };

        v2.__get__confEditor = function () {
          return this._TFmc.confEditor();
        };

        v2.__set__frame = function (k) {
          this._TFframe = k;
          return this.__get__frame();
        };

        v2.__get__frame = function () {
          return this._TFframe;
        };

        v2.__set__boundingBox = function (k) {
          this._TFboundingBox = k;
          return this.__get__boundingBox();
        };

        v2.__get__boundingBox = function () {
          return this._TFboundingBox;
        };

        v2.__set__physicalProps = function (k) {
          this._physicalProps = k;
          return this.__get__physicalProps();
        };

        v2.__get__physicalProps = function () {
          return this._physicalProps;
        };

        v2.__set__editorClass = function (k) {
          (this.__get__mc())._TFeditorClass = k;
          this._TFeditorClass = (this.__get__mc())._TFeditorClass;
          return this.__get__editorClass();
        };

        v2.__get__editorClass = function () {
          if ((this.__get__mc())._TFeditorClass != null) {
            return (this.__get__mc())._TFeditorClass;
          } else {
            return this._TFeditorClass;
          }
        };

        v2.__set__listIndex = function (k) {
          this._TFlistIndex = k;
          return this.__get__listIndex();
        };

        v2.__get__listIndex = function () {
          return this._TFlistIndex;
        };

        v2.__set__editableFields = function (o) {
          var v4 = {};
          var v2 = 0;
          while (v2 < o.length) {
            if (this._allowedEditableFields[o[v2]] != 1) {
              net.typoflash.utils.Debug.trace('Glue error in editable fields. Field \'' + o[v2] + '\' not permitted.');
              delete o[v2];
            } else {
              v4[o[v2]] = true;
            }
            ++v2;
          }
          this._editableFields = v4;
          return this.__get__editableFields();
        };

        v2.__get__editableFields = function () {
          return this._editableFields;
        };

        v2.override = function (physicalProp, localProp) {
          if (this._physicalProps[physicalProp] != null && this._TFmc[localProp] != null) {
            this._physicalProps[physicalProp] = localProp;
            this._TForg[physicalProp] = this._TFmc[localProp];
          } else {}
        };

        v2.setProp = function (p, v) {
          this._TFmc[this._physicalProps[p]] = v;
        };

        v2.getProp = function (p) {
          return this._TFmc[this._physicalProps[p]];
        };

        v2.__set__disablePhysicalConfig = function (s) {
          this._disablePhysicalConfig = s;
          if (s) {
            this._physicalProps = {};
          } else {
            this._physicalProps = {'_x': '_x', '_y': '_y', '_width': '_width', '_height': '_height', '_rotation': '_rotation', '_xscale': '_xscale', '_yscale': '_yscale', '_alpha': '_alpha'};
          }
          return this.__get__disablePhysicalConfig();
        };

        v2.__get__disablePhysicalConfig = function () {
          return this._disablePhysicalConfig;
        };

        v2.__set__key = function (k) {
          if (_global.TF.CONF.ASSOCIATIVE_LIST[k] != null) {
            _global.TF.CONF.ASSOCIATIVE_LIST[k].unregister();
          }
          _global.TF.CONF.ASSOCIATIVE_LIST[k] = this;
          (this.__get__mc())._TFkey = k;
          this._TFkey = (this.__get__mc())._TFkey;
          _global.TF.EDITOR.registerObject(this);
          return this.__get__key();
        };

        v2.__get__key = function () {
          return this._TFkey;
        };

        v2.__set__enabled = function (k) {
          this._TFenabled = k;
          if (!k) {
            this._TFpen._alpha = 20;
            this._TFpen.bg.useHandCursor = false;
          } else {
            this._TFpen._alpha = 100;
            this._TFpen.bg.useHandCursor = true;
          }
          return this.__get__enabled();
        };

        v2.__get__enabled = function () {
          return this._TFenabled;
        };

        v2.onClearCache = function (o) {
          this._cacheCleared = true;
        };

        v2.onParsePageData = function (o) {
          if (this._externallyEdited) {
            this.refresh();
          }
          this._cacheCleared = false;
          this._externallyEdited = false;
        };

        v2.onGetMotherload = function (m) {
          if (this._externallyEdited) {
            this.refresh();
          }
          this._externallyEdited = false;
        };

        v2.onExternalEdit = function (o) {
          if (o.data == this._TFkey) {
            this._externallyEdited = true;
          }
        };

        v2.refresh = function () {
          if (this._TFmc._TFeditorClass == 'Component') {
            this.getComponentdata();
          }
          this.getPageData();
          this.apply();
          net.typoflash.utils.Debug.trace(this._TFkey + '  - refreshing');
        };

        v2.onEnableGlue = function (o) {
          if (o.data == this.__get__editorClass()) {
            this.__set__enabled(o.status);
          }
        };

        v2.storeOriginalPhysicalProps = function () {
          for (var v2 in this._physicalProps) {
            this._TForg[v2] = this._TFmc[this._physicalProps[v2]];
          }
        };

        v2.getComponentdata = function (mc) {
          if (mc == null) {
            mc = this._TFmc;
          }
          if (mc._parent._TFdata[mc._name] != null) {
            this._TFdata = mc._parent._TFdata[mc._name];
          } else {
            if (mc != _level0) {
              this.getComponentdata(mc._parent);
            } else {
              net.typoflash.utils.Debug.trace('Not _TFdata found for ' + this);
            }
          }
        };

        v2.getPageData = function () {
          var v3 = _global.TF.CONTENT_RENDERING.getData(this._TFkey);
          for (var v4 in v3) {
            this._TFdata[v4] = v3[v4];
          }
        };

        v2.apply = function () {
          if (this._TFkey == null) {
            net.typoflash.utils.Debug.trace('Why is the _TFkey empty for ' + this._TFmc);
            return undefined;
          }
          if (this._tweenPhysicalProps) {
            this._TFfin = {};
            this._TFcurr = {};
            var v3 = false;
            for (var v5 in this._physicalProps) {
              if (this._TFdata[v5] != null) {
                this._TFfin[v5] = this._TFdata[v5];
              } else {
                if (this._TForg[v5] != null) {
                  this._TFfin[v5] = this._TForg[v5];
                } else {
                  net.typoflash.utils.Debug.trace('Error no org value for ' + v5 + ' in ' + this._TFkey);
                }
              }
              this._TFcurr[v5] = this._TFmc[this._physicalProps[v5]];
              if (this._TFcurr[v5] != this._TFfin[v5]) {
                v3 = true;
              }
            }
            if (v3) {
              if (this._seqTw == null) {
                this._seqTw = new net.typoflash.utils.SequentialTween(this._TFmc);
                this._seqTw.onMotionChanged = net.typoflash.utils.Proxy.create(this, this.tweenPhysicalProps);
                this._seqTw.onMotionFinished = net.typoflash.utils.Proxy.create(this, this.tweenPhysicalPropsComplete);
              }
              this._seqTw.stop();
              this._seqTw.start();
            }
          } else {
            for (var v5 in this._physicalProps) {
              if (this._TFdata[v5] != null && this._TFmc[this._physicalProps[v5]] != this._TFdata[v5]) {
                this._TFmc[this._physicalProps[v5]] = this._TFdata[v5];
              } else {
                if (this._TForg[v5] != this._TFmc[this._physicalProps[v5]] && this._TFdata[v5] == null) {
                  this._TFmc[this._physicalProps[v5]] = this._TForg[v5];
                } else {}
              }
            }
          }
          if (this.getMediaFromCategory && (this.__get__data()).media_category != '') {
            var v4 = {};
            v4.media_category = (this.__get__data()).media_category;
            v4.returnTree = true;
            v4.callback = '_onGetMediaFromCategory';
            v4.menuId = this.key;
            _global.TF.CONTENT_RENDERING.removeEventListener(v4.callback, this);
            _global.TF.CONTENT_RENDERING.addEventListener(v4.callback, this);
            _global.TF.CONTENT_RENDERING.getMediaFromCategory(v4);
            if (this.__get__editor() != 'Component') {
              this.getMediaFromCategory = false;
            }
          }
          if (this.getMedia && (this.__get__data()).media != '') {
            v4 = {};
            v4.media = (this.__get__data()).media;
            v4.callback = '_onGetMedia';
            v4.menuId = this.key;
            _global.TF.CONTENT_RENDERING.removeEventListener(v4.callback, this);
            _global.TF.CONTENT_RENDERING.addEventListener(v4.callback, this);
            _global.TF.CONTENT_RENDERING.getMedia(v4);
            if (this.__get__editor() != 'Component') {
              this.getMedia = false;
            }
          }
          this._TFmc.TFdata = this._TFdata;
          var v6 = {};
          v6.type = 'onData';
          v6.target = this;
          v6.data = this._TFdata;
          this.dispatchEvent(v6);
        };

        v2.revert = function () {
          this.apply();
          (this.__get__pen()).bg.gotoAndStop('normal');
          (this.__get__editor()).close();
        };

        v2.storePageConf = function (o) {
          this.addToConfObject(o);
          this.storePageData();
        };

        v2.storeTemplateConf = function (o) {
          this.addToConfObject(o);
          this.storeTemplateData();
        };

        v2.addToConfObject = function (o) {
          if ((this.__get__data()).conf == null) {
            (this.__get__data()).conf = {};
          }
          for (var v3 in o) {
            (this.__get__data()).conf[v3] = o[v3];
          }
        };

        v2.storePageData = function (o) {
          if (o == null) {
            o = {};
          }
          if (!this.__get__disablePhysicalConfig()) {
            for (var v4 in this.__get__physicalProps()) {
              if (Math.abs(o[v4]) <= 0) {
                o[v4] = this.getProp(v4);
              }
            }
          }
          if ((this.__get__data()).conf != null) {
            o.conf = (this.__get__data()).conf;
          }
          _global.TF.CONTENT_EDITING.storePageData(this.__get__key(), o, _global.TF.PID);
        };

        v2.storeTemplateData = function (o) {
          if (o == null) {
            o = {};
          }
          if (!this.__get__disablePhysicalConfig()) {
            for (var v4 in this.__get__physicalProps()) {
              if (Math.abs(o[v4]) <= 0) {
                o[v4] = this.getProp(v4);
              }
            }
          }
          if ((this.__get__data()).conf != null) {
            o.conf = (this.__get__data()).conf;
          }
          _global.TF.CONTENT_EDITING.storePageData(this.__get__key(), o);
        };

        v2._onGetMediaFromCategory = function (o) {
          if (o.data.menuId != this.__get__key()) {
            return undefined;
          }
          net.typoflash.utils.Debug.trace('Glue onGetMediaFromCategory ' + this.__get__key() + ', cats: ' + (this.__get__data()).media_category);
          this._TFdata.mediaFromCategory = o.data.categories;
          this._TFdata.mediaCategoryFlatlist = o.data.flatlist;
          this._TFmc.TFdata = this._TFdata;
          o = {};
          o.type = 'onGetMediaFromCategory';
          o.target = this;
          o.data = this._TFdata;
          this.dispatchEvent(o);
        };

        v2._onGetMedia = function (o) {
          if (o.data.menuId != this.__get__key()) {
            return undefined;
          }
          net.typoflash.utils.Debug.trace('Glue onGetMedia ' + this.__get__key() + ', media length: ' + o.data.media.length);
          this._TFdata.mediaRecords = o.data.media;
          this._TFmc.TFdata = this._TFdata;
          o = {};
          o.type = 'onGetMedia';
          o.target = this;
          o.data = this._TFdata;
          this.dispatchEvent(o);
        };

        v2.__set__tween = function (s) {
          if (s) {
            this.addEventListener('onTweenChange', this._TFmc);
            this.addEventListener('onTweenComplete', this._TFmc);
          } else {
            this.removeEventListener('onTweenChange', this._TFmc);
            this.removeEventListener('onTweenComplete', this._TFmc);
          }
          this._tweenPhysicalProps = s;
          return this.__get__tween();
        };

        v2.__get__tween = function () {
          return this._tweenPhysicalProps;
        };

        v2.tweenPhysicalProps = function (o) {
          this._TFmc[this._physicalProps._width] = this._TFcurr._width + (this._TFfin._width - this._TFcurr._width) * o.width;
          this._TFmc[this._physicalProps._height] = this._TFcurr._height + (this._TFfin._height - this._TFcurr._height) * o.height;
          this._TFmc[this._physicalProps._x] = this._TFcurr._x + (this._TFfin._x - this._TFcurr._x) * o.x;
          this._TFmc[this._physicalProps._y] = this._TFcurr._y + (this._TFfin._y - this._TFcurr._y) * o.y;
          this._TFmc[this._physicalProps._rotation] = this._TFcurr._rotation + (this._TFfin._rotation - this._TFcurr._rotation) * o.y;
          var v3 = {};
          v3.type = 'onTweenChange';
          v3.target = this;
          v3.data = o.data;
          this.dispatchEvent(v3);
          v3.type = 'updatePenOnTweenChange';
          _global.TF.EDITOR.dispatchEvent(v3);
        };

        v2.tweenPhysicalPropsComplete = function (o) {
          var v3 = {};
          v3.type = 'onTweenComplete';
          v3.target = this;
          v3.data = o.data;
          this.dispatchEvent(v3);
          v3.type = 'updatePenOnTweenComplete';
          _global.TF.EDITOR.dispatchEvent(v3);
        };

        v2.unregister = function () {
          this.removeEventListener('onData', this._TFmc);
          this.removeEventListener('onGetMediaFromCategory', this._TFmc);
          this.removeEventListener('onGetMedia', this._TFmc);
          _global.TF.CONTENT_RENDERING.removeEventListener('_onGetMedia', this);
          _global.TF.CONTENT_RENDERING.removeEventListener('_onGetMediaFromCategory', this);
          _global.TF.CONTENT_RENDERING.removeEventListener('onClearCache', this);
          _global.TF.CONTENT_RENDERING.removeEventListener('onParsePageData', this);
          _global.TF.CONTENT_EDITING.removeEventListener('onStorePageData', this);
          _global.TF.CONTENT_EDITING.removeEventListener('onDeletePageData', this);
          _global.TF.CORE_EVENTS.removeEventListener('onBELoginStatus', this);
          _global.TF.EDITOR.unregisterObject(this);
          this._oldOnUnload();
        };

        v2.onBELoginStatus = function (obj) {
          if (obj.status == true) {
            if (_global.TF.CONF.ASSOCIATIVE_LIST[this._TFkey] != this) {
            }
          } else {
            if (obj.status != 'pending') {
            }
          }
        };

        v2.getLanguage = function (x, field) {
          if (x.lang[_global.TF.LANGUAGE][field] != null) {
            return x.lang[_global.TF.LANGUAGE][field];
          } else {
            if (x.lang[0][field] != null) {
              return x.lang[0][field];
            } else {
              return '';
            }
          }
        };

        v2._TFeditorClass = 'Component';
        v2._cacheCleared = false;
        v2._externallyEdited = false;
        v2._TFenabled = true;
        v2._applyDirectly = false;
        v2._disablePhysicalConfig = false;
        v2._allowedEditableFields = {'Records': 1, 'StoragePage': 1, 'Media': 1, 'MediaCategory': 1};
        v2.getMediaFromCategory = false;
        v2.getMedia = false;
        v2.enableResize = true;
        v2.enableRotate = true;
        v2.enableTranslate = true;
        v2._tweenPhysicalProps = false;
        v2.unsaved = false;
        v2.addProperty('boundingBox', v2.__get__boundingBox, v2.__set__boundingBox);
        v2.addProperty('confEditor', v2.__get__confEditor, v2.__set__confEditor);
        v2.addProperty('data', v2.__get__data, function () {});
        v2.addProperty('disablePhysicalConfig', v2.__get__disablePhysicalConfig, v2.__set__disablePhysicalConfig);
        v2.addProperty('editableFields', v2.__get__editableFields, v2.__set__editableFields);
        v2.addProperty('editor', v2.__get__editor, v2.__set__editor);
        v2.addProperty('editorClass', v2.__get__editorClass, v2.__set__editorClass);
        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        v2.addProperty('frame', v2.__get__frame, v2.__set__frame);
        v2.addProperty('key', v2.__get__key, v2.__set__key);
        v2.addProperty('listIndex', v2.__get__listIndex, v2.__set__listIndex);
        v2.addProperty('mc', v2.__get__mc, function () {});
        v2.addProperty('pen', v2.__get__pen, v2.__set__pen);
        v2.addProperty('physicalProps', v2.__get__physicalProps, v2.__set__physicalProps);
        v2.addProperty('tween', v2.__get__tween, v2.__set__tween);
        ASSetPropFlags(net.typoflash.Glue.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 334 __Packages.net.typoflash.utils.SequentialTween {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.utils) {
        _global.net.typoflash.utils = new Object();
      }
      if (!_global.net.typoflash.utils.SequentialTween) {
        var v1 = function (o) {
          this._obj = {};
          mx.events.EventDispatcher.initialize(this);
          if (typeof o.tweenFunc == 'function') {
            this._tweenFunc = o.tweenFunc;
          } else {
            this._tweenFunc = net.typoflash.utils.TweenFunc.easeInOutQuad;
          }
          if (o.tweenTime > 0) {
            this._tweenTime = o.tweenTime;
          }
          this.start();
        };

        net.typoflash.utils.SequentialTween = v1;
        var v2 = v1.prototype;
        v2.__set____x = function (x) {
          this._obj.x = x;
          var v2 = {};
          v2.type = 'onSetX';
          v2.target = this;
          v2.x = this._obj.x;
          this.dispatchEvent(v2);
          return this.__get____x();
        };

        v2.__get____x = function () {
          return this._obj.x;
        };

        v2.__set____y = function (y) {
          this._obj.y = y;
          var v2 = {};
          v2.type = 'onSetY';
          v2.target = this;
          v2.y = this._obj.y;
          this.dispatchEvent(v2);
          return this.__get____y();
        };

        v2.__get____y = function () {
          return this._obj.y;
        };

        v2.__set____h = function (h) {
          this._obj.height = h;
          var v2 = {};
          v2.type = 'onSetHeight';
          v2.target = this;
          v2.height = this._obj.height;
          this.dispatchEvent(v2);
          return this.__get____h();
        };

        v2.__get____h = function () {
          return this._obj.height;
        };

        v2.__set____w = function (w) {
          this._obj.width = w;
          var v2 = {};
          v2.type = 'onSetWidth';
          v2.target = this;
          v2.width = this._obj.w;
          this.dispatchEvent(v2);
          return this.__get____w();
        };

        v2.__get____w = function () {
          return this._obj.width;
        };

        v2.sequentialXYresize = function (currX, currY, currW, currH, endX, endY, endW, endH) {
          if (currX != null) {
            this.__set____x(currX);
          }
          if (currY != null) {
            this.__set____y(currY);
          }
          if (currW != null) {
            this.__set____w(currW);
          }
          if (currH != null) {
            this.__set____h(currH);
          }
          stop();
          this.tx = new mx.transitions.Tween(this, '__x', this._tweenFunc, this.__get____x(), endX, this._tweenTime, true);
          this.tx.endY = endY;
          this.tx.onMotionFinished = net.typoflash.utils.Proxy.create(this, this.startYTween);
          this.tw = new mx.transitions.Tween(this, '__w', this._tweenFunc, this.__get____w(), endW, this._tweenTime, true);
          this.tw.endH = endH;
          this.tw.onMotionFinished = net.typoflash.utils.Proxy.create(this, this.startHTween);
          this.tw.FPS = 50;
          this.tx.FPS = 50;
          this.tx.onMotionChanged = net.typoflash.utils.Proxy.create(this, this.onSequentialXYresizeChange);
        };

        v2.startYTween = function (T) {
          var v2 = new mx.transitions.Tween(this, '__y', this._tweenFunc, this.__get____y(), T.endY, this._tweenTime, true);
          v2.FPS = 50;
          v2.onMotionFinished = net.typoflash.utils.Proxy.create(this, this.onSequentialXYresizeComplete);
          v2.onMotionChanged = net.typoflash.utils.Proxy.create(this, this.onSequentialXYresizeChange);
        };

        v2.startHTween = function (T) {
          var v2 = new mx.transitions.Tween(this, '__h', this._tweenFunc, this.__get____h(), T.endH, this._tweenTime, true);
          v2.FPS = 50;
        };

        v2.onSequentialXYresizeComplete = function (t) {
          var v2 = {};
          v2.target = this;
          v2.type = 'onMotionFinished';
          v2.data = this._obj;
          this.dispatchEvent(v2);
          this.onMotionFinished(this._obj);
        };

        v2.onSequentialXYresizeChange = function (t) {
          var v2 = {};
          v2.target = this;
          v2.type = 'onMotionChanged';
          v2.data = this._obj;
          this.dispatchEvent(v2);
          this.onMotionChanged(this._obj);
        };

        v2.stop = function () {
          this.tw.stop();
          this.tx.stop();
        };

        v2.start = function () {
          this.sequentialXYresize(0, 0, 0, 0, 1, 1, 1, 1);
        };

        v2._tweenTime = 0.7;
        v2.addProperty('__h', v2.__get____h, v2.__set____h);
        v2.addProperty('__w', v2.__get____w, v2.__set____w);
        v2.addProperty('__x', v2.__get____x, v2.__set____x);
        v2.addProperty('__y', v2.__get____y, v2.__set____y);
        ASSetPropFlags(net.typoflash.utils.SequentialTween.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 335 __Packages.net.typoflash.utils.TweenFunc {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.utils) {
        _global.net.typoflash.utils = new Object();
      }
      if (!_global.net.typoflash.utils.TweenFunc) {
        var v1 = function () {};

        net.typoflash.utils.TweenFunc = v1;
        var v2 = v1.prototype;
        v1.linearTween = function (t, b, c, d) {
          return c * t / d + b;
        };

        v1.easeInQuad = function (t, b, c, d) {
          t /= d;
          return c * t * t + b;
        };

        v1.easeOutQuad = function (t, b, c, d) {
          t /= d;
          return -c * t * (t - 2) + b;
        };

        v1.easeInOutQuad = function (t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return (c / 2) * t * t + b;
          }
          return (-c / 2) * (--t * (t - 2) - 1) + b;
        };

        v1.easeInCubic = function (t, b, c, d) {
          t /= d;
          return c * t * t * t + b;
        };

        v1.easeOutCubic = function (t, b, c, d) {
          t = t / d - 1;
          return c * (t * t * t + 1) + b;
        };

        v1.easeInOutCubic = function (t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return (c / 2) * t * t * t + b;
          }
          t -= 2;
          return (c / 2) * (t * t * t + 2) + b;
        };

        v1.easeInQuart = function (t, b, c, d) {
          t /= d;
          return c * t * t * t * t + b;
        };

        v1.easeOutQuart = function (t, b, c, d) {
          t = t / d - 1;
          return -c * (t * t * t * t - 1) + b;
        };

        v1.easeInOutQuart = function (t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return (c / 2) * t * t * t * t + b;
          }
          t -= 2;
          return (-c / 2) * (t * t * t * t - 2) + b;
        };

        v1.easeInQuint = function (t, b, c, d) {
          t /= d;
          return c * t * t * t * t * t + b;
        };

        v1.easeOutQuint = function (t, b, c, d) {
          t = t / d - 1;
          return c * (t * t * t * t * t + 1) + b;
        };

        v1.easeInOutQuint = function (t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return (c / 2) * t * t * t * t * t + b;
          }
          t -= 2;
          return (c / 2) * (t * t * t * t * t + 2) + b;
        };

        v1.easeInSine = function (t, b, c, d) {
          return -c * Math.cos((t / d) * 1.570796326794897) + c + b;
        };

        v1.easeOutSine = function (t, b, c, d) {
          return c * Math.sin((t / d) * 1.570796326794897) + b;
        };

        v1.easeInOutSine = function (t, b, c, d) {
          return (-c / 2) * (Math.cos(Math.PI * t / d) - 1) + b;
        };

        v1.easeInExpo = function (t, b, c, d) {
          return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
        };

        v1.easeOutExpo = function (t, b, c, d) {
          return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
        };

        v1.easeInOutExpo = function (t, b, c, d) {
          if (t == 0) {
            return b;
          }
          if (t == d) {
            return b + c;
          }
          t /= d / 2;
          if (t < 1) {
            return (c / 2) * Math.pow(2, 10 * (t - 1)) + b;
          }
          return (c / 2) * (-Math.pow(2, -10 * --t) + 2) + b;
        };

        v1.easeInCirc = function (t, b, c, d) {
          t /= d;
          return -c * (Math.sqrt(1 - t * t) - 1) + b;
        };

        v1.easeOutCirc = function (t, b, c, d) {
          t = t / d - 1;
          return c * Math.sqrt(1 - t * t) + b;
        };

        v1.easeInOutCirc = function (t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return (-c / 2) * (Math.sqrt(1 - t * t) - 1) + b;
          }
          t -= 2;
          return (c / 2) * (Math.sqrt(1 - t * t) + 1) + b;
        };

        ASSetPropFlags(net.typoflash.utils.TweenFunc.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 336 __Packages.net.typoflash.utils.Proxy {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.utils) {
        _global.net.typoflash.utils = new Object();
      }
      if (!_global.net.typoflash.utils.Proxy) {
        var v1 = function () {};

        net.typoflash.utils.Proxy = v1;
        var v2 = v1.prototype;
        v1.create = function (oTarget, fFunction) {
          var aParameters = new Array();
          var v2 = 2;
          while (v2 < arguments.length) {
            aParameters[v2 - 2] = arguments[v2];
            ++v2;
          }
          var v4 = function () {
            var v2 = arguments.concat(aParameters);
            fFunction.apply(oTarget, v2);
          };

          return v4;
        };

        ASSetPropFlags(net.typoflash.utils.Proxy.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 337 __Packages.net.typoflash.ContentRendering {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.ContentRendering) {
        var v1 = function () {
          if (!net.typoflash.ContentRendering._allowInstantiation) {
            trace('Error: Instantiation failed: Use _global[\'TF\'][\'CONTENT_RENDERING\'] = ContentRendering.global instead of new ContentRendering().');
          }
          mx.events.EventDispatcher.initialize(this);
          this._motherload = {};
          _global.TF.CORE_EVENTS.addEventListener('onBrowserHistory', this);
          _global.TF.CORE_EVENTS.addEventListener('onExtPageState', this);
          _global.TF.CORE_EVENTS.addEventListener('onExtTemplateState', this);
          if (this.pageState == null) {
            this.pageState = [];
          }
        };

        net.typoflash.ContentRendering = v1;
        var v2 = v1.prototype;
        v2.__get__service = function () {
          if (this._service == null) {
            this._service = new mx.remoting.Service(_global.TF.REMOTING_GATEWAY, null, 'typoflash.remoting.contentrendering', null, null);
          }
          if (_global.TF.REMOTING_GATEWAY == null) {
            net.typoflash.utils.Debug.trace('_global[\'TF\'][\'REMOTING_GATEWAY\'] not set!!');
          }
          return this._service;
        };

        v2.onBrowserHistory = function (p) {
          net.typoflash.utils.Debug.trace('onBrowserHistory');
          net.typoflash.utils.Debug.trace(p);
          this.getPage(p.pObj, true);
        };

        v2.getPage = function (pObj, nostalgic) {
          if (pObj.id > 0) {
            if (pObj.L <= -1) {
              if (_global.TF.LANGUAGE > 0) {
                pObj.L = _global.TF.LANGUAGE;
              } else {
                pObj.L = 0;
              }
            } else {
              _global.TF.LANGUAGE = pObj.L;
            }
            if (pObj.wrap == null && _global.TF.CONF.PAGE.wrap != null) {
              pObj.wrap = _global.TF.CONF.PAGE.wrap;
            }
            this.currPageState = null;
            this.pageState[_global.TF.PID] = null;
            _global.TF.PID = pObj.id;
            var v8 = {};
            v8.type = 'onPreSetPage';
            v8.pObj = pObj;
            this.dispatchEvent(v8);
            if (this._motherload[pObj.L][pObj.id] == null) {
              if (_global.TF.CONF == null) {
                net.typoflash.utils.Debug.trace('Config error: _global[\'TF\'][\'CONF\'] not set in ContentRendering. Config needs to be included before templates are initilized. No need to tick: \'Export in first frame\' on Template symbol');
              }
              if (_global.TF.CONF.USE_SWX) {
                var v5 = new net.typoflash.datahandling.SWX();
                v5.gateway = _global.TF.SWX_GATEWAY + '?cmd=getPage&id=' + pObj.id + '&L=' + pObj.L;
                v5.encoding = 'POST';
                v5.result = [this, 'handleGetPage'];
                v5.error = [this, 'fallBack'];
                v5.name = 'Page data';
                var v6 = {};
                v6.serviceClass = 'typoflash.remoting.contentrendering';
                v6.method = 'getPage';
                v6.args = [pObj];
                net.typoflash.utils.Debug.trace('Get page ' + _global.TF.PID + ' in lang ' + _global.TF.LANGUAGE + ' from server via SWX.');
                v5.call(v6);
              } else {
                net.typoflash.utils.Debug.trace('Get page ' + _global.TF.PID + ' in lang ' + _global.TF.LANGUAGE + ' from server via AMF.');
                var v10 = (this.__get__service()).getPage(pObj);
                v10.__set__responder(new mx.rpc.RelayResponder(this, 'handleGetPage', 'handleRemotingError'));
              }
              var v9 = _global.TF.SITE_TITLE;
            } else {
              this._page = this._motherload[pObj.L][pObj.id];
              this.templateId = (this.__get__page()).TEMPLATE.uid;
              if (this.oldTemplateId == this.templateId) {
                (this.__get__page()).TEMPLATE.menus = this._menus;
                (this.__get__page()).TEMPLATE.frames = this._frames;
              }
              this.parseConf();
              this.parsePageData();
              this.dispatchPage();
              this.oldTemplateId = (this.__get__page()).TEMPLATE.uid;
              var v9 = _global.TF.SITE_TITLE + ': ' + (this.__get__page()).HEADER.title;
              net.typoflash.utils.Debug.trace('Get page ' + _global.TF.PID + ' in lang ' + _global.TF.LANGUAGE + ' from cached motherload.');
            }
            v8 = {};
            v8.type = 'onSetPage';
            v8.pObj = pObj;
            _global.TF.CORE_EVENTS.dispatchEvent(v8);
            if (Number(_global.TF.HISTORY_ENABLED) > 1 && !nostalgic) {
              var v4 = '';
              for (var v7 in pObj) {
                if (v7 == 'wrap') {
                  continue;
                }
                v4 += v7 + '=' + pObj[v7] + '&';
              }
              this.currPageDeeplink = v4;
              if (this.tplState[(this.__get__page()).TEMPLATE.uid].length > 0) {
                v4 += 'tplState=' + this.tplState[(this.__get__page()).TEMPLATE.uid];
              }
              if (this._motherload[pObj.L][pObj.id] != null) {
                net.typoflash.utils.Debug.trace('Setting deeplink in content rendering: ' + v4 + ' and title: ' + v9);
                flash.external.ExternalInterface.call('setDeepLink', v4, v9);
              }
            } else {
              var v4 = '';
              for (var v7 in pObj) {
                if (v7 == 'wrap') {
                  continue;
                }
                v4 += v7 + '=' + pObj[v7] + '&';
              }
              this.currPageDeeplink = v4;
              if (this.tplState[(this.__get__page()).TEMPLATE.uid].length > 0) {
                v4 += 'tplState=' + this.tplState[(this.__get__page()).TEMPLATE.uid];
              }
            }
          } else {
            net.typoflash.utils.Debug.trace('Not getting page since id was null');
          }
        };

        v2.handleGetPage = function (re) {
          net.typoflash.utils.Debug.trace('Got page');
          if (_global.TF.CONF.PAGE.debug) {
            net.typoflash.utils.Debug.trace(re.result);
          }
          this._page = re.result;
          this.templateId = (this.__get__page()).TEMPLATE.uid;
          if (this.oldTemplateId == this.templateId) {
            (this.__get__page()).TEMPLATE.menus = this._menus;
            (this.__get__page()).TEMPLATE.frames = this._frames;
          }
          this.parseConf();
          this.parsePageData();
          if (re.result.errortype > 0) {
            var v3 = {};
            v3.type = 'onGetPage';
            v3.status = false;
            v3.errortype = re.result.errortype;
            v3.errormsg = re.result.errormsg;
            this.dispatchEvent(v3);
          } else {
            if (re.result) {
              this.dispatchPage();
              this.oldTemplateId = (this.__get__page()).TEMPLATE.uid;
            } else {}
          }
          var v6 = _global.TF.SITE_TITLE + ': ' + (this.__get__page()).HEADER.title;
          var v5 = this.currPageDeeplink;
          if (this.tplState[(this.__get__page()).TEMPLATE.uid].length > 0) {
            v5 += 'tplState=' + this.tplState[(this.__get__page()).TEMPLATE.uid];
          }
          net.typoflash.utils.Debug.trace('Setting deeplink in content rendering onGetPage: ' + v5 + ' and title: ' + v6);
          flash.external.ExternalInterface.call('setDeepLink', v5, v6);
        };

        v2.fallBack = function (o) {
          _global.TF.CONF.USE_SWX = 0;
          this[o.callingObj.method](o.callingObj.args[0]);
        };

        v2.dispatchPage = function () {
          var v2 = {};
          v2.type = 'onGetPage';
          v2.status = true;
          v2.data = this._page;
          this.dispatchEvent(v2);
        };

        v2.__get__page = function () {
          return this._page;
        };

        v2.__get__motherload = function () {
          return this._motherload;
        };

        v2.getCachedPage = function (pid, l) {
          if (l <= -1) {
            if (_global.TF.LANGUAGE > 0) {
              l = _global.TF.LANGUAGE;
            } else {
              l = 0;
            }
          }
          if (this._motherload[l][pid] != null) {
            return this._motherload[l][pid];
          } else {
            return false;
          }
        };

        v2.parsePageData = function (o, L) {
          this._data = {};
          if (o == null) {
            o = (this.__get__page()).TEMPLATE;
          }
          if (L == null && _global.TF.LANGUAGE > 0) {
            L = _global.TF.LANGUAGE;
          } else {
            if (L == null) {
              L = 0;
            }
          }
          var v4 = {};
          for (var v6 in o.template_data[L]) {
            v4[v6] = o.template_data[L][v6];
          }
          for (v6 in o.page_data[L]) {
            v4[v6] = o.page_data[L][v6];
          }
          for (v6 in v4) {
            this._data[v6] = v4[v6];
          }
          var v7 = {};
          v7.type = 'onParsePageData';
          v7.data = this._data;
          this.dispatchEvent(v7);
        };

        v2.applyData = function (mc) {
          if (mc != null) {
            this.parsePageData();
            mc.onData(this._data[mc]);
          } else {}
        };

        v2.getPageData = function (key, L) {
          var v4 = (this.__get__page()).TEMPLATE;
          if (L == null && _global.TF.LANGUAGE > 0) {
            L = _global.TF.LANGUAGE;
            return v4.page_data[L][key];
          }
          if (L == null) {
            L = 0;
          }
          return v4.page_data[L][key];
        };

        v2.getTemplateData = function (key, L) {
          var v4 = (this.__get__page()).TEMPLATE;
          if (L == null && _global.TF.LANGUAGE > 0) {
            L = _global.TF.LANGUAGE;
            return v4.template_data[L][key];
          }
          if (L == null) {
            L = 0;
          }
          return v4.template_data[L][key];
        };

        v2.parseConf = function () {
          var v5 = (this.__get__page()).TEMPLATE;
          this._conf = {};
          var v4 = v5.conf.split('&');
          var v3;
          var v2 = 0;
          while (v2 < v4.length) {
            v3 = v4[v2].split('=');
            if (v3[0] != '') {
              this._conf[v3[0]] = v3[1];
            }
            ++v2;
          }
          v4 = v5.template_conf.split('&');
          v2 = 0;
          while (v2 < v4.length) {
            v3 = v4[v2].split('=');
            if (v3[0] != '') {
              this._conf[v3[0]] = v3[1];
            }
            ++v2;
          }
          v4 = v5.page_conf.split('&');
          v2 = 0;
          while (v2 < v4.length) {
            v3 = v4[v2].split('=');
            if (v3[0] != '') {
              this._conf[v3[0]] = v3[1];
            }
            ++v2;
          }
        };

        v2.getConf = function (name) {
          return this._conf[name];
        };

        v2.getData = function (key) {
          return this._data[key];
        };

        v2.getHtmlVar = function (key, name) {
          return _level0[key + '|' + name];
        };

        v2.getMenu = function (pObj) {
          if (_global.TF.LANGUAGE > 0) {
            pObj.L = _global.TF.LANGUAGE;
          } else {
            pObj.L = 0;
          }
          pObj.fields = ['uid', 'title'];
          if (_global.TF.CONF.USE_SWX) {
            var v4 = new net.typoflash.datahandling.SWX();
            v4.gateway = _global.TF.SWX_GATEWAY + '?cmd=getMenu&id=' + pObj.id + '&L=' + pObj.L;
            v4.encoding = 'POST';
            v4.result = [this, 'handleGetMenu'];
            v4.error = [this, 'fallBack'];
            v4.name = 'Menu data';
            var v5 = {};
            v5.serviceClass = 'typoflash.remoting.contentrendering';
            v5.method = 'getMenu';
            v5.args = [pObj];
            net.typoflash.utils.Debug.trace('Requesting getMenu for page ' + pObj.id + ' in lang ' + _global.TF.LANGUAGE + ' from server via SWX.');
            v4.call(v5);
          } else {
            net.typoflash.utils.Debug.trace('Requesting getMenu for page ' + pObj.id + ' in lang ' + _global.TF.LANGUAGE + ' from server via AMF.');
            var v7 = (this.__get__service()).getMenu(pObj);
            v7.__set__responder(new mx.rpc.RelayResponder(this, 'handleGetMenu', 'handleRemotingError'));
          }
          var v6 = {};
          v6.type = 'onRequestMenu';
          v6.pObj = pObj;
          this.dispatchEvent(v6);
        };

        v2.handleGetMenu = function (re) {
          net.typoflash.utils.Debug.trace('Got menu');
          if (_global.TF.CONF.MENU.debug) {
            net.typoflash.utils.Debug.trace(re.result);
          }
          if (re.result.errortype > 0) {
            var v3 = {};
            v3.type = 'onGetMenu';
            v3.status = false;
            v3.errortype = re.result.errortype;
            v3.errormsg = re.result.errormsg;
            this.dispatchEvent(v3);
          } else {
            if (re.result) {
              var v3 = {};
              v3.type = 'onGetMenu';
              v3.status = true;
              v3.data = re.result;
              this.dispatchEvent(v3);
            } else {}
          }
        };

        v2.getMotherload = function (pObj) {
          if (_global.TF.LANGUAGE > 0) {
            pObj.L = _global.TF.LANGUAGE;
          } else {
            pObj.L = 0;
          }
          pObj.showHiddenPage = Boolean(_global.TF.CONF.MOTHERLOAD.showHiddenPage);
          if (_global.TF.CONF.USE_SWX) {
            net.typoflash.utils.Debug.trace('Requesting motherload for page ' + pObj.id + ' in lang ' + _global.TF.LANGUAGE + ' from server via SWX.');
            var v4 = new net.typoflash.datahandling.SWX();
            v4.gateway = _global.TF.SWX_GATEWAY + '?cmd=getMotherload&id=' + pObj.id + '&L=' + pObj.L;
            v4.encoding = 'POST';
            v4.result = [this, 'handleGetMotherload'];
            v4.error = [this, 'fallBack'];
            v4.name = 'Motherload';
            var v5 = {};
            v5.serviceClass = 'typoflash.remoting.contentrendering';
            v5.method = 'getMotherload';
            v5.args = [pObj];
            v4.call(v5);
          } else {
            net.typoflash.utils.Debug.trace('Requesting motherload for page ' + pObj.id + ' in lang ' + _global.TF.LANGUAGE + ' from server via AMF.');
            var v6 = (this.__get__service()).getMotherload(pObj);
            v6.__set__responder(new mx.rpc.RelayResponder(this, 'handleGetMotherload', 'handleRemotingError'));
          }
        };

        v2.handleGetMotherload = function (re) {
          net.typoflash.utils.Debug.trace('Got motherload for language ' + re.result.pObj.L + '. Result: ' + re.result.pages.length + ' pages');
          if (_global.TF.CONF.MOTHERLOAD.debug) {
            net.typoflash.utils.Debug.trace(re.result);
          }
          if (re.result.errortype > 0) {
            var v6 = {};
            v6.type = 'onGetMotherload';
            v6.status = false;
            v6.errortype = re.result.errortype;
            v6.errormsg = re.result.errormsg;
            this.dispatchEvent(v6);
          } else {
            if (re.result) {
              var v6 = {};
              v6.type = 'onGetMotherload';
              v6.status = true;
              var v5 = re.result.pObj.L;
              this._motherload[v5] = {};
              var v4 = re.result.pages.length;
              while (v4--) {
                if (re.result.pages[v4].HEADER.uid != null) {
                  this._motherload[v5][re.result.pages[v4].HEADER.uid] = re.result.pages[v4];
                  if (re.result.pages[v4].HEADER.alias.length > 0) {
                    this._motherload[v5][re.result.pages[v4].HEADER.alias] = re.result.pages[v4];
                  }
                }
              }
              this.parseConf();
              this.parsePageData();
              this.dispatchEvent(v6);
            } else {}
          }
        };

        v2.getLanguages = function () {
          var v2 = (this.__get__service()).getLanguages();
          v2.__set__responder(new mx.rpc.RelayResponder(this, 'handleGetLanguages', 'handleRemotingError'));
        };

        v2.handleGetLanguages = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v2 = {};
            v2.type = 'onGetLanguages';
            v2.status = false;
            v2.errortype = (re.__get__result()).errortype;
            v2.errormsg = (re.__get__result()).errormsg;
            this.dispatchEvent(v2);
          } else {
            if (re.__get__result()) {
              var v2 = {};
              v2.type = 'onGetLanguages';
              v2.status = true;
              v2.data = re.result;
              this.dispatchEvent(v2);
            } else {}
          }
        };

        v2.setTemplateStateProperty = function (key, property, value) {
          if (key == null) {
            net.typoflash.utils.Debug.trace('setTemplateState no key set');
            return undefined;
          }
          var v2 = {};
          v2.key = key;
          v2[property] = value;
          this.setTemplateState(v2);
        };

        v2.getTemplateStateProperty = function (key, property) {
          return this.currTplState[key][property];
        };

        v2.getTemplateState = function (key) {
          return this.currTplState[key];
        };

        v2.setTemplateState = function (o) {
          if (o.key == null) {
            net.typoflash.utils.Debug.trace('setTemplateState no key set');
            return undefined;
          }
          if (this.currTplState == null) {
            this.currTplState = {};
          }
          if (this.currTplState[o.key] == null) {
            this.currTplState[o.key] = {};
          }
          if (typeof o == 'object') {
            for (var v5 in o) {
              if (v5 != 'key') {
                this.currTplState[o.key][v5] = o[v5];
              }
            }
          } else {
            net.typoflash.utils.Debug.trace('setTemplateState no object sent');
            return undefined;
          }
          if (this.tplState == null) {
            this.tplState = [];
          }
          var v7 = this.tplState[(this.__get__page()).TEMPLATE.uid];
          this.tplState[(this.__get__page()).TEMPLATE.uid] = this.serialiseState(this.currTplState);
          if (this.currPageDeeplink != null) {
            var v4 = this.currPageDeeplink;
          } else {
            var v4 = '';
          }
          if (this.pageState[_global.TF.PID].length > 0) {
            v4 += 'pageState=' + this.pageState[_global.TF.PID] + '&';
          }
          if (this.tplState[(this.__get__page()).TEMPLATE.uid].length > 0) {
            v4 += 'tplState=' + this.tplState[(this.__get__page()).TEMPLATE.uid];
          }
          var v8 = this.unserialiseState(this.currPageDeeplink + 'pageState=' + this.pageState[_global.TF.PID] + '&' + v7);
          var v9 = this.unserialiseState(v4);
          if (!this.objectsAreEqual(v9, v8)) {
            var v6 = _global.TF.SITE_TITLE + ': ' + (this.__get__page()).HEADER.title;
            flash.external.ExternalInterface.call('setDeepLink', v4, v6);
          }
        };

        v2.setPageStateProperty = function (key, property, value) {
          if (key == null) {
            net.typoflash.utils.Debug.trace('setPageStateProperty no key set');
            return undefined;
          }
          var v2 = {};
          v2.key = key;
          v2[property] = value;
          this.setPageState(v2);
        };

        v2.getPageStateProperty = function (key, property) {
          return this.currPageState[key][property];
        };

        v2.setPageState = function (o) {
          if (this.currPageState == null) {
            this.currPageState = {};
          }
          if (this.currPageState[o.key] == null) {
            this.currPageState[o.key] = {};
          }
          if (typeof o == 'object') {
            for (var v5 in o) {
              if (v5 != 'key') {
                this.currPageState[o.key][v5] = o[v5];
              }
            }
          } else {
            net.typoflash.utils.Debug.trace('setPageState no object sent');
            return undefined;
          }
          if (this.pageState == null) {
            this.pageState = [];
          }
          var v6 = 'pageState=' + this.pageState[_global.TF.PID] + '&';
          this.pageState[_global.TF.PID] = this.serialiseState(this.currPageState);
          if (this.currPageDeeplink != null) {
            var v4 = this.currPageDeeplink;
          } else {
            var v4 = '';
          }
          if (this.pageState[_global.TF.PID].length > 0) {
            v4 += 'pageState=' + this.pageState[_global.TF.PID] + '&';
          }
          if (this.tplState[(this.__get__page()).TEMPLATE.uid].length > 0) {
            v4 += 'tplState=' + this.tplState[(this.__get__page()).TEMPLATE.uid];
          }
          var v7 = (this.__get__page()).HEADER.title;
          var v8 = this.unserialiseState(this.currPageDeeplink + v6 + 'tplState=' + this.tplState[(this.__get__page()).TEMPLATE.uid]);
          var v9 = this.unserialiseState(v4);
          if (!this.objectsAreEqual(v9, v8)) {
            v7 = _global.TF.SITE_TITLE + ': ' + (this.__get__page()).HEADER.title;
            flash.external.ExternalInterface.call('setDeepLink', v4, v7);
          }
        };

        v2.onExtTemplateState = function (o) {
          net.typoflash.utils.Debug.trace('onExtTemplateState');
          net.typoflash.utils.Debug.trace(o);
          if (!this.objectsAreEqual(o.state, this.tplState[(this.__get__page()).TEMPLATE.uid])) {
            this.currTplState = this.unserialiseState(o.state);
            this.tplState[(this.__get__page()).TEMPLATE.uid] = o.state;
            o = {};
            o.type = 'onTemplateState';
            o.state = this.currTplState;
            this.dispatchEvent(o);
          }
        };

        v2.onExtPageState = function (o) {
          net.typoflash.utils.Debug.trace('onExtPageState');
          net.typoflash.utils.Debug.trace(o);
          if (!this.objectsAreEqual(o.state, this.pageState[_global.TF.PID])) {
            this.currPageState = this.unserialiseState(o.state);
            this.pageState[_global.TF.PID] = o.state;
            o = {};
            o.type = 'onPageState';
            o.state = this.currPageState;
            this.dispatchEvent(o);
          }
        };

        v2.setLanguage = function (L) {
          if (L == _global.TF.LANGUAGE) {
            return undefined;
          }
          net.typoflash.utils.Debug.trace('Content rendering setLanguage ' + L);
          this._motherload = {};
          var v4 = {};
          v4.id = _global.TF.PID;
          _global.TF.LANGUAGE = L;
          v4.L = _global.TF.LANGUAGE;
          this.getPage(v4);
          _global.TF.COOKIE.setData('language', L);
          var v3 = {};
          v3.type = 'onSetLanguage';
          v3.target = this;
          this.dispatchEvent(v3);
        };

        v2.objectsAreEqual = function (a, b) {
          if (typeof a != 'object' || typeof b != 'object') {
            return false;
          }
          for (var v3 in a) {
            if (String(a[v3]) != String(b[v3])) {
                            return false;
            }
          }
          for (v3 in b) {
            if (String(a[v3]) != String(b[v3])) {
                            return false;
            }
          }
          return true;
        };

        v2.unserialiseState = function (o) {
          o = unescape(o);
          var v5 = o.split(';');
          var v3;
          var v4 = {};
          var v1;
          var v2 = 0;
          while (v2 < v5.length) {
            v3 = v5[v2].split(':');
            if (v3[0] != '') {
              v1 = v3[0].split('|');
              if (v4[v1[0]] == null) {
                v4[v1[0]] = {};
              }
              v4[v1[0]][v1[1]] = v3[1];
            }
            ++v2;
          }
          return v4;
        };

        v2.serialiseState = function (o) {
          var v2 = '';
          for (var v4 in o) {
            for (var v3 in o[v4]) {
              if (v4 != null && v3 != null && o[v4][v3] != null) {
                v2 += v4 + '|' + v3 + ':' + o[v4][v3] + ';';
              }
            }
          }
          return v2;
        };

        v2.getRecords = function (o) {
          var v2 = (this.__get__service()).getRecords(o);
          v2.__set__responder(new mx.rpc.RelayResponder(this, 'getRecordsResult', 'handleRemotingError'));
        };

        v2.getRecordsResult = function (re) {
          net.typoflash.utils.Debug.trace(re);
          if ((re.__get__result()).errortype > 0) {
            var v2 = {};
            v2.type = 'onGetRecords';
            v2.status = false;
            v2.errortype = (re.__get__result()).errortype;
            v2.errormsg = (re.__get__result()).errormsg;
            this.dispatchEvent(v2);
          } else {
            if (re.__get__result()) {
              var v2 = {};
              v2.type = 'onGetRecords';
              v2.status = true;
              v2.records = re.result;
              this.dispatchEvent(v2);
            } else {}
          }
        };

        v2.getRenderedContent = function (o) {
          var v2 = (this.__get__service()).getRenderedContent(o);
          v2.__set__responder(new mx.rpc.RelayResponder(this, 'getRenderedContentResult', 'handleRemotingError'));
        };

        v2.getRenderedContentResult = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v4 = {};
            v4.type = 'onError';
            v4.errorfunction = 'select';
            v4.errortype = (re.__get__result()).errortype;
            v4.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            if (re.__get__result()) {
              var v4 = {};
              v4.type = (re.__get__result()).callback;
              v4.data = (re.__get__result()).result;
              this.dispatchEvent(v4);
            } else {}
          }
          net.typoflash.utils.Debug.trace(re);
        };

        v2.getMedia = function (o) {
          net.typoflash.utils.Debug.trace('ContentRendering call getMedia');
          net.typoflash.utils.Debug.trace(o);
          var v2 = (this.__get__service()).getMedia(o);
          v2.__set__responder(new mx.rpc.RelayResponder(this, 'getMediaResult', 'handleRemotingError'));
        };

        v2.getMediaResult = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v3 = {};
            v3.type = 'onError';
            v3.errorfunction = 'select';
            v3.errortype = (re.__get__result()).errortype;
            v3.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v3);
          } else {
            if (re.__get__result()) {
              var v3 = {};
              v3.type = (re.__get__result()).callback;
              v3.data = re.result;
              v3.target = this;
              this.dispatchEvent(v3);
            } else {}
          }
        };

        v2.getMediaFromCategory = function (o) {
          net.typoflash.utils.Debug.trace('ContentRendering call getMediaFromCategory');
          net.typoflash.utils.Debug.trace(o);
          var v2 = (this.__get__service()).getMediaFromCategory(o);
          v2.__set__responder(new mx.rpc.RelayResponder(this, 'getMediaFromCategoryResult', 'handleRemotingError'));
        };

        v2.getMediaFromCategoryResult = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v3 = {};
            v3.type = 'onError';
            v3.errorfunction = 'select';
            v3.errortype = (re.__get__result()).errortype;
            v3.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v3);
          } else {
            if (re.__get__result()) {
              var v3 = {};
              v3.type = (re.__get__result()).callback;
              v3.data = (re.__get__result()).result;
              v3.target = this;
              this.dispatchEvent(v3);
            } else {}
          }
        };

        v2.clearCache = function () {
          var v2 = (this.__get__service()).clearCache();
          v2.__set__responder(new mx.rpc.RelayResponder(this, 'handleClearCache', 'handleRemotingError'));
        };

        v2.handleClearCache = function (re) {
          if ((re.__get__result()).errortype > 0) {
          } else {
            var v2 = {};
            v2.type = 'onClearCache';
            v2.status = true;
            v2.data = re;
            net.typoflash.utils.Debug.trace('ConternRendering.handleClearCache cleared motherload');
            this._motherload = {};
            this.dispatchEvent(v2);
          }
        };

        v2.handleRemotingError = function (fault) {
          var v2 = {};
          v2.type = 'onRemotingError';
          v2.errormsg = (fault.__get__fault()).faultstring;
          _global.TF.CORE_EVENTS.dispatchEvent(v2);
        };

        v2.registerFrame = function (f) {
          if ((this.__get__page()).TEMPLATE.frames == null) {
            (this.__get__page()).TEMPLATE.frames = {};
            this._frames = (this.__get__page()).TEMPLATE.frames;
          }
          (this.__get__page()).TEMPLATE.frames[f._name] = f;
          this._frames[f._name] = (this.__get__page()).TEMPLATE.frames[f._name];
          f.addEventListener('onFrameLoadBegin', net.typoflash.ContentRendering.__get__global());
          f.addEventListener('onFrameLoadComplete', net.typoflash.ContentRendering.__get__global());
        };

        v2.onFrameLoadBegin = function (o) {};

        v2.onFrameLoadComplete = function (o) {
          var v2 = true;
          for (var v3 in this._frames) {
            if (!this._frames[v3].allContentLoaded) {
              v2 = false;
            }
          }
          if (v2) {
            o = {};
            o.type = 'onPageLoadComlete';
            this.dispatchEvent(o);
          }
        };

        v2.registerMenu = function (m) {
          if ((this.__get__page()).TEMPLATE.menus == null) {
            (this.__get__page()).TEMPLATE.menus = {};
            this._menus = (this.__get__page()).TEMPLATE.menus;
          }
          (this.__get__page()).TEMPLATE.menus[m._name] = m;
          this._menus[m._name] = (this.__get__page()).TEMPLATE.menus[m._name];
        };

        v1.__get__global = function () {
          if (net.typoflash.ContentRendering._instance == null) {
            net.typoflash.ContentRendering._allowInstantiation = true;
            net.typoflash.ContentRendering._instance = new net.typoflash.ContentRendering();
            net.typoflash.ContentRendering._allowInstantiation = false;
          }
          return net.typoflash.ContentRendering._instance;
        };

        v1._instance = null;
        v1._allowInstantiation = false;
        v1.addProperty('global', v1.__get__global, function () {});
        v2.addProperty('motherload', v2.__get__motherload, function () {});
        v2.addProperty('page', v2.__get__page, function () {});
        v2.addProperty('service', v2.__get__service, function () {});
        ASSetPropFlags(net.typoflash.ContentRendering.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 338 __Packages.net.typoflash.datahandling.SWX {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.datahandling) {
        _global.net.typoflash.datahandling = new Object();
      }
      if (!_global.net.typoflash.datahandling.SWX) {
        var v1 = function () {};

        net.typoflash.datahandling.SWX = v1;
        var v2 = v1.prototype;
        v2.__set__testGateway = function (gatewayUrl) {
          this._testGateway = gatewayUrl;
          return this.__get__testGateway();
        };

        v2.__set__gateway = function (gatewayUrl) {
          this._gateway = gatewayUrl;
          return this.__get__gateway();
        };

        v2.__set__encoding = function (method) {
          if (method != net.typoflash.datahandling.SWX.POST && method != net.typoflash.datahandling.SWX.GET) {
            net.typoflash.datahandling.SWX.echo('SWX ERROR: Invalid encoding method (' + method + '). Valid methods are POST and GET.');
          } else {
            this._encoding = method;
          }
          return this.__get__encoding();
        };

        v2.__set__debug = function (state) {
          this._debug = state;
          return this.__get__debug();
        };

        v2.__set__name = function (n) {
          this._name = n;
          return this.__get__name();
        };

        v2.__get__name = function () {
          return this._name;
        };

        v2.__set__timeout = function (duration) {
          if (duration > 0) {
            this._timeout = duration;
          }
          return this.__get__timeout();
        };

        v2.__set__result = function (o) {
          if (!(o instanceof Array)) {
            net.typoflash.utils.Debug.trace('SWX issue: The result handler needs to be an array with [object,\'handler\']. Handler should be a string.');
          }
          this._resultObj = o[0];
          this._resultFn = o[1];
          return this.__get__result();
        };

        v2.__set__progress = function (o) {
          if (!(o instanceof Array)) {
            net.typoflash.utils.Debug.trace('SWX issue: The progress handler needs to be an array with [object,\'handler\']. Handler should be a string.');
          }
          this._progressObj = o[0];
          this._progressFn = o[1];
          return this.__get__progress();
        };

        v2.__set__error = function (o) {
          if (!(o instanceof Array)) {
            net.typoflash.utils.Debug.trace('SWX issue: The error handler needs to be an array with [object,\'handler\']. Handler should be a string.');
          }
          this._errorObj = o[0];
          this._errorFn = o[1];
          return this.__get__error();
        };

        v2.call = function (p) {
          var v5 = {'serviceClass': true, 'method': true, 'args': true, 'result': true, 'progress': true, 'timeout': true, 'fault': true, 'debug': true};
          if (net.typoflash.datahandling.SWX.echo != null) {
            var v8 = false;
            for (var v10 in p) {
              if (v5[v10] !== true) {
                net.typoflash.datahandling.SWX.echo('Warning: Unknown argument in SWX.call. ' + v10 + ' is not a valid argument.');
                v8 = true;
              }
            }
            if (v8) {
              var v6 = '';
              for (v10 in v5) {
                v6 += v10 + ', ';
              }
              v6 = v6.substr(0, v6.length - 2);
              net.typoflash.datahandling.SWX.echo('Valid arguments for SWX.call are: ' + v6);
            }
          }
          var v12 = (p.debug == undefined) ? this._debug : p.debug;
          var v14 = {'serviceClass': p.serviceClass, 'method': p.method, 'args': p.args};
          if (v12 != undefined) {
            v14.debug = v12;
          }
          if (typeof net.typoflash.datahandling.SWX._loadClip != 'movieclip') {
            if (_level0.depth.swx > 0) {
              net.typoflash.datahandling.SWX._loadClip = _level0.createEmptyMovieClip('SWXLoadManagerClip', _level0.depth.swx);
            } else {
              net.typoflash.datahandling.SWX._loadClip = _level0.createEmptyMovieClip('SWXLoadManagerClip', _level0.getNextHighestDepth());
            }
          }
          var v11 = net.typoflash.datahandling.SWX._loadClip.getNextHighestDepth();
          var v9 = net.typoflash.datahandling.SWX._loadClip.createEmptyMovieClip('_innerHolder' + v11, v11);
          v9.serviceClass = p.serviceClass;
          v9.method = p.method;
          v9.args = p.args;
          v9.url = _root._url;
          net.typoflash.datahandling.SWX.prepare(v9);
          var v7 = {};
          v7.resultFunction = this._resultFn;
          v7.resultObj = this._resultObj;
          v7.progressFunction = this._progressFn;
          v7.progressObj = this._progressObj;
          v7.errorObj = this._errorObj;
          v7.errorFunction = this._errorFn;
          v7.callingObj = p;
          v7.onProgress = function (obj) {
            this.progressObj[this.progressFunction](obj);
            if (obj.target.getBytesLoaded() > 0) {
            }
          };

          v7.onComplete = function (obj) {
            obj.target.mc.resultFunction = this.resultFunction;
            obj.target.mc.resultObj = this.resultObj;
            obj.target.mc.errorFunction = this.errorFunction;
            obj.target.mc.errorObj = this.errorObj;
            obj.target.mc.callingObj = this.callingObj;
            net.typoflash.utils.Debug.trace('SWX: Complete loading \'' + obj.target.name + '\' (' + obj.target.getBytesLoaded() + ' bytes)');
            obj.target.mc.count = 0;
            obj.target.mc.tname = obj.target.name;
            obj.target.mc.onEnterFrame = function () {
              if (this.result != null && this.count > 1) {
                this.resultObj[this.resultFunction](this);
                this.onEnterFrame = null;
              } else {
                if (this.count > 10) {
                  net.typoflash.utils.Debug.trace('SWX error: Taken more than 10 frames to initialize the data in ' + this.tname);
                  net.typoflash.utils.Debug.trace(this.callingObj);
                  this.errorObj[this.errorFunction](this);
                  this.onEnterFrame = null;
                } else {
                  ++this.count;
                }
              }
            };

          };

          var v13 = {'url': this._gateway, 'target': v9, 'listener': v7, 'name': this._name, 'method': this._encoding};
          _global.TF.LOAD_QUEUE.load(v13);
        };

        v1.echo = function (msg) {
          net.typoflash.utils.Debug.trace(msg);
        };

        v1.prepare = function (dataHolder) {
          net.typoflash.datahandling.SWX.json = '';
          if (dataHolder.args != undefined) {
            if (dataHolder.args instanceof Array) {
              net.typoflash.datahandling.SWX.arrayToJson(dataHolder.args);
              dataHolder.args = net.typoflash.datahandling.SWX.json;
            } else {
              net.typoflash.datahandling.SWX.echo('SWX Error in Swx.prepare(): args must be an array.');
            }
          } else {
            net.typoflash.datahandling.SWX.echo('SWX: No arguments array (args) found. No arguments will be sent.');
          }
        };

        v1.objectToJson = function (data) {
          net.typoflash.datahandling.SWX.json += '{';
          for (var v3 in data) {
            if (v3 == 'null' || v3 == null) {
              continue;
            }
            if (data[v3] == null) {
              net.typoflash.datahandling.SWX.json += '"' + data + '":null,';
              net.typoflash.datahandling.SWX.echo('SWX: \'' + v3 + '\' was undefined, sending \'null\'');
              continue;
            }
            net.typoflash.datahandling.SWX.json += '"' + v3 + '":';
            var v1 = data[v3];
            if (v1 instanceof Array) {
              net.typoflash.datahandling.SWX.arrayToJson(v1);
            } else {
              if (v1 instanceof Object) {
                net.typoflash.datahandling.SWX.objectToJson(v1);
              } else {
                if (typeof v1 == 'string') {
                  net.typoflash.datahandling.SWX.stringToJson(v1);
                } else {
                  net.typoflash.datahandling.SWX.json += v1;
                }
              }
            }
            net.typoflash.datahandling.SWX.json += ', ';
          }
          net.typoflash.datahandling.SWX.json = net.typoflash.datahandling.SWX.json.substr(0, net.typoflash.datahandling.SWX.json.length - 2);
          net.typoflash.datahandling.SWX.json += '}';
        };

        v1.arrayToJson = function (data) {
          net.typoflash.datahandling.SWX.json += '[';
          var v3 = data.length;
          var v2 = 0;
          while (v2 < v3) {
            var v1 = data[v2];
            if (v1 instanceof Array) {
              net.typoflash.datahandling.SWX.arrayToJson(v1);
            } else {
              if (v1 instanceof Object) {
                net.typoflash.datahandling.SWX.objectToJson(v1);
              } else {
                if (typeof v1 == 'string') {
                  net.typoflash.datahandling.SWX.stringToJson(v1);
                } else {
                  net.typoflash.datahandling.SWX.json += v1;
                }
              }
            }
            net.typoflash.datahandling.SWX.json += ', ';
            ++v2;
          }
          net.typoflash.datahandling.SWX.json = net.typoflash.datahandling.SWX.json.substr(0, net.typoflash.datahandling.SWX.json.length - 2);
          net.typoflash.datahandling.SWX.json += ']';
        };

        v1.stringToJson = function (data) {
          var v3 = data.length;
          net.typoflash.datahandling.SWX.json += '"';
          var v2 = 0;
          while (v2 < v3) {
            var v1 = data.charAt(v2);
            if (v1 >= ' ') {
              if (v1 == '\\' || v1 == '"' || v1 == '\'') {
                net.typoflash.datahandling.SWX.json += '\\';
              }
              net.typoflash.datahandling.SWX.json += v1;
            } else {
              switch (v1) {
                case '\b':
                  net.typoflash.datahandling.SWX.json += '\\b';
                  break;
                case '\f':
                  net.typoflash.datahandling.SWX.json += '\\f';
                  break;
                case '\n':
                  net.typoflash.datahandling.SWX.json += '\\n';
                  break;
                case '\r':
                  net.typoflash.datahandling.SWX.json += '\\r';
                  break;
                case '\t':
                  net.typoflash.datahandling.SWX.json += '\\t';
                  break;
                default:
                  v1 = v1.charCodeAt();
                  net.typoflash.datahandling.SWX.json += '\\u00' + (Math.floor(v1 / 16)).toString(16) + (v1 % 16).toString(16);
              }
            }
            v2 += 1;
          }
          net.typoflash.datahandling.SWX.json += '"';
        };

        v1.POST = 'POST';
        v1.GET = 'GET';
        v1.verbose = true;
        v1.json = '';
        v2._gateway = null;
        v2._testGateway = null;
        v2._encoding = net.typoflash.datahandling.SWX.POST;
        v2._resultObj = null;
        v2._resultFn = null;
        v2._progressObj = null;
        v2._progressFn = null;
        v2._errorObj = null;
        v2._errorFn = null;
        v2._debug = false;
        v2._timeout = 30;
        v2.addProperty('debug', function () {}, v2.__set__debug);
        v2.addProperty('encoding', function () {}, v2.__set__encoding);
        v2.addProperty('error', function () {}, v2.__set__error);
        v2.addProperty('gateway', function () {}, v2.__set__gateway);
        v2.addProperty('name', v2.__get__name, v2.__set__name);
        v2.addProperty('progress', function () {}, v2.__set__progress);
        v2.addProperty('result', function () {}, v2.__set__result);
        v2.addProperty('testGateway', function () {}, v2.__set__testGateway);
        v2.addProperty('timeout', function () {}, v2.__set__timeout);
        ASSetPropFlags(net.typoflash.datahandling.SWX.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 339 __Packages.net.typoflash.base.MenuBase {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.base) {
        _global.net.typoflash.base = new Object();
      }
      if (!_global.net.typoflash.base.MenuBase) {
        var v1 = function () {
          super();
          this._disablePhysicalConfig = true;
          this.nodeFromRootline = {};
          this.nodeFromUid = {};
          this.nodeFromAlias = {};
          this.target = '_flash';
          this.menuId = this._name;
          this.menuData = null;
          if (this.FEloginStatus == null) {
            this.FEloginStatus = false;
          }
          if (this.useDynamicFonts) {
            _global.TF.FONT_MANAGER.addEventListener('onLastFontRegister', this);
          }
        };

        net.typoflash.base.MenuBase = v1;
        net.typoflash.base.MenuBase extends net.typoflash.base.Configurable;
        var v2 = v1.prototype;
        v2._onLoad = function () {
          var v4 = new net.typoflash.datahandling.MD5();
          var v3 = v4.encrypt(String(this));
          this._TFglue.__set__key(this._TFeditorClass + '_' + v3.substr(v3.length - 5, 5));
          if (_global.TF.CONTENT_RENDERING == null) {
            _global.TF.CONTENT_RENDERING = net.typoflash.ContentRendering.global;
          }
          _global.TF.CORE_EVENTS.addEventListener('onMenuItemActivated', this);
          _global.TF.CONTENT_RENDERING.addEventListener('onGetMenu', this);
          _global.TF.CONTENT_RENDERING.addEventListener('onSetLanguage', this);
          _global.TF.CONTENT_RENDERING.registerMenu(this);
          if (_global.TF.CONTENT_RENDERING.getHtmlVar(this._TFkey, 'rootPid') > 0) {
            this.rootPid = _global.TF.CONTENT_RENDERING.getHtmlVar(this._TFkey, 'rootPid');
            net.typoflash.utils.Debug.trace('Root pid for menu ' + this._TFkey + ' from html: ' + this.rootPid);
          }
          this.rootObj = {};
          this.rootObj.id = this.rootPid;
          this.rootObj.getRecords = _global.TF.CONF.MOTHERLOAD.getRecords;
          this.rootObj.wrap = _global.TF.CONF.PAGE.wrap;
          _global.TF.CONF.MOTHERLOAD.pObj = this.rootObj;
          if (this.autoload) {
            this.refresh();
          }
          this.init();
        };

        v2.setGateway = function (str) {
          this.gateway = str;
        };

        v2.setRootPid = function (pid) {
          this.rootPid = pid;
        };

        v2.onClick = function (node) {
          var v3 = node;
          if (node.attributes.doktype == 4) {
            if (node.attributes.shortcut > 0 && node.attributes.shortcut_mode >= 1) {
              v3 = (this.menuXML.getNodeBy('attributes.uid', node.attributes.shortcut)).childNodes[0];
            } else {
              if (node.attributes.shortcut > 0) {
                v3 = this.menuXML.getNodeBy('attributes.uid', node.attributes.shortcut);
              } else {
                if (node.attributes.shortcut_mode >= 1) {
                  v3 = node.childNodes[0];
                } else {}
              }
            }
          }
          if (this.getPageType && v3.attributes.uid > 0) {
            if (v3.attributes.doktype != 3) {
              var v6 = {};
              v6.id = v3.attributes.uid;
              _global.TF.CONTENT_RENDERING.getPage(v6);
            } else {
              if (v3.attributes.doktype == 3 && v3.attributes.url.length > 0) {
                if (v3.attributes.target.length > 1) {
                  var v7 = v3.attributes.target;
                } else {
                  var v7 = '_blank';
                }
                this.getURL(v3.attributes.url, v7);
              }
            }
          }
          if (this.target != '_flash') {
            this.getURL(_global.TF.HOST_URL + '?id=' + v3.attributes.uid + '&L=' + _global.TF.LANGUAGE, this.target);
          }
          this.activeNode = v3;
          var v5 = {};
          v5.type = 'onSetActive';
          v5.orgNode = node;
          v5.node = v5.orgNode;
          this.dispatchEvent(v5);
          v5 = {};
          v5.type = 'change';
          v5.node = node;
          o.target = this;
          this.dispatchEvent(v5);
          var o = {};
          o.node = node;
          o.target = this;
          o.type = 'onMenuItemActivated';
          _global.TF.CORE_EVENTS.dispatchEvent(o);
        };

        v2.onSetPage = function (o) {
          if (this.nodeFromUid[o.pObj.id] == this.activeNode) {
            var v3 = {};
            v3.type = 'onSetActive';
            v3.node = this.activeNode;
            this.dispatchEvent(v3);
            this.openRootline(v3);
          } else {
            if (this.nodeFromAlias[o.pObj.id] == this.activeNode && o.pObj.id.length > 0 && this.activeNode != null) {
              var v3 = {};
              v3.type = 'onSetActive';
              v3.node = this.activeNode;
              this.dispatchEvent(v3);
              this.openRootline(v3);
            } else {
              if (this.nodeFromUid[o.pObj.id] != null) {
                this.activeNode = this.nodeFromUid[o.pObj.id];
                var v3 = {};
                v3.type = 'onSetActive';
                v3.node = this.activeNode;
                this.dispatchEvent(v3);
                this.openRootline(v3);
              } else {
                this.activeNode = null;
                var v3 = {};
                v3.type = 'onSetActive';
                this.dispatchEvent(v3);
                this.reset(v3);
              }
            }
          }
        };

        v2.onMenuItemActivated = function (obj) {
          if (obj.node.attributes.menuId != this.menuId) {
            if (obj.node.attributes.rootline == this.activeNode.attributes.rootline) {
              var v3 = {};
              v3.type = 'onSetActive';
              v3.node = this.activeNode;
              v3.orgNode = obj.node;
              this.dispatchEvent(v3);
              this.openRootline(v3);
            } else {
              if (this.nodeFromRootline[obj.node.attributes.rootline] != null) {
                this.activeNode = this.nodeFromRootline[obj.node.attributes.rootline];
                var v3 = {};
                v3.type = 'onSetActive';
                v3.node = this.activeNode;
                v3.orgNode = obj.node;
                this.dispatchEvent(v3);
                this.openRootline(v3);
              } else {
                if (this.nodeFromUid[obj.node.attributes.uid] != null && this.nodeFromUid[obj.node.attributes.uid] != this.menuXML.firstChild) {
                  this.activeNode = this.nodeFromUid[obj.node.attributes.uid];
                  var v3 = {};
                  v3.type = 'onSetActive';
                  v3.node = this.activeNode;
                  v3.orgNode = obj.node;
                  this.dispatchEvent(v3);
                  this.openRootline(v3);
                } else {
                  if (this.nodeFromAlias[obj.node.attributes.alias] != null && this.nodeFromUid[obj.node.attributes.uid] != this.menuXML.firstChild) {
                    this.activeNode = this.nodeFromAlias[obj.node.attributes.alias];
                    var v3 = {};
                    v3.type = 'onSetActive';
                    v3.node = this.activeNode;
                    v3.orgNode = obj.node;
                    this.dispatchEvent(v3);
                    this.openRootline(v3);
                  } else {
                    this.activeNode = null;
                    var v3 = {};
                    v3.type = 'onSetActive';
                    v3.orgNode = obj.node;
                    this.dispatchEvent(v3);
                    this.reset();
                  }
                }
              }
            }
          }
        };

        v2.onMenuItemOpened = function (obj) {};

        v2.onMenuItemClosed = function (obj) {};

        v2.onFELoginStatus = function (obj) {
          if (obj.status != this.FEloginStatus && obj.status != 'pending') {
            this.refresh();
            this.FEloginStatus = obj.status;
          }
        };

        v2.refresh = function () {
          var v3 = {};
          v3.id = this.rootPid;
          v3.menuId = this.menuId;
          v3.L = _global.TF.LANGUAGE;
          _global.TF.CONTENT_RENDERING.getMenu(v3);
        };

        v2.onSetLanguage = function (o) {
          this.close();
          this.refresh();
        };

        v2.onGetMenu = function (o) {
          if (o.data.menuId == this.menuId) {
            this.menuData = o.data;
            this.nodeFromRootline = {};
            this.nodeFromUid = {};
            this.nodeFromAlias = {};
            this.menuXML = this.array2xml(this.menuData);
            this.renderMenu();
          }
          o = {};
          o.type = 'onMenuParsed';
          o.target = this;
          _global.TF.CONTENT_RENDERING.dispatchEvent(o);
          if (this.activeNode.attributes.uid != _global.TF.CONTENT_RENDERING.page.HEADER.uid && _global.TF.CONTENT_RENDERING.page.HEADER.uid > 0) {
            o = {};
            o.pObj = {'id': _global.TF.CONTENT_RENDERING.page.HEADER.uid};
            this.onSetPage(o);
          } else {
            if (_global.TF.CONTENT_RENDERING.page.HEADER.uid > 0) {
              o = {};
              o.pObj = {'id': _global.TF.CONTENT_RENDERING.page.HEADER.uid};
              this.onSetPage(o);
            } else {
              net.typoflash.utils.Debug.trace('Menu doesnt know what to show. ContentRendering.page.HEADER.uid: ' + _global.TF.CONTENT_RENDERING.page.HEADER.uid);
            }
          }
          if (_global.TF.CONF.MOTHERLOAD.mode == 1) {
            net.typoflash.utils.Debug.trace('MenuBase requesting motherload. MOTHERLOAD.mode: 1');
            _global.TF.CONTENT_RENDERING.getMotherload(this.rootObj);
          }
        };

        v2.onGetMotherload = function (m) {
          if (this.activeNode.attributes.uid != _global.TF.CONTENT_RENDERING.page.HEADER.uid && _global.TF.CONTENT_RENDERING.page.HEADER.uid > 0) {
            var v3 = {};
            v3.pObj = {'id': _global.TF.CONTENT_RENDERING.page.HEADER.uid};
            this.onSetPage(v3);
          }
          if (this._cacheCleared) {
            this.onClick(this.activeNode);
            this._cacheCleared = false;
          }
        };

        v2.isInActiveRootline = function (node) {
          return this.activeNode.attributes.rootline.indexOf(node.attributes.rootline) == 0;
        };

        v2.renderMenu = function (o) {
          this.renderBtns(this.mainSymbol, this.menuXML.firstChild.childNodes);
        };

        v2.renderBtns = function (symbol, nodes) {
          var v9 = this.wTot / nodes.length;
          var v8 = this.createEmptyMovieClip('holder', 0);
          var v3 = null;
          var v4 = 0;
          while (v4 < nodes.length) {
            nodes[v4].attributes.mc = v8.attachMovie(symbol, 'mc' + nodes[v4].attributes.rootline, v8.getNextHighestDepth());
            v3 = nodes[v4].attributes.mc;
            v3._x = v9 * v4;
            v3._y = 0;
            v3.titleTxt.autoSize = 'LEFT';
            v3.titleTxt.text = nodes[v4].attributes[this.titleField];
            if (this.useDynamicFonts) {
              _global.TF.FONT_MANAGER.applyTextFormatByReferenceName(_global.TF.FONT_LIST[this.dynamicFontId].font, v3.titleTxt, this.applyFontFormat);
            }
            v3.mRoot = this;
            v3.menuId = this.menuId;
            v3.rootline = nodes[v4].attributes.rootline;
            this.addEventListener('onSetActive', v3);
            v3.id = v4;
            v3.node = nodes[v4];
            v3.onRelease = function () {
              this.mRoot.onClick(this.node);
            };

            v3.onRollOver = function () {
              var v2 = {};
              v2.type = 'onRolledOver';
              v2.node = this.node;
              this.mRoot.dispatchEvent(v2);
            };

            v3.onRollOut = function () {
              var v2 = {};
              v2.type = 'onRolledOut';
              v2.node = this.node;
              this.mRoot.dispatchEvent(v2);
            };

            v3.onSetActive = function (o) {
              if (o.node == this.node) {
                this.bg.states.gotoAndStop('active');
              } else {
                if (this.mRoot.isInActiveRootline(this.node)) {
                  this.bg.states.gotoAndStop('active');
                } else {
                  this.bg.states.gotoAndStop('passive');
                }
              }
            };

            var v7 = this.isInActiveRootline(v3.node);
            if (v7) {
              v3.bg.states.gotoAndStop('active');
            } else {
              v3.bg.states.gotoAndStop('passive');
            }
            ++v4;
          }
        };

        v2.openRootline = function () {};

        v2.reset = function () {};

        v2.onClearCache = function (o) {
          net.typoflash.utils.Debug.trace('Becuase you cleared cache menu is refreshing');
          this._cacheCleared = true;
          this.refresh();
        };

        v2.getMenuXML = function () {
          return this.menuXML;
        };

        v2.setMenuXML = function (x) {
          this.menuXML = x;
        };

        v2.array2xml = function (a) {
          var v3 = new net.typoflash.xml.XXX();
          var v2 = {};
          v2.subpages = [];
          v2.subpages[0] = a;
          if (a.subpages.length > 0) {
            v3.firstChild = this.convertSubpages(v2.subpages, v3, '');
          }
          return v3;
        };

        v2.convertSubpages = function (p, x, rLine) {
          var v4;
          var v5;
          var v2 = 0;
          while (v2 < p.length) {
            v4 = new XMLNode(1, 'item');
            for (var v6 in p[v2]) {
              if (v6 != 'subpages' && v6 != 'serviceName') {
                v4.attributes[v6] = p[v2][v6];
              }
            }
            if (p[v2].label == null && p[v2].title != null) {
              v4.attributes.label = p[v2].title;
            }
            v4.attributes.rootline = rLine + '_' + p[v2].uid;
            v5 = v4.attributes.rootline;
            this.nodeFromRootline[v5] = v4;
            if (this.nodeFromUid[p[v2].uid] == null) {
              this.nodeFromUid[p[v2].uid] = v4;
            }
            if (this.nodeFromAlias[p[v2].alias] == null && p[v2].alias.length > 0) {
              this.nodeFromAlias[p[v2].alias] = v4;
            }
            v4.attributes.menuId = this.menuId;
            v4.attributes.mRoot = this;
            if (p[v2].subpages.length > 0) {
              v4 = this.convertSubpages(p[v2].subpages, v4, v5);
            }
            x.appendChild(v4);
            this.addEventListener('onSetActive', v4);
            v4.onSetActive = function (n) {
              if (n.node == this) {
                this.attributes.isActive = 1;
              } else {
                this.attributes.isActive = 0;
                if (this.attributes.mRoot.isInActiveRootline(this)) {
                  this.attributes.isOpen = 1;
                }
              }
            };

            ++v2;
          }
          return x;
        };

        v2.getRealTarget = function (node) {
          var v3 = node;
          if (node.attributes.doktype == 4) {
            if (node.attributes.shortcut > 0 && node.attributes.shortcut_mode >= 1) {
              v3 = (this.menuXML.getNodeBy('attributes.uid', node.attributes.shortcut)).childNodes[0];
              return v3;
            }
            if (node.attributes.shortcut > 0) {
              v3 = this.menuXML.getNodeBy('attributes.uid', node.attributes.shortcut);
              return v3;
            }
            if (node.attributes.shortcut_mode >= 1) {
              v3 = node.childNodes[0];
              return v3;
            }
          }
          return v3;
        };

        v2.init = function () {};

        v2.onLastFontRegister = function (o) {
          if (!this.useDynamicFonts) {
            return undefined;
          }
          net.typoflash.utils.Debug.trace('Menu font: ' + _global.TF.FONT_LIST[_global.TF.CONF.MENU.dynamicFontId].font);
          this.loadedFonts = true;
          if (this.menuXML != null) {
            this.renderMenu();
          }
        };

        v2._cacheCleared = false;
        v2._TFeditorClass = 'Menu';
        v2.loadedFonts = false;
        v2.useDynamicFonts = false;
        v2.applyFontFormat = true;
        ASSetPropFlags(net.typoflash.base.MenuBase.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 340 __Packages.net.typoflash.editor.Editor {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.editor) {
        _global.net.typoflash.editor = new Object();
      }
      if (!_global.net.typoflash.editor.Editor) {
        var v1 = function () {
          super();
        };

        net.typoflash.editor.Editor = v1;
        net.typoflash.editor.Editor extends MovieClip;
        var v2 = v1.prototype;
        v2.onLoad = function () {
          if (!this.glue.__get__disablePhysicalConfig()) {
            this.transformItem = _global.TF.EDITOR.transformManager.addItem(this.glue);
          }
          _global.TF.CORE_EVENTS.addEventListener('onEditStatus', this);
          _global.TF.CONTENT_EDITING.addEventListener('onStorePageData', this);
          _global.TF.CONTENT_EDITING.addEventListener('onDeletePageData', this);
          _global.TF.CONTENT_EDITING.addEventListener('onExternalEdit', this);
          _global.TF.CONTENT_EDITING.addEventListener('onStoreLinkedRecord', this);
          net.typoflash.utils.Debug.trace('Just ATTACHEED NEW EDITOR FOR ' + this.glue.__get__key());
          if (this.glue.__get__editorClass() == 'Menu') {
            _global.TF.CONTENT_EDITING.addEventListener('onGetComponents', this);
          }
          this['menu' + this.glue.__get__editorClass()]();
          var v3 = {};
          v3.root = this;
          v3.change = function (c) {
            if (typeof c.node.attributes.func == 'function') {
              (net.typoflash.utils.Proxy.create(this.root.glue.mc, c.node.attributes.func, c.node))();
            } else {
              if (typeof this.root[c.node.attributes.data] == 'function') {
                this.root[c.node.attributes.data]();
              } else {
                if (typeof this.root[c.node.parentNode.attributes.data] == 'function') {
                  this.root[c.node.parentNode.attributes.data](c.node);
                } else {
                  if (typeof this.root[c.node.attributes.func] == 'function') {
                    this.root[c.node.attributes.func](c.node);
                  } else {}
                }
              }
            }
          };

          this.filemenu.addEventListener('change', v3);
          this.filemenu.addEventListener('onDropdownRollOver', this);
          this.filemenu.addEventListener('onDropdownRollOut', this);
          this.filemenu.depthManager = _global.TF.EDITOR.depthManager;
          this.filemenu.showIcons = true;
          this.filemenu.iconInset = 16;
          this.filemenu.useDynamicFonts = false;
          this.filemenu.setDataProvider(this.filemenuItem);
          this.filemenu.setSize(200, 200);
          this.showBoundingBox();
        };

        v2.onGetComponents = function (c) {
          net.typoflash.utils.Debug.trace('onGetComponents ' + _global.TF.COMPONENT_LIST.length);
          this['menu' + this.glue.__get__editorClass()]();
        };

        v2.onDropdownRollOut = function (c) {};

        v2.showBoundingBox = function () {
          this.transformItem.showHandles();
        };

        v2.hideBoundingBox = function () {
          this.transformItem.deselect();
        };

        v2.editRecord = function (node) {
          var v3 = node.attributes.data;
          var v4 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[' + this.glue.recordTable + '][' + v3.uid + ']=edit&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v6 = 590;
          var v5 = 500;
          this.getURL('javascript:popup(\'' + v4 + '\',' + v6 + ',' + v5 + ')', '_self');
        };

        v2.newRecord = function () {
          var v3 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[' + this.glue.recordTable + '][' + this.glue.recordPid + ']=new&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v5 = 590;
          var v4 = 500;
          this.getURL('javascript:popup(\'' + v3 + '\',' + v5 + ',' + v4 + ')', '_self');
        };

        v2.listRecords = function () {
          var v3 = _global.TF.HOST_URL + 'typo3/db_list.php?id=' + this.glue.recordPid + '&table=' + this.glue.recordTable + '&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v5 = 590;
          var v4 = 500;
          this.getURL('javascript:popup(\'' + v3 + '\',' + v5 + ',' + v4 + ')', '_self');
        };

        v2.editText = function (node) {
          var v3 = node.attributes.data;
          var v4 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[tt_content][' + v3.uid + ']=edit&columnsOnly=bodytext%2C%20rte_enabled&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v6 = 590;
          var v5 = 500;
          this.getURL('javascript:popup(\'' + v4 + '\',' + v6 + ',' + v5 + ')', '_self');
        };

        v2.addTextRecord = function () {
          var v3 = {};
          v3.uid = (this.glue.__get__data()).uid;
          v3.table = 'tt_content';
          v3.record = {'pid': _global.TF.PID, 'CType': 'text', 'header': this.glue.__get__key()};
          _global.TF.CONTENT_EDITING.storeLinkedRecord(v3);
        };

        v2.addComponent = function () {
          _global.TF.EDITOR.addComponent(this.glue);
        };

        v2.addMedia = function () {
          var v6 = (this.glue.__get__data()).uid;
          var v3 = _global.TF.HOST_URL + 'typo3conf/ext/dam/mod_file/index.php?returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v5 = 590;
          var v4 = 500;
          this.getURL('javascript:popup(\'' + v3 + '\',' + v5 + ',' + v4 + ')', '_self');
        };

        v2.onExternalEdit = function (o) {
          net.typoflash.utils.Debug.trace('onExternalEdit: ' + o.data);
          if (o.data == this.glue.__get__key()) {
            _global.TF.CONTENT_RENDERING.clearCache();
            if (this.glue.__get__editorClass() == 'Template') {
              var v3 = _global.TF.HOST_URL + '?no_cache=1&random=' + getTimer() + '#L=' + _global.TF.LANGUAGE + '&id=' + _global.TF.PID;
              this.getURL(v3, '_top');
            } else {
              if (this.glue.__get__editorClass() == 'Frame') {
                _global.TF.CONTENT_EDITING.getComponents();
              }
            }
            this.close();
          }
        };

        v2.loadSpecialEditor = function (node) {
          var v3 = {'vScrollPolicy': 'auto', 'hScrollPolicy': 'no'};
          _global.TF.EDITOR.depthManager.newWindow({'title': node.attributes.label, 'type': 'ScrollPane', 'contentPath': _global.TF.HOST_URL + node.attributes.data.path, 'containerInitObj': node.attributes.data, 'w': 340, 'h': 400, 'resizeEnabled': true, 'closeEnabled': true, 'minimiseEnabled': true});
        };

        v2.editMediaCategory = function (node) {
          var v4 = node.attributes.data;
          var v3 = (v4.split('_dam_cat_'))[1];
          var v5 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[tx_dam_cat][' + v3 + ']=edit&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v7 = 590;
          var v6 = 500;
          this.getURL('javascript:popup(\'' + v5 + '\',' + v7 + ',' + v6 + ')', '_self');
        };

        v2.editMedia = function (node) {
          var v4 = node.attributes.data.uid;
          var v3 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[tx_dam][' + v4 + ']=edit&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v6 = 590;
          var v5 = 500;
          this.getURL('javascript:popup(\'' + v3 + '\',' + v6 + ',' + v5 + ')', '_self');
        };

        v2.toggleMediaCategory = function (node) {
          var v6 = node.attributes.data;
          var v4 = (this.glue.__get__data()).media_category.split(',');
          var v5 = [];
          var v3 = 0;
          while (v3 < v4.length) {
            if (v4[v3] != v6 && v4[v3] != '') {
              v5.push(v4[v3]);
            }
            ++v3;
          }
          if (String(node.attributes.selected) == 'true') {
            v5.push(v6);
          }
          (this.glue.__get__data()).media_category = v5.join(',');
          if (this.glue.__get__editor() == 'Component') {
            var v7 = {'uid': (this.glue.__get__data()).uid, 'media_category': (this.glue.__get__data()).media_category, 'callback': 'handleSetMediaCats', 'id': this.glue.__get__key()};
            _global.TF.CONTENT_EDITING.setMediaCategories(v7);
          } else {
            _global.TF.CONTENT_EDITING.storePageData(this.glue.__get__key(), this.glue.__get__data());
          }
        };

        v2.handleSetMediaCats = function (o) {
          if (o.data.id == this.glue.__get__key()) {
            net.typoflash.utils.Debug.trace('handleSetMediaCats: selected ' + o);
          }
        };

        v2.editTemplateRecord = function (node) {
          var v4 = _global.TF.CONTENT_RENDERING.page.TEMPLATE.uid;
          var v3 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[tx_typoflash_template][' + v4 + ']=edit&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v6 = 590;
          var v5 = 500;
          this.getURL('javascript:popup(\'' + v3 + '\',' + v6 + ',' + v5 + ')', '_self');
        };

        v2.editComponentRecord = function (node) {
          var v4 = (this.glue.__get__data()).componentRecord.uid;
          var v3 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[tx_typoflash_component][' + v4 + ']=edit&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v6 = 590;
          var v5 = 500;
          this.getURL('javascript:popup(\'' + v3 + '\',' + v6 + ',' + v5 + ')', '_self');
        };

        v2.editFlashContentRecord = function (node) {
          var v4 = (this.glue.__get__data()).uid;
          var v3 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[tx_typoflash_content][' + v4 + ']=edit&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v6 = 590;
          var v5 = 500;
          this.getURL('javascript:popup(\'' + v3 + '\',' + v6 + ',' + v5 + ')', '_self');
        };

        v2.onStoreLinkedRecord = function (o) {
          var v3 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[' + o.data.table + '][' + o.data.record.uid + ']=edit&columnsOnly=bodytext%2C%20rte_enabled&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + this.glue.__get__key();
          var v6 = 590;
          var v5 = 500;
          this.getURL('javascript:popup(\'' + v3 + '\',' + v6 + ',' + v5 + ')', '_self');
          net.typoflash.utils.Debug.trace(o);
        };

        v2.storePageData = function (o) {
          this.glue.storePageData(o);
        };

        v2.storeTemplateData = function (o) {
          this.glue.storeTemplateData(o);
        };

        v2.deletePageData = function () {
          var v3 = _global.TF.EDITOR.depthManager.confirm('Do you really want to delete all settings for this page?');
          v3.accept = net.typoflash.utils.Proxy.create(_global.TF.CONTENT_EDITING, _global.TF.CONTENT_EDITING.deletePageData, this.glue.__get__key(), _global.TF.PID);
        };

        v2.deleteTemplateData = function () {
          _global.TF.CONTENT_EDITING.deletePageData(this.glue.__get__key());
        };

        v2.onDeletePageData = function (o) {
          if (o.data.pObj.key == this.glue.__get__key() && o.status == true) {
            (this.glue.__get__pen()).bg.gotoAndPlay('saved');
            this.glue.unsaved = false;
            this.close();
          }
        };

        v2.onStorePageData = function (o) {
          if (o.data.pObj.key == this.glue.__get__key() && o.status == true) {
            (this.glue.__get__pen()).bg.gotoAndPlay('saved');
            this.glue.unsaved = false;
            this.close();
          }
        };

        v2.setRootPage = function (o) {
          var v3 = {};
          v3.rootPid = o.attributes.data;
          _global.TF.CONTENT_EDITING.storeHtmlVars(this.glue.__get__key(), v3);
        };

        v2.openDropdownMenu = function () {
          this.filemenu.openDropdownMenu(this.filemenuItem[0]);
        };

        v2.closeDropdownMenu = function () {
          this.filemenu.close();
        };

        v2.close = function () {
          Mouse.show();
          this.closeDropdownMenu();
          this.transformItem.destroy();
          _global.TF.CORE_EVENTS.removeEventListener('onEditStatus', this);
          _global.TF.CONTENT_EDITING.removeEventListener('onStorePageData', this);
          _global.TF.CONTENT_EDITING.removeEventListener('onDeletePageData', this);
          _global.TF.CONTENT_EDITING.removeEventListener('onExternalEdit', this);
          _global.TF.CONTENT_EDITING.removeEventListener('onStoreLinkedRecord', this);
          _global.TF.CONTENT_EDITING.removeEventListener('onGetComponents', this);
          this.removeMovieClip();
        };

        v2.onEditStatus = function (o) {
          if (o.status) {
          } else {
            this.close();
          }
        };

        v2.setSize = function (w, h) {
          this.frame._width = w;
          this.frame._height = h;
          this.tools._y = this.frame._height;
          this.tools._x = this.frame._width;
        };

        v2.rotate = function (r) {
          this.frame._rotation = r;
        };

        v2.moveTo = function (x, y) {
          this._x = x;
          this._y = y;
        };

        v2.menuMC = function () {
          this.filemenuItem = [{'label': 'MC: ' + (this.glue.__get__mc())._name, 'data': 'doNothing', 'enabled': false}];
          if (this.glue.specialEditor != null) {
            var v12 = {'label': this.glue.specialEditor.label, 'func': 'loadSpecialEditor', 'data': this.glue.specialEditor, 'separatorBefore': 'true'};
            this.filemenuItem.push(v12);
          }
          if (this.glue.__get__confEditor() != null) {
            if ((this.glue.__get__confEditor()).type == net.typoflash.base.EditorDefinition.TYPE_EXTERNAL) {
              v12 = {'label': (this.glue.__get__confEditor()).label, 'func': 'loadConfEditor', 'data': this.glue.__get__confEditor(), 'separatorBefore': 'true'};
            } else {
              v12 = {'label': (this.glue.__get__confEditor()).label, 'data': 'doNothing', 'subdata': (this.glue.__get__confEditor()).form, 'separatorBefore': 'true'};
            }
            this.filemenuItem.push(v12);
          }
          if ((this.glue.__get__editableFields()).Records) {
            if (this.glue.recordType == 'Text') {
              var v10 = [];
              var v4 = 0;
              while (v4 < (this.glue.__get__data()).records.length) {
                if ((this.glue.__get__data()).records[v4].bodytext != null) {
                  v10.push({'label': (this.glue.__get__data()).records[v4].bodytext.substr(0, 20) + '...', 'data': (this.glue.__get__data()).records[v4]});
                }
                ++v4;
              }
              v10.push({'label': 'Add text', 'data': 'addTextRecord', 'separatorBefore': 'true'});
              this.filemenuItem.push({'label': 'Edit text', 'data': 'editText', 'icon': 'icon_new', 'separatorBefore': 'true', 'subdata': v10});
            } else {
              var v9 = [];
              v9.push({'label': 'New ' + this.glue.recordLabel, 'data': 'newRecord'});
              v9.push({'label': 'List all', 'data': 'listRecords', 'separatorBefore': 'true'});
              var v4 = 0;
              while (v4 < (this.glue.__get__data()).records.length) {
                if ((this.glue.__get__data()).records[v4].name != null) {
                  v9.push({'label': (this.glue.__get__data()).records[v4].name.substr(0, 20) + '...', 'data': (this.glue.__get__data()).records[v4], 'separatorBefore': v4 == 0});
                }
                ++v4;
              }
              this.filemenuItem.push({'label': 'Edit ' + this.glue.recordLabel, 'data': 'editRecord', 'icon': 'icon_new', 'separatorBefore': 'true', 'subdata': v9});
            }
          }
          if ((this.glue.__get__editableFields()).MediaCategory) {
            this.mediaCategories = _global.TF.MEDIA_CATEGORIES.dataProvider;
            var v6 = (this.glue.__get__data()).media_category.split(',');
            var v11 = [];
            var v5 = 0;
            while (v5 < v6.length) {
              v11.push({'label': _global.TF.MEDIA_CATEGORIES.flatlist[v6[v5]].title, 'func': 'editMediaCategory', 'icon': 'icon_new', 'separatorBefore': 'true', 'data': v6[v5]});
              this.mediaCategories.selected = v6[v5];
              ++v5;
            }
            this.filemenuItem.push({'label': 'Select media categories', 'data': 'nothing', 'icon': 'icon_new', 'separatorBefore': 'true', 'subdata': this.mediaCategories.data.subdata[0].subdata});
            this.filemenuItem.push({'label': 'Edit selected categories', 'func': 'editMediaCategory', 'icon': 'icon_new', 'separatorBefore': 'true', 'data': 'doNothing', 'subdata': v11});
          }
          if ((this.glue.__get__editableFields()).Media) {
            var v7 = [];
            var v3 = 0;
            while (v3 < (this.glue.__get__data()).mediaCategoryFlatlist.length) {
              v7.push({'label': this.glue.getLanguage((this.glue.__get__data()).mediaCategoryFlatlist[v3], 'title'), 'func': 'editMedia', 'data': (this.glue.__get__data()).mediaCategoryFlatlist[v3].lang[0]});
              ++v3;
            }
            v3 = 0;
            while (v3 < (this.glue.__get__data()).mediaRecords.length) {
              v7.push({'label': this.glue.getLanguage((this.glue.__get__data()).mediaRecords[v3], 'title'), 'func': 'editMedia', 'data': (this.glue.__get__data()).mediaRecords[v3].lang[0]});
              ++v3;
            }
            v7.push({'label': 'Add media', 'data': 'addMedia', 'separatorBefore': 'true'});
            this.filemenuItem.push({'label': 'Edit media', 'icon': 'icon_new', 'separatorBefore': 'true', 'data': 'doNothing', 'subdata': v7});
          }
          this.filemenuItem.push({'label': 'Save settings...', 'data': 'saveSettings', 'separatorBefore': 'true', 'subdata': [{'label': 'for this page', 'data': 'storePageData'}, {'label': 'for all pages', 'data': 'storeTemplateData'}]});
          this.filemenuItem.push({'label': 'Delete settings...', 'data': 'deleteSettings', 'subdata': [{'label': 'for this page', 'data': 'deletePageData'}, {'label': 'for all pages', 'data': 'deleteTemplateData'}]});
          this.filemenuItem.push({'label': 'Revert', 'data': 'revert'});
          this.filemenuItem.push({'label': 'Close', 'data': 'close', 'separatorBefore': 'true'});
        };

        v2.menuComponent = function () {
          this.filemenuItem = [{'label': 'Comp ' + (this.glue.__get__data()).uid + ': ' + (this.glue.__get__data()).name, 'data': 'doNothing', 'enabled': false}];
          if (this.glue.specialEditor != null) {
            var v12 = {'label': this.glue.specialEditor.label, 'func': 'loadSpecialEditor', 'data': this.glue.specialEditor, 'separatorBefore': 'true'};
            this.filemenuItem.push(v12);
          }
          if (this.glue.__get__confEditor() != null) {
            if ((this.glue.__get__confEditor()).type == net.typoflash.base.EditorDefinition.TYPE_EXTERNAL) {
              v12 = {'label': (this.glue.__get__confEditor()).label, 'func': 'loadConfEditor', 'data': this.glue.__get__confEditor(), 'separatorBefore': 'true'};
            } else {
              v12 = {'label': (this.glue.__get__confEditor()).label, 'data': 'doNothing', 'subdata': (this.glue.__get__confEditor()).form, 'separatorBefore': 'true'};
            }
            this.filemenuItem.push(v12);
          }
          if ((this.glue.__get__editableFields()).Records) {
            if (this.glue.recordType == 'Text') {
              var v10 = [];
              var v4 = 0;
              while (v4 < (this.glue.__get__data()).records.length) {
                if ((this.glue.__get__data()).records[v4].bodytext != null) {
                  v10.push({'label': (this.glue.__get__data()).records[v4].bodytext.substr(0, 20) + '...', 'data': (this.glue.__get__data()).records[v4]});
                }
                ++v4;
              }
              v10.push({'label': 'Add text', 'data': 'addTextRecord', 'separatorBefore': 'true'});
              this.filemenuItem.push({'label': 'Edit text', 'data': 'editText', 'icon': 'icon_new', 'separatorBefore': 'true', 'subdata': v10});
            } else {
              var v9 = [];
              v9.push({'label': 'New ' + this.glue.recordLabel, 'data': 'newRecord'});
              v9.push({'label': 'List all', 'data': 'listRecords', 'separatorBefore': 'true'});
              var v4 = 0;
              while (v4 < (this.glue.__get__data()).records.length) {
                if ((this.glue.__get__data()).records[v4].name != null) {
                  v9.push({'label': (this.glue.__get__data()).records[v4].name.substr(0, 20) + '...', 'data': (this.glue.__get__data()).records[v4], 'separatorBefore': v4 == 0});
                }
                ++v4;
              }
              this.filemenuItem.push({'label': 'Edit ' + this.glue.recordLabel, 'data': 'editRecord', 'icon': 'icon_new', 'separatorBefore': 'true', 'subdata': v9});
            }
          }
          if ((this.glue.__get__editableFields()).MediaCategory) {
            this.mediaCategories = _global.TF.MEDIA_CATEGORIES.dataProvider;
            var v6 = (this.glue.__get__data()).media_category.split(',');
            var v11 = [];
            var v5 = 0;
            while (v5 < v6.length) {
              v11.push({'label': _global.TF.MEDIA_CATEGORIES.flatlist[v6[v5]].title, 'func': 'editMediaCategory', 'icon': 'icon_new', 'separatorBefore': 'true', 'data': v6[v5]});
              this.mediaCategories.selected = v6[v5];
              ++v5;
            }
            this.filemenuItem.push({'label': 'Select media categories', 'data': 'nothing', 'icon': 'icon_new', 'separatorBefore': 'true', 'subdata': this.mediaCategories.data.subdata[0].subdata});
            this.filemenuItem.push({'label': 'Edit selected categories', 'func': 'editMediaCategory', 'icon': 'icon_new', 'separatorBefore': 'true', 'data': 'doNothing', 'subdata': v11});
          }
          if ((this.glue.__get__editableFields()).Media) {
            var v7 = [];
            var v3 = 0;
            while (v3 < (this.glue.__get__data()).mediaCategoryFlatlist.length) {
              v7.push({'label': this.glue.getLanguage((this.glue.__get__data()).mediaCategoryFlatlist[v3], 'title'), 'func': 'editMedia', 'data': (this.glue.__get__data()).mediaCategoryFlatlist[v3].lang[0]});
              ++v3;
            }
            v3 = 0;
            while (v3 < (this.glue.__get__data()).mediaRecords.length) {
              v7.push({'label': this.glue.getLanguage((this.glue.__get__data()).mediaRecords[v3], 'title'), 'func': 'editMedia', 'data': (this.glue.__get__data()).mediaRecords[v3].lang[0]});
              ++v3;
            }
            v7.push({'label': 'Add media', 'data': 'addMedia', 'separatorBefore': 'true'});
            this.filemenuItem.push({'label': 'Edit media', 'icon': 'icon_new', 'separatorBefore': 'true', 'data': 'doNothing', 'subdata': v7});
          }
          this.filemenuItem.push({'label': 'Save settings', 'data': 'storePageData', 'separatorBefore': 'true'});
          this.filemenuItem.push({'label': 'Delete settings', 'data': 'deletePageData'});
          this.filemenuItem.push({'label': 'Revert', 'data': 'revert'});
          this.filemenuItem.push({'label': 'Cut component', 'data': 'cutComponent', 'separatorBefore': 'true'});
          this.filemenuItem.push({'label': 'Copy component', 'data': 'copyComponent'});
          this.filemenuItem.push({'label': 'Delete component', 'data': 'deleteComponent'});
          var v13 = [{'label': 'Flash page content', 'data': 'editFlashContentRecord'}, {'label': 'Flash component', 'data': 'editComponentRecord'}];
          this.filemenuItem.push({'label': 'Edit...', 'data': 'doNothing', 'separatorBefore': 'true', 'subdata': v13});
          this.filemenuItem.push({'label': 'Close', 'data': 'close', 'separatorBefore': 'true'});
        };

        v2.menuMenu = function () {
          this.filemenuItem = [{'label': this.glue.__get__key(), 'data': 'doNothing', 'enabled': false}];
          if (this.glue.specialEditor != null) {
            var v3 = {'label': this.glue.specialEditor.label, 'func': 'loadSpecialEditor', 'data': this.glue.specialEditor, 'separatorBefore': 'true'};
            this.filemenuItem.push(v3);
          }
          if (this.glue.__get__confEditor() != null) {
            if ((this.glue.__get__confEditor()).type == net.typoflash.base.EditorDefinition.TYPE_EXTERNAL) {
              v3 = {'label': (this.glue.__get__confEditor()).label, 'func': 'loadConfEditor', 'data': this.glue.__get__confEditor(), 'separatorBefore': 'true'};
            } else {
              v3 = {'label': (this.glue.__get__confEditor()).label, 'data': 'doNothing', 'subdata': (this.glue.__get__confEditor()).form, 'separatorBefore': 'true'};
            }
            this.filemenuItem.push(v3);
          }
          var v4 = [{'label': 'Set root page', 'data': 'doNothing', 'separatorBefore': 'true', 'subdata': _global.TF.ACCESSIBLE_PAGES.dataProvider}, {'label': 'Save settings...', 'data': 'saveSettings', 'separatorBefore': 'true', 'subdata': [{'label': 'for this page', 'data': 'storePageData'}, {'label': 'for all pages', 'data': 'storeTemplateData'}]}, {'label': 'Delete settings...', 'data': 'deleteSettings', 'subdata': [{'label': 'for this page', 'data': 'deletePageData'}, {'label': 'for all pages', 'data': 'deleteTemplateData'}]}, {'label': 'Revert', 'data': 'revert'}, {'label': 'Close', 'data': 'close', 'separatorBefore': 'true'}];
          this.filemenuItem = this.filemenuItem.concat(v4);
        };

        v2.menuFrame = function () {
          var v3 = [{'label': 'Add component', 'data': 'addComponent', 'separatorBefore': 'true'}];
          if (_global.TF.COMPONENT_LIST.length > 0) {
            v3 = _global.TF.COMPONENT_LIST.concat(v3);
          }
          if (_global.TF.CONTENT_EDITING.CLIPBOARD != null) {
            var v4 = {'label': 'Paste component', 'data': 'pasteComponent', 'icon': 'icon_paste'};
          } else {
            var v4 = {'label': 'Paste component', 'data': 'pasteComponent', 'icon': 'icon_paste', 'enabled': false};
          }
          this.filemenuItem = [{'label': 'Frame: ' + (this.glue.__get__mc())._name, 'data': 'doNothing', 'enabled': false}, {'label': 'New component', 'data': 'newComponent', 'icon': 'icon_new', 'separatorBefore': 'true', 'subdata': v3}, v4, {'label': 'Save settings...', 'data': 'saveSettings', 'separatorBefore': 'true', 'subdata': [{'label': 'for this page', 'data': 'storePageData'}, {'label': 'for all pages', 'data': 'storeTemplateData'}]}, {'label': 'Delete settings...', 'data': 'deleteSettings', 'subdata': [{'label': 'for this page', 'data': 'deletePageData'}, {'label': 'for all pages', 'data': 'deleteTemplateData'}]}, {'label': 'Revert', 'data': 'revert'}, {'label': 'Close', 'data': 'close', 'separatorBefore': 'true'}];
          _global.TF.CONTENT_EDITING.addEventListener('onCopyComponent', this);
          _global.TF.CONTENT_EDITING.addEventListener('onCutComponent', this);
          _global.TF.CONTENT_EDITING.addEventListener('onPasteComponent', this);
        };

        v2.onCopyComponent = function (o) {
          this['menu' + this.glue.__get__editorClass()]();
          this.filemenu.setDataProvider(this.filemenuItem);
        };

        v2.onCutComponent = function (o) {
          this['menu' + this.glue.__get__editorClass()]();
          this.filemenu.setDataProvider(this.filemenuItem);
        };

        v2.onPasteComponent = function (o) {
          this['menu' + this.glue.__get__editorClass()]();
          this.filemenu.setDataProvider(this.filemenuItem);
        };

        v2.menuTemplate = function () {
          this.filemenuItem = [{'label': this.glue.__get__key(), 'data': 'doNothing', 'enabled': false}];
          if (this.glue.specialEditor != null) {
            var v2 = {'label': this.glue.specialEditor.label, 'func': 'loadSpecialEditor', 'data': this.glue.specialEditor, 'separatorBefore': 'true'};
            this.filemenuItem.push(v2);
          }
          if (this.glue.__get__confEditor() != null) {
            if ((this.glue.__get__confEditor()).type == net.typoflash.base.EditorDefinition.TYPE_EXTERNAL) {
              v2 = {'label': (this.glue.__get__confEditor()).label, 'func': 'loadConfEditor', 'data': this.glue.__get__confEditor(), 'separatorBefore': 'true'};
            } else {
              v2 = {'label': (this.glue.__get__confEditor()).label, 'data': 'doNothing', 'subdata': (this.glue.__get__confEditor()).form, 'separatorBefore': 'true'};
            }
            this.filemenuItem.push(v2);
          }
          var v3 = [{'label': 'Edit template', 'data': 'editTemplateRecord', 'separatorBefore': 'true'}, {'label': 'Save settings...', 'data': 'saveSettings', 'separatorBefore': 'true', 'subdata': [{'label': 'for this page', 'data': 'storePageData'}, {'label': 'for all pages', 'data': 'storeTemplateData'}]}, {'label': 'Delete settings...', 'data': 'deleteSettings', 'subdata': [{'label': 'for this page', 'data': 'deletePageData'}, {'label': 'for all pages', 'data': 'deleteTemplateData'}]}, {'label': 'Revert', 'data': 'revert'}, {'label': 'Close', 'data': 'close', 'separatorBefore': 'true'}];
          this.filemenuItem = this.filemenuItem.concat(v3);
        };

        v2.newComponent = function (c) {
          if (c.attributes.data != null) {
            c = c.attributes.data;
          }
          var v3 = {};
          v3.component = c.uid;
          v3.name = c.name;
          v3.pid = _global.TF.PID;
          v3.target = (this.glue.__get__mc())._name;
          net.typoflash.utils.Debug.trace('newComponent');
          net.typoflash.utils.Debug.trace(v3);
          _global.TF.CONTENT_EDITING.saveContent(v3);
        };

        v2.deleteComponent = function (c) {
          _global.TF.CONTENT_EDITING.deleteContent(this.glue.__get__data());
          _global.TF.EDITOR.unregisterObject(this.glue);
          var v3 = {};
          v3.type = 'onDeleteComponent';
          v3.target = this;
          _global.TF.CONTENT_EDITING.dispatchEvent(v3);
        };

        v2.copyComponent = function () {
          _global.TF.CONTENT_EDITING.CLIPBOARD = {'source': this.glue, 'mode': 'copy'};
          var v3 = {};
          v3.type = 'onCopyComponent';
          v3.target = this;
          _global.TF.CONTENT_EDITING.dispatchEvent(v3);
        };

        v2.cutComponent = function () {
          _global.TF.CONTENT_EDITING.CLIPBOARD = {'source': this.glue, 'mode': 'cut'};
          var v3 = {};
          v3.type = 'onCutComponent';
          v3.target = this;
          _global.TF.CONTENT_EDITING.dispatchEvent(v3);
        };

        v2.pasteComponent = function () {
          var v3 = _global.TF.CONTENT_EDITING.CLIPBOARD;
          if (v3.source.data.componentRecord.uid <= 0) {
            _global.TF.EDITOR.alert('Clipboard does not contain a component');
            net.typoflash.utils.Debug.trace(v3.source.data);
            return undefined;
          }
          if (v3.mode == 'cut') {
            var v4 = {};
            v4.uid = v3.source.data.uid;
            v4.pid = _global.TF.PID;
            v4.target = (this.glue.__get__mc())._name;
            net.typoflash.utils.Debug.trace('Cut n paste component');
            net.typoflash.utils.Debug.trace(v4);
            _global.TF.CONTENT_EDITING.saveContent(v4);
          } else {
            if (v3.mode == 'copy') {
              var v4 = {};
              v4.component = v3.source.data.componentRecord.uid;
              v4.name = v3.source.data.name;
              if (typeof v3.source.data.records == 'object') {
                var v5 = [];
                for (var v6 in v3.source.data.records) {
                  if (v3.source.data.records[v6].CType != null) {
                    v5.push('tt_content_' + v3.source.data.records[v6].uid);
                  } else {}
                }
                v4.records = v5.join(',');
              } else {
                v4.records = v3.source.data.records;
              }
              v4.storage_page = v3.source.data.storage_page;
              v4.media = v3.source.data.media;
              v4.media_category = v3.source.data.media_category;
              v4._x = v3.source.getProp('_x');
              v4._y = v3.source.getProp('_y');
              v4._height = v3.source.getProp('_height');
              v4._width = v3.source.getProp('_width');
              v4._rotation = v3.source.getProp('_rotation');
              v4._alpha = v3.source.getProp('_alpha');
              v4.pid = _global.TF.PID;
              v4.target = (this.glue.__get__mc())._name;
              net.typoflash.utils.Debug.trace('Copy n paste component');
              net.typoflash.utils.Debug.trace(v4);
              _global.TF.CONTENT_EDITING.saveContent(v4);
            }
          }
          delete _global.TF.CONTENT_EDITING.CLIPBOARD;
          var v7 = {};
          v7.type = 'onPasteComponent';
          v7.target = this;
          _global.TF.CONTENT_EDITING.dispatchEvent(v7);
        };

        v2.revert = function () {
          this.glue.revert();
        };

        ASSetPropFlags(net.typoflash.editor.Editor.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 341 __Packages.net.typoflash.editor.TransformItem {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.editor) {
        _global.net.typoflash.editor = new Object();
      }
      if (!_global.net.typoflash.editor.TransformItem) {
        var v1 = function (glue, vars, manager) {
          gs.utils.EventDispatcherAS2.initialize(this);
          this._targetObject = glue;
          this.constrainScale = net.typoflash.editor.TransformItem.defaultBol(vars.constrainScale, false);
          this.lockScale = net.typoflash.editor.TransformItem.defaultBol(vars.lockScale, false);
          this.lockRotation = net.typoflash.editor.TransformItem.defaultBol(vars.lockRotation, false);
          this.lockPosition = net.typoflash.editor.TransformItem.defaultBol(vars.lockPosition, false);
          this.autoDeselect = net.typoflash.editor.TransformItem.defaultBol(vars.autoDeselect, true);
          this.constrainScale = net.typoflash.editor.TransformItem.defaultBol(vars.constrainScale, false);
          this.scaleFromCenter = net.typoflash.editor.TransformItem.defaultBol(vars.scaleFromCenter, false);
          this.lockScale = net.typoflash.editor.TransformItem.defaultBol(vars.lockScale, false);
          this.lockRotation = net.typoflash.editor.TransformItem.defaultBol(vars.lockRotation, false);
          this.lockPosition = net.typoflash.editor.TransformItem.defaultBol(vars.lockPosition, false);
          this.allowDelete = net.typoflash.editor.TransformItem.defaultBol(vars.allowDelete, false);
          this.forceSelectionToFront = vars.forceSelectionToFront;
          if (vars.bounds != undefined) {
            this._bounds = vars.bounds;
          } else {
            if (vars.xMax != undefined) {
              this._bounds = {'xMax': vars.xMax, 'xMin': vars.xMin, 'yMax': vars.yMax, 'yMin': vars.yMin};
            } else {
              this._bounds = {};
            }
          }
          this.__set__eventHandler(vars.eventHandler);
          this._oldOnPress = this._targetObject.mc.onPress;
          this._oldOnRelease = this._targetObject.mc.onRelease;
          this._oldOnReleaseOutside = this._targetObject.mc.onReleaseOutside;
          this._targetObject.mc.useHandCursor = false;
          net.typoflash.editor.TransformItem.buildRotationCursor();
          net.typoflash.editor.TransformItem.buildScaleCursor();
          this._handles_array = [];
          this._originalState = {};
          this._mode = 0;
          this._selected = false;
          this.resetCenterPoint();
          this.resetStartProps();
          this.resetBaseProps();
          this.setAxis(this.__get__centerX(), this.__get__centerY());
          Key.addListener(this);
          if (manager != undefined) {
            this._manager = manager;
            this._lineColor = this._manager.lineColor;
            this._handleFillColor = this._manager.handleFillColor;
            this._handleSize = this._manager.handleSize;
            this._paddingForRotation = this._manager.paddingForRotation;
            this.__set__enabled(this._manager.enabled);
          } else {
            this._lineColor = vars.lineColor || 14811221;
            this._handleFillColor = vars.handleFillColor || 16777215;
            this._handleSize = vars.handleSize || 8;
            this._paddingForRotation = vars.paddingForRotation || 10;
            this.__set__enabled(net.typoflash.editor.TransformItem.defaultBol(vars.enabled, true));
          }
          if (net.typoflash.editor.TransformItem._items_array == undefined) {
            net.typoflash.editor.TransformItem._items_array = [];
          }
          net.typoflash.editor.TransformItem._items_array.push(this);
        };

        net.typoflash.editor.TransformItem = v1;
        var v2 = v1.prototype;
        v2.resetBaseProps = function () {
          this._originalState._rotation = this._targetObject.getProp('_rotation');
          this._originalState._xscale = this._targetObject.getProp('_xscale');
          this._originalState._yscale = this._targetObject.getProp('_yscale');
          this._originalState._x = this._targetObject.getProp('_x');
          this._originalState._y = this._targetObject.getProp('_y');
          this._targetObject.setProp('_rotation', 0);
          this._targetObject.setProp('_xscale', 100);
          this._targetObject.setProp('_yscale', 100);
          this._baseWidth = this._targetObject.getProp('_width');
          this._baseHeight = this._targetObject.getProp('_height');
          this._targetObject.setProp('_rotation', this._originalState._rotation);
          this._targetObject.setProp('_xscale', this._originalState._xscale);
          this._targetObject.setProp('_yscale', this._originalState._yscale);
        };

        v2.reset = function () {
          this._targetObject.setProp('_rotation', this._originalState._rotation);
          this._targetObject.setProp('_xscale', this._originalState._xscale);
          this._targetObject.setProp('_yscale', this._originalState._yscale);
          this._targetObject.setProp('_x', this._originalState._x);
          this._targetObject.setProp('_y', this._originalState._y);
          this.update();
        };

        v2.resetStartProps = function () {
          delete this._startProps;
          this._startProps = {};
          var v2 = this._startProps;
          var v3 = this.__get__axisPoint();
          var v7 = this._targetObject.mc._parent._xmouse - v3.x;
          var v6 = v3.y - this._targetObject.mc._parent._ymouse;
          var v5 = Math.sqrt(v7 * v7 + v6 * v6);
          var v10 = Math.atan2(v6, v7);
          var v9 = this._targetObject.getProp('_x') - v3.x;
          var v8 = v3.y - this._targetObject.getProp('_y');
          var v12 = this._targetObject.getProp('_rotation') * 0.0174532925199433;
          var v11 = v10 + v12;
          v2.centerX = this.centerX;
          v2.centerY = this.centerY;
          v2.axisX = v3.x;
          v2.axisY = v3.y;
          v2._x = this._targetObject.getProp('_x');
          v2._y = this._targetObject.getProp('_y');
          v2._xscale = this._targetObject.getProp('_xscale');
          v2._yscale = this._targetObject.getProp('_yscale');
          v2._rotation = this._targetObject.getProp('_rotation');
          v2.angle = v12;
          v2._xmouse = this._targetObject.mc._parent._xmouse;
          v2._ymouse = this._targetObject.mc._parent._ymouse;
          v2.angleAxisToMouse = (v10 + 6.283185307179586) % 6.283185307179586;
          v2.distAxisToMouseX = Math.cos(v11) * v5;
          v2.distAxisToMouseY = Math.sin(v11) * v5;
          v2.distAxisToMouse = v5;
          v2.distRegToCenterX = this._targetObject.getProp('_x') - v2.centerX;
          v2.distRegToCenterY = this._targetObject.getProp('_y') - v2.centerY;
          v2.distAxisToReg = Math.sqrt(v9 * v9 + v8 * v8);
          v2.angleAxisToReg = Math.atan2(v8, v9);
          if (this._bounds.xMax != undefined) {
            var v4 = this._targetObject.mc.getBounds(this._targetObject.mc._parent);
            v2.xMin = this._bounds.xMin + (this._targetObject.getProp('_x') - v4.xMin);
            v2.xMax = this._bounds.xMax - (v4.xMax - this._targetObject.getProp('_x'));
            v2.yMin = this._bounds.yMin + (this._targetObject.getProp('_y') - v4.yMin);
            v2.yMax = this._bounds.yMax - (v4.yMax - this._targetObject.getProp('_y'));
            v2.angleAxisToTL = (Math.atan2(this._bounds.yMin - v3.y, this._bounds.xMin - v3.x) + 12.56637061435917) % 6.283185307179586;
            v2.angleAxisToTR = (Math.atan2(this._bounds.yMin - v3.y, this._bounds.xMax - v3.x) + 12.56637061435917) % 6.283185307179586;
            v2.angleAxisToBR = (Math.atan2(this._bounds.yMax - v3.y, this._bounds.xMax - v3.x) + 12.56637061435917) % 6.283185307179586;
            v2.angleAxisToBL = (Math.atan2(this._bounds.yMax - v3.y, this._bounds.xMin - v3.x) + 12.56637061435917) % 6.283185307179586;
          }
        };

        v2.resetCenterPoint = function () {
          var v6 = this._targetObject.boundingBox._rotation;
          this._targetObject.boundingBox._rotation = 0;
          var v3 = this._targetObject.boundingBox.getBounds(this._targetObject.mc._parent);
          var v11 = (v3.xMax + v3.xMin) / 2;
          var v9 = (v3.yMax + v3.yMin) / 2;
          var v5 = v11 - this._targetObject.boundingBox._x;
          var v4 = this._targetObject.boundingBox._y - v9;
          var v7 = Math.sqrt(v5 * v5 + v4 * v4);
          var v10 = Math.atan2(v4, v5);
          var v8 = v6 * 0.0174532925199433 - v10;
          var v13 = this._targetObject.boundingBox._x + Math.cos(v8) * v7;
          var v12 = this._targetObject.boundingBox._y + Math.sin(v8) * v7;
          this._targetObject.boundingBox._rotation = v6;
          var v2 = {'x': v13, 'y': v12};
          this._targetObject.mc._parent.localToGlobal(v2);
          this._targetObject.boundingBox.globalToLocal(v2);
          this._localCenterX = v2.x;
          this._localCenterY = v2.y;
        };

        v2.setAxis = function (x, y) {
          var v2 = {'x': x, 'y': y};
          this._targetObject.mc._parent.localToGlobal(v2);
          this._targetObject.mc.globalToLocal(v2);
          this._localAxisX = v2.x;
          this._localAxisY = v2.y;
        };

        v2.renderHandles = function () {
          var v5 = this.getDistanceToHandles();
          var v9 = this._targetObject.getProp('_rotation') * 0.0174532925199433;
          var v4 = this._selection_mc;
          var v6 = this.__get__centerPoint();
          v4._x = v6.x;
          v4._y = v6.y;
          v4.center_mc.clear();
          v4.center_mc.lineStyle(1, this._lineColor);
          var v8 = Math.cos(this._handles_array[3].angleOffset) * v5;
          var v7 = Math.sin(this._handles_array[3].angleOffset) * v5;
          v4.center_mc.moveTo(v8, v7);
          var v3 = 0;
          while (v3 < 4) {
            var v2 = this._handles_array[v3];
            v2.mc._x = Math.cos(v2.angleOffset) * v5;
            v2.mc._y = Math.sin(v2.angleOffset) * v5;
            v2.mc._rotation = Math.floor(v2.angleOffset / 1.570796326794897) * 90;
            v4.center_mc.lineTo(v2.mc._x, v2.mc._y);
            ++v3;
          }
          v4.tl_mc.edge_mc._height = v4.bl_mc._y - v4.tl_mc._y;
          v4.tr_mc.edge_mc._height = v4.tr_mc._x - v4.tl_mc._x;
          v4.br_mc.edge_mc._height = v4.br_mc._y - v4.tr_mc._y;
          v4.bl_mc.edge_mc._height = v4.br_mc._x - v4.bl_mc._x;
          v4._rotation = this._targetObject.getProp('_rotation');
        };

        v2.onPressSelect = function () {
          if (this._oldOnPress != undefined) {
            this._oldOnPress();
          }
          this.select();
          this.onPressMove();
        };

        v2.update = function () {
          this.resetBaseProps();
          this.resetCenterPoint();
          this.resetStartProps();
          this.resetHandleAngles();
          this.renderHandles();
          if (this._selected) {
            this._selection_mc.swapDepths(net.typoflash.editor.TransformItem.findNextHighestDepth(this._selection_mc._parent));
          }
        };

        v2.bringToFront = function () {
          this._targetObject.mc.swapDepths(net.typoflash.editor.TransformItem.findNextHighestDepth(this._targetObject.mc._parent));
          if (this._selected) {
            this._selection_mc.swapDepths(net.typoflash.editor.TransformItem.findNextHighestDepth(this._selection_mc._parent));
          }
        };

        v2.select = function () {
          if (!this._selected) {
            this.showHandles();
            this.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDownCheck);
            this.onKeyUp = mx.utils.Delegate.create(this, this.onKeyUpCheck);
            if (this._targetObject.boundingBox.hitTest(_root._xmouse, _root._ymouse, true)) {
              this.onPressMove();
            } else {
              this.resetStartProps();
            }
            this._selected = true;
            if (this.forceSelectionToFront) {
              this.bringToFront();
            }
            this.dispatchEvent('select', {'target': this, 'type': 'select', 'action': 'select', 'transformed': false, 'targetObject': this._targetObject, 'manager': this._manager, 'item': this});
            this._manager.onSelectTransformItem(this);
          }
        };

        v1.checkAllForDeselect = function () {
          var v2 = net.typoflash.editor.TransformItem._items_array.length;
          var v1 = 0;
          while (v1 < v2) {
            net.typoflash.editor.TransformItem._items_array[v1].checkForDeselect();
            ++v1;
          }
        };

        v2.checkForDeselect = function () {
          if (this._selected) {
            if (this._selection_mc.hitTest(_root._xmouse, _root._ymouse, true) || this._targetObject.boundingBox.hitTest(_root._xmouse, _root._ymouse, true)) {
              return undefined;
            } else {
              if (this.autoDeselect) {
                this.deselect();
              } else {
                if (this._manager.selectedItem != undefined || this._manager == undefined) {
                  this.dispatchEvent('clickOff', {'target': this, 'type': 'clickOff', 'action': 'clickOff', 'transformed': false, 'targetObject': this._targetObject, 'manager': this._manager, 'item': this});
                }
              }
            }
          }
        };

        v2.deselect = function (skipEvent) {
          if (this._selected) {
            this._selection_mc._visible = false;
            this._selected = false;
            this.onKeyDown = undefined;
            this.onKeyUp = undefined;
            this._manager.onDeselect(this);
            if (skipEvent != true) {
              this.dispatchEvent('deselect', {'target': this, 'type': 'deselect', 'action': 'deselect', 'transformed': false, 'targetObject': this._targetObject, 'manager': this._manager, 'item': this});
            }
          }
        };

        v2.onKeyUpCheck = function () {
          if (Key.getCode() == 16) {
            if (this._mode == 1) {
              this.onMouseMoveScale();
              this.resetHandleAngles();
            } else {
              if (this._mode == 2) {
                this.onMouseMoveRotate();
              }
            }
            this.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDownCheck);
          }
        };

        v2.onKeyDownCheck = function () {
          if (Key.getCode() == 16) {
            if (this._mode == 1) {
              this.onMouseMoveScale();
              this.resetHandleAngles();
              this.renderHandles();
            } else {
              if (this._mode == 2) {
                this.onMouseMoveRotate();
              }
            }
            this.onKeyDown = undefined;
          } else {
            if ((Key.getCode() == 46 || Key.getCode() == 8) && this._selected) {
              if (this.allowDelete) {
                this.deleteItem();
              } else {
                this.dispatchEvent('deleteKeyDown', {'target': this, 'type': 'deleteKeyDown', 'action': 'deleteKeyDown', 'transformed': false, 'targetObject': this._targetObject, 'manager': this._manager, 'item': this});
              }
            }
          }
        };

        v2.deleteItem = function () {
          this._targetObject.mc.swapDepths(net.typoflash.editor.TransformItem.findNextHighestDepth(this._targetObject.mc._parent));
          this._targetObject.mc.removeMovieClip();
          net.typoflash.editor.TransformItem._rotationCursor._visible = false;
          net.typoflash.editor.TransformItem._scaleCursor._visible = net.typoflash.editor.TransformItem._rotationCursor._visible;
          Mouse.show();
          if (this._manager == undefined) {
            this.destroy();
          } else {
            this._manager.removeItem(this);
          }
          this.dispatchEvent('delete', {'target': this, 'type': 'delete', 'action': 'delete', 'transformed': false, 'targetObject': this._targetObject, 'manager': this._manager, 'item': this});
        };

        v2.onPressMove = function () {
          if (!this.lockPosition) {
            this.resetStartProps();
            this._selection_mc.onMouseMove = mx.utils.Delegate.create(this, this.onMouseMoveMove);
            this.onMouseMoveMove();
          }
        };

        v2.onMouseMoveMove = function () {
          var v2 = this._startProps;
          var v4 = this._targetObject.mc._parent._xmouse - v2._xmouse;
          var v3 = this._targetObject.mc._parent._ymouse - v2._ymouse;
          if (!Key.isDown(16)) {
            this._targetObject.setProp('_x', v2._x + v4);
            this._targetObject.setProp('_y', v2._y + v3);
          } else {
            if (Math.abs(v4) > Math.abs(v3)) {
              this._targetObject.setProp('_x', v2._x + v4);
              this._targetObject.setProp('_y', v2._y);
            } else {
              this._targetObject.setProp('_y', v2._y + v3);
              this._targetObject.setProp('_x', v2._x);
            }
          }
          if (this._bounds.xMax != undefined) {
            this._targetObject.setProp('_x', Math.max(v2.xMin, Math.min(this._targetObject.getProp('_x'), v2.xMax)));
            this._targetObject.setProp('_y', Math.max(v2.yMin, Math.min(this._targetObject.getProp('_y'), v2.yMax)));
          }
          this._selection_mc._x = this._targetObject.getProp('_x') - v2.distRegToCenterX;
          this._selection_mc._y = this._targetObject.getProp('_y') - v2.distRegToCenterY;
          updateAfterEvent();
        };

        v2.onReleaseMove = function () {
          if (!this.lockPosition) {
            this._selection_mc.onMouseMove = undefined;
            if (this._startProps._x != this._targetObject.getProp('_x') || this._startProps._y != this._targetObject.getProp('_y')) {
              this.resetStartProps();
              this.dispatchEvent('move', {'target': this, 'type': 'move', 'action': 'move', 'transformed': true, 'targetObject': this._targetObject, 'manager': this._manager, 'item': this});
            }
          }
          if (this._oldOnRelease != undefined) {
            this._oldOnRelease();
          }
        };

        v2.onRollOverScale = function () {
          if (!this.lockScale) {
            Mouse.hide();
            net.typoflash.editor.TransformItem._scaleCursor.onMouseMove = mx.utils.Delegate.create(this, this.snapCursorScale);
            var v3 = this._targetObject.mc._parent._xmouse - this.__get__centerX();
            var v4 = this.__get__centerY() - this._targetObject.mc._parent._ymouse;
            var v5 = -(Math.atan2(v4, v3) - 0.7853981633974483);
            net.typoflash.editor.TransformItem._scaleCursor._rotation = v5 * 57.29577951308232;
            net.typoflash.editor.TransformItem._scaleCursor._visible = true;
            net.typoflash.editor.TransformItem._scaleCursor.swapDepths(net.typoflash.editor.TransformItem.findNextHighestDepth(_root));
            this.snapCursorScale();
          }
        };

        v2.onRollOutScale = function () {
          if (!this.lockScale) {
            net.typoflash.editor.TransformItem._scaleCursor.onMouseMove = undefined;
            net.typoflash.editor.TransformItem._scaleCursor._visible = false;
            Mouse.show();
          }
        };

        v2.onPressScale = function () {
          if (!this.lockScale) {
            this._mode = 1;
            this.setScaleAxis();
            this.resetStartProps();
            this._selection_mc.onMouseMove = mx.utils.Delegate.create(this, this.onMouseMoveScale);
            this.onMouseMoveScale();
          }
        };

        v2.setScaleAxis = function () {
          if (this.scaleFromCenter) {
            this.setAxis(this.__get__centerX(), this.__get__centerY());
          } else {
            var v5 = 0;
            while (v5 < 4) {
              var v3 = this._handles_array[v5].mc;
              if (v3.hitTest(_root._xmouse, _root._ymouse, true)) {
                var v6 = (v5 + 2) % 4;
                v3 = this._handles_array[v6].mc;
                var v4 = {'x': v3._x, 'y': v3._y};
                v3._parent.localToGlobal(v4);
                this._targetObject.mc._parent.globalToLocal(v4);
                this.setAxis(v4.x, v4.y);
                break;
              }
              ++v5;
            }
          }
        };

        v2.onMouseMoveScale = function () {
          var v5 = this._startProps;
          var v7 = this._targetObject.mc._parent._xmouse - v5.axisX;
          var v6 = v5.axisY - this._targetObject.mc._parent._ymouse;
          var v15 = Math.sqrt(v7 * v7 + v6 * v6);
          var v17 = Math.atan2(v6, v7);
          if (Key.isDown(16) || this.constrainScale) {
            var v18 = (v17 - v5.angleAxisToMouse + 10.99557428756428) % 6.283185307179586;
            if (v18 < Math.PI) {
              v15 *= -1;
            }
            this._targetObject.setProp('_xscale', (v5._xscale / v5.distAxisToMouse) * v15);
            this._targetObject.setProp('_yscale', (v5._yscale / v5.distAxisToMouse) * v15);
          } else {
            v17 += v5.angle;
            this._targetObject.setProp('_xscale', (v5._xscale / v5.distAxisToMouseX) * Math.cos(v17) * v15);
            this._targetObject.setProp('_yscale', (v5._yscale / v5.distAxisToMouseY) * Math.sin(v17) * v15);
            this.resetHandleAngles();
          }
          var v14 = {'x': this._localAxisX, 'y': this._localAxisY};
          this._targetObject.mc.localToGlobal(v14);
          this._targetObject.mc._parent.globalToLocal(v14);
          this._targetObject.setProp('_x', this._targetObject.getProp('_x') - (v14.x - v5.axisX));
          this._targetObject.setProp('_y', this._targetObject.getProp('_y') - (v14.y - v5.axisY));
          if (this._bounds.xMax != undefined) {
            var v16 = this._targetObject.mc.getBounds(this._targetObject.mc._parent);
            if (v16.xMax > this._bounds.xMax || v16.xMin < this._bounds.xMin || v16.yMax > this._bounds.yMax || v16.yMin < this._bounds.yMin) {
              this.renderHandles();
              var v3;
              var v8;
              var v13;
              var v11 = 1;
              var v4 = this.__get__axisPoint();
              var v12 = {'x': Math.round(v4.x), 'y': Math.round(v4.y)};
              var v10;
              var v2;
              var v9 = 0;
              while (v9 < this._handles_array.length) {
                v10 = this._handles_array[v9];
                v2 = {'x': v10.mc._x, 'y': v10.mc._y};
                v10.mc._parent.localToGlobal(v2);
                this._targetObject.mc._parent.globalToLocal(v2);
                v2.x = Math.round(v2.x);
                v2.y = Math.round(v2.y);
                if (!(Math.abs(v2.x - v4.x) < 1 && Math.abs(v2.y - v4.y) < 1)) {
                  v3 = (Math.atan2(v2.y - v12.y, v2.x - v12.x) + 12.56637061435917) % 6.283185307179586;
                  v7 = v4.x - v2.x;
                  v6 = v4.y - v2.y;
                  v13 = Math.sqrt(v7 * v7 + v6 * v6);
                  if (v3 <= v5.angleAxisToBR || v5.angleAxisToTR >= 4.71238898038469 && v3 >= v5.angleAxisToTR) {
                    v7 = this._bounds.xMax - v4.x;
                    v8 = v7 / Math.cos(v3);
                  } else {
                    if (v3 <= v5.angleAxisToBL) {
                      v6 = this._bounds.yMax - v4.y;
                      v8 = v6 / Math.sin(v3);
                    } else {
                      if (v3 <= v5.angleAxisToTL) {
                        v7 = v4.x - this._bounds.xMin;
                        v8 = v7 / Math.cos(v3);
                      } else {
                        v6 = v4.y - this._bounds.yMin;
                        v8 = v6 / Math.sin(v3);
                      }
                    }
                  }
                  if (v8 != 0) {
                    v11 = Math.min(v11, Math.abs(v8) / v13);
                  }
                }
                ++v9;
              }
              this._targetObject.setProp('_xscale', this._targetObject.getProp('_xscale') * v11);
              this._targetObject.setProp('_yscale', this._targetObject.getProp('_Yscale') * v11);
              v14 = {'x': this._localAxisX, 'y': this._localAxisY};
              this._targetObject.mc.localToGlobal(v14);
              this._targetObject.mc._parent.globalToLocal(v14);
              this._targetObject.setProp('_x', this._targetObject.getProp('_x') - (v14.x - v5.axisX));
              this._targetObject.setProp('_y', this._targetObject.getProp('_y') - (v14.y - v5.axisY));
            }
          }
          this.renderHandles();
          updateAfterEvent();
        };

        v2.onReleaseScale = function () {
          if (!this.lockScale) {
            this._mode = 0;
            this._selection_mc.onMouseMove = undefined;
            this.resetStartProps();
            this.dispatchEvent('scale', {'target': this, 'type': 'scale', 'action': 'scale', 'transformed': true, 'targetObject': this._targetObject, 'manager': this._manager, 'item': this});
          }
        };

        v2.onReleaseOutsideScale = function () {
          this.onRollOutScale();
          this.onReleaseScale();
        };

        v2.snapCursorScale = function () {
          net.typoflash.editor.TransformItem._scaleCursor._x = _root._xmouse;
          net.typoflash.editor.TransformItem._scaleCursor._y = _root._ymouse;
          updateAfterEvent();
        };

        v2.onRollOverRotate = function () {
          if (!this.lockRotation) {
            Mouse.hide();
            net.typoflash.editor.TransformItem._rotationCursor.onMouseMove = mx.utils.Delegate.create(this, this.snapCursorRotate);
            net.typoflash.editor.TransformItem._rotationCursor._visible = true;
            net.typoflash.editor.TransformItem._rotationCursor.swapDepths(net.typoflash.editor.TransformItem.findNextHighestDepth(_root));
            this.snapCursorRotate();
          }
        };

        v2.onRollOutRotate = function () {
          if (!this.lockRotation) {
            net.typoflash.editor.TransformItem._rotationCursor.onMouseMove = undefined;
            net.typoflash.editor.TransformItem._rotationCursor._visible = false;
            Mouse.show();
          }
        };

        v2.onPressRotate = function () {
          if (!this.lockRotation) {
            this._mode = 2;
            this.setAxis(this.__get__centerX(), this.__get__centerY());
            this.resetStartProps();
            this._selection_mc.onMouseMove = mx.utils.Delegate.create(this, this.onMouseMoveRotate);
            this.onMouseMoveRotate();
          }
        };

        v2.onMouseMoveRotate = function () {
          var v2 = this._startProps;
          var v5 = {'_x': this._targetObject.getProp('_x'), '_y': this._targetObject.getProp('_y'), '_rotation': this._targetObject.getProp('_rotation')};
          var v7 = this._targetObject.mc._parent._xmouse - v2.centerX;
          var v6 = v2.centerY - this._targetObject.mc._parent._ymouse;
          var v4 = v2.angleAxisToMouse - Math.atan2(v6, v7);
          var v8 = v2.angle + v4;
          this._targetObject.setProp('_rotation', v8 * 57.29577951308232);
          if (Key.isDown(16)) {
            this._targetObject.setProp('_rotation', Math.round(this._targetObject.getProp('_rotation') / 45) * 45);
            v4 = this._targetObject.getProp('_rotation') * 0.0174532925199433 - v2.angle;
          }
          this._targetObject.setProp('_x', v2.centerX + Math.cos(v4 - v2.angleAxisToReg) * v2.distAxisToReg);
          this._targetObject.setProp('_y', v2.centerY + Math.sin(v4 - v2.angleAxisToReg) * v2.distAxisToReg);
          if (this._bounds.xMax != undefined) {
            var v3 = this._targetObject.mc.getBounds(this._targetObject.mc._parent);
            if (v3.xMax > this._bounds.xMax || v3.xMin < this._bounds.xMin || v3.yMax > this._bounds.yMax || v3.yMin < this._bounds.yMin) {
              this._targetObject.setProp('_rotation', v5._rotation);
              this._targetObject.setProp('_x', v5._x);
              this._targetObject.setProp('_y', v5._y);
            }
          }
          this._selection_mc._rotation = this._targetObject.getProp('_rotation');
          updateAfterEvent();
        };

        v2.onReleaseRotate = function () {
          if (!this.lockRotation) {
            this._mode = 0;
            this._selection_mc.onMouseMove = undefined;
            this.resetStartProps();
            this.dispatchEvent('rotate', {'target': this, 'type': 'rotate', 'action': 'rotate', 'transformed': true, 'targetObject': this._targetObject, 'manager': this._manager, 'item': this});
          }
        };

        v2.onReleaseOutsideRotate = function () {
          this.onRollOutRotate();
          this.onReleaseRotate();
        };

        v2.snapCursorRotate = function () {
          net.typoflash.editor.TransformItem._rotationCursor._x = _root._xmouse;
          net.typoflash.editor.TransformItem._rotationCursor._y = _root._ymouse;
          updateAfterEvent();
        };

        v2.showHandles = function () {
          if (this._selection_mc == undefined) {
            this.initHandles(this._lineColor, this._handleFillColor, this._handleSize, this._paddingForRotation);
          } else {
            this._selection_mc.swapDepths(net.typoflash.editor.TransformItem.findNextHighestDepth(this._selection_mc._parent));
            this.resetHandleAngles();
            this.renderHandles();
          }
          this._targetObject.mc.useHandCursor = false;
          this._selection_mc._visible = true;
        };

        v2.initHandles = function () {
          var v3 = false;
          if (this._selection_mc != undefined) {
            v3 = this._selection_mc._visible;
            this._selection_mc.removeMovieClip();
          }
          var v2 = net.typoflash.editor.TransformItem.findNextHighestDepth(this._targetObject.mc._parent);
          this._selection_mc = this._targetObject.mc._parent.createEmptyMovieClip('selection' + v2 + '_mc', v2);
          this._selection_mc.createEmptyMovieClip('edges_mc', 0);
          this._selection_mc.createEmptyMovieClip('center_mc', 1);
          var v4 = this._selection_mc.createEmptyMovieClip('m_mc', 2);
          net.typoflash.editor.TransformItem.box(v4, -(this._handleSize / 2), -(this._handleSize / 2), this._handleSize, this._handleSize, this._handleFillColor, 100, 1, this._lineColor, 100);
          var v8 = this.buildHandle(this._selection_mc, 'tl_mc', 180, 3);
          var v6 = this.buildHandle(this._selection_mc, 'tr_mc', -90, 4);
          var v7 = this.buildHandle(this._selection_mc, 'br_mc', 0, 5);
          var v5 = this.buildHandle(this._selection_mc, 'bl_mc', 90, 6);
          this._handles_array = [{'mc': v8, 'dir': '_y', 'prtnr': 3}, {'mc': v6, 'dir': '_x', 'prtnr': 0}, {'mc': v7, 'dir': '_y', 'prtnr': 1}, {'mc': v5, 'dir': '_x', 'prtnr': 2}];
          this._selection_mc._visible = v3;
          this.resetHandleAngles();
          this.renderHandles();
        };

        v2.buildHandle = function (parent_mc, name_str, rotation_num, level_num) {
          var v5 = parent_mc.createEmptyMovieClip(name_str, level_num);
          var v4 = v5.createEmptyMovieClip('edge_mc', 0);
          net.typoflash.editor.TransformItem.box(v4, -7, -100, 14, 100, 0, 0);
          var v3 = v5.createEmptyMovieClip('rotate_mc', 1);
          var v6 = this._handleSize + this._paddingForRotation;
          net.typoflash.editor.TransformItem.box(v3, 0, 0, v6, v6, 0, 0);
          var v2 = v5.createEmptyMovieClip('scale_mc', 2);
          net.typoflash.editor.TransformItem.box(v2, 0, 0, this._handleSize, this._handleSize, this._handleFillColor, 100, 1, this._lineColor, 100);
          v5._rotation = rotation_num;
          v4.onPress = mx.utils.Delegate.create(this, this.onPressSelect);
          v4.onReleaseOutside = mx.utils.Delegate.create(this, this.onReleaseMove);
          v4.onRelease = v4.onReleaseOutside;
          v3.onRollOver = mx.utils.Delegate.create(this, this.onRollOverRotate);
          v3.onRollOut = mx.utils.Delegate.create(this, this.onRollOutRotate);
          v3.onPress = mx.utils.Delegate.create(this, this.onPressRotate);
          v3.onRelease = mx.utils.Delegate.create(this, this.onReleaseRotate);
          v3.onReleaseOutside = mx.utils.Delegate.create(this, this.onReleaseOutsideRotate);
          v2.onRollOver = mx.utils.Delegate.create(this, this.onRollOverScale);
          v2.onRollOut = mx.utils.Delegate.create(this, this.onRollOutScale);
          v2.onPress = mx.utils.Delegate.create(this, this.onPressScale);
          v2.onRelease = mx.utils.Delegate.create(this, this.onReleaseScale);
          v2.onReleaseOutside = mx.utils.Delegate.create(this, this.onReleaseOutsideScale);
          v4.useHandCursor = false;
          v2.useHandCursor = v4.useHandCursor;
          v3.useHandCursor = v4.useHandCursor;
          return v5;
        };

        v2.resetHandleAngles = function () {
          var v4 = this._baseWidth * (this._targetObject.getProp('_xscale') / 100) / 2;
          var v3 = this._baseHeight * (this._targetObject.getProp('_yscale') / 100) / 2;
          var v2 = Math.atan2(v3, v4);
          this._handles_array[0].angleOffset = Math.PI + v2;
          this._handles_array[1].angleOffset = -v2;
          this._handles_array[2].angleOffset = v2;
          this._handles_array[3].angleOffset = Math.PI - v2;
        };

        v2.getDistanceToHandles = function () {
          var v3 = this._baseWidth * (this._targetObject.getProp('_xscale') / 100) / 2;
          var v2 = this._baseHeight * (this._targetObject.getProp('_yscale') / 100) / 2;
          return Math.sqrt(v3 * v3 + v2 * v2);
        };

        v2.deleteHandles = function () {
          var v2 = 0;
          while (v2 < this._handles_array.length) {
            this._handles_array[v2].mc.removeMovieClip();
            delete this._handles_array[v2];
            ++v2;
          }
          this._handles_array = [];
          this._selection_mc.onMouseMove = undefined;
          this._selection_mc.removeMovieClip();
        };

        v1.defaultBol = function (b, default_bol) {
          if (b == undefined) {
            return default_bol;
          } else {
            return b;
          }
        };

        v2.addAllEventsListener = function (handler) {
          this.addEventListener('select', handler);
          this.addEventListener('deselect', handler);
          this.addEventListener('delete', handler);
          this.addEventListener('clickOff', handler);
          this.addEventListener('deleteKeyDown', handler);
          this.addEventListener('scale', handler);
          this.addEventListener('rotate', handler);
          this.addEventListener('move', handler);
        };

        v2.removeAllEventsListener = function (handler) {
          this.removeEventListener('select', handler);
          this.removeEventListener('deselect', handler);
          this.removeEventListener('delete', handler);
          this.removeEventListener('clickOff', handler);
          this.removeEventListener('deleteKeyDown', handler);
          this.removeEventListener('scale', handler);
          this.removeEventListener('rotate', handler);
          this.removeEventListener('move', handler);
        };

        v1.getItemFromTargetObject = function (tgo) {
          var v1 = 0;
          while (v1 < net.typoflash.editor.TransformItem._items_array.length) {
            if (net.typoflash.editor.TransformItem._items_array[v1].targetObject == tgo) {
              return net.typoflash.editor.TransformItem._items_array[v1];
            }
            ++v1;
          }
        };

        v1.buildRotationCursor = function () {
          if (_root.rotationCursor_mc == undefined) {
            var v3 = 6.5;
            net.typoflash.editor.TransformItem._rotationCursor = _root.createEmptyMovieClip('rotationCursor_mc', net.typoflash.editor.TransformItem.findNextHighestDepth(_root));
            var v2 = net.typoflash.editor.TransformItem._rotationCursor;
            v2.lineStyle(4, 0);
            net.typoflash.editor.TransformItem.circle(v2, 0, 0, v3);
            v2.moveTo(-v3 - 2.5, -3);
            v2.lineTo(-v3, 0);
            v2.lineTo(-v3 + 4, -1.5);
            v2.lineStyle(2, 16777215);
            net.typoflash.editor.TransformItem.circle(v2, 0, 0, v3);
            v2.lineStyle(2, 0);
            v2.moveTo(-v3 - 1, 1);
            v2.lineTo(-v3 + 1, 1);
            v2.lineStyle(2, 16777215);
            v2.moveTo(-v3 - 2.5, -3);
            v2.lineTo(-v3, 0);
            v2.lineTo(-v3 + 4, -1.5);
            v2.cacheAsBitmap = true;
            v2._visible = false;
          } else {
            net.typoflash.editor.TransformItem._rotationCursor = _root.rotationCursor_mc;
          }
          net.typoflash.editor.TransformItem._rotationCursor.onMouseDown = net.typoflash.editor.TransformItem.checkAllForDeselect;
        };

        v1.buildScaleCursor = function () {
          if (_root.scaleCursor_mc == undefined) {
            var v2 = 10;
            net.typoflash.editor.TransformItem._scaleCursor = _root.createEmptyMovieClip('scaleCursor_mc', net.typoflash.editor.TransformItem.findNextHighestDepth(_root));
            var v3 = net.typoflash.editor.TransformItem._scaleCursor;
            v3.lineStyle(4, 0);
            v3.moveTo(-(v2 / 2), v2 / 2);
            v3.lineTo(v2 / 2, -(v2 / 2));
            v3.moveTo(v2 / 2 - 3, -(v2 / 2));
            v3.lineTo(v2 / 2, -(v2 / 2));
            v3.lineTo(v2 / 2, -(v2 / 2) + 3);
            v3.moveTo(-(v2 / 2), v2 / 2 - 3);
            v3.lineTo(-(v2 / 2), v2 / 2);
            v3.lineTo(-(v2 / 2) + 3, v2 / 2);
            v3.lineStyle(2, 16777215);
            v3.moveTo(-(v2 / 2), v2 / 2);
            v3.lineTo(v2 / 2, -(v2 / 2));
            v3.moveTo(v2 / 2 - 3, -(v2 / 2));
            v3.lineTo(v2 / 2, -(v2 / 2));
            v3.lineTo(v2 / 2, -(v2 / 2) + 3);
            v3.moveTo(-(v2 / 2), v2 / 2 - 3);
            v3.lineTo(-(v2 / 2), v2 / 2);
            v3.lineTo(-(v2 / 2) + 3, v2 / 2);
            v3.cacheAsBitmap = true;
            v3._visible = false;
          } else {
            net.typoflash.editor.TransformItem._scaleCursor = _root.scaleCursor_mc;
          }
        };

        v1.box = function (mc, x, y, w, h, fc, fa, t, lc, la) {
          if (lc != undefined) {
            mc.lineStyle(t, lc, la);
          }
          if (fc != undefined) {
            mc.beginFill(fc, fa);
          }
          mc.moveTo(x, y);
          mc.lineTo(x + w, y);
          mc.lineTo(x + w, y + h);
          mc.lineTo(x, y + h);
          mc.lineTo(x, y);
          if (fc != undefined) {
            mc.endFill();
          }
        };

        v1.circle = function (mc, x, y, r, f) {
          if (f != undefined) {
            mc.beginFill(f);
          }
          mc.moveTo(x + r, y);
          mc.curveTo(r + x, 0.414213562373095 * r + y, Math.SQRT1_2 * r + x, Math.SQRT1_2 * r + y);
          mc.curveTo(0.414213562373095 * r + x, r + y, x, r + y);
          mc.curveTo(-0.414213562373095 * r + x, r + y, -Math.SQRT1_2 * r + x, Math.SQRT1_2 * r + y);
          mc.curveTo(-r + x, 0.414213562373095 * r + y, -r + x, y);
          mc.curveTo(-r + x, -0.414213562373095 * r + y, -Math.SQRT1_2 * r + x, -Math.SQRT1_2 * r + y);
          mc.curveTo(-0.414213562373095 * r + x, -r + y, x, -r + y);
          mc.curveTo(0.414213562373095 * r + x, -r + y, Math.SQRT1_2 * r + x, -Math.SQRT1_2 * r + y);
          mc.curveTo(r + x, -0.414213562373095 * r + y, r + x, y);
          if (f != undefined) {
            mc.endFill();
          }
        };

        v1.findNextHighestDepth = function (mc) {
          var v4 = mc.getNextHighestDepth();
          if (v4 != undefined && v4 < 16000) {
            return v4;
          } else {
            v4 = -1;
            var v2;
            var v1;
            var v5 = TextField.prototype;
            for (var v6 in mc) {
              v1 = mc[v6];
              if ((typeof v1 == 'movieclip' || v1.__proto__ == v5) && v1._parent == mc) {
                v2 = v1.getDepth();
                if (v2 > v4 && v2 < 16000) {
                  v4 = v2;
                }
              }
            }
            return v4 + 1;
          }
        };

        v1.selectTargetObject = function (tgo) {
          var v1 = net.typoflash.editor.TransformItem.getItemFromTargetObject(tgo);
          if (v1 == undefined) {
            v1 = new net.typoflash.editor.TransformItem(tgo);
          }
          v1.select();
          return v1;
        };

        v1.deselectAll = function () {
          var v1 = 0;
          while (v1 < net.typoflash.editor.TransformItem._items_array.length) {
            net.typoflash.editor.TransformItem._items_array[v1].deselect();
            ++v1;
          }
        };

        v2.destroy = function (calledFromManager_bol) {
          if (calledFromManager_bol != true) {
            this._manager.removeItem(this);
          }
          this.__set__enabled(false);
          this.deselect(true);
          Key.removeListener(this);
          this._selection_mc.removeMovieClip();
          net.typoflash.editor.TransformItem.destroyInstance(this);
        };

        v1.destroyInstance = function (i) {
          false;
        };

        v2.__get__selected = function () {
          return this._selected;
        };

        v2.__set__selected = function (b) {
          if (b != this._selected) {
            if (b) {
              this.select();
            } else {
              this.deselect();
            }
          }
          return this.__get__selected();
        };

        v2.__get__targetObject = function () {
          return this._targetObject;
        };

        v2.__get__mc = function () {
          return this.__get__targetObject();
        };

        v2.__get__manager = function () {
          return this._manager;
        };

        v2.__get__enabled = function () {
          return this._enabled;
        };

        v2.__set__enabled = function (b) {
          if (this._enabled != b) {
            this._enabled = b;
            if (b) {
              this._targetObject.mc.onPress = mx.utils.Delegate.create(this, this.onPressSelect);
              this._targetObject.mc.onReleaseOutside = mx.utils.Delegate.create(this, this.onReleaseMove);
              this._targetObject.mc.onRelease = this._targetObject.mc.onReleaseOutside;
            } else {
              if (this._selected) {
                this.deselect();
              }
              if (this._oldOnPress == undefined) {
                delete this._targetObject.mc.onPress;
              } else {
                this._targetObject.mc.onPress = this._oldOnPress;
              }
              if (this._oldOnReleaseOutside == undefined) {
                delete this._targetObject.mc.onReleaseOutside;
              } else {
                this._targetObject.mc.onReleaseOutside = this._oldOnReleaseOutside;
              }
              if (this._oldOnRelease == undefined) {
                delete this._targetObject.mc.onRelease;
              } else {
                this._targetObject.mc.onRelease = this._oldOnRelease;
              }
            }
          }
          return this.__get__enabled();
        };

        v2.__set__lineColor = function (n) {
          this._lineColor = n;
          if (this._selection_mc != undefined) {
            this.initHandles();
          }
          return this.__get__lineColor();
        };

        v2.__get__lineColor = function () {
          return this._lineColor;
        };

        v2.__set__handleFillColor = function (n) {
          this._handleFillColor = n;
          if (this._selection_mc != undefined) {
            this.initHandles();
          }
          return this.__get__handleFillColor();
        };

        v2.__get__handleFillColor = function () {
          return this._handleFillColor;
        };

        v2.__set__handleSize = function (n) {
          this._handleSize = n;
          if (this._selection_mc != undefined) {
            this.initHandles();
          }
          return this.__get__handleSize();
        };

        v2.__get__handleSize = function () {
          return this._handleSize;
        };

        v2.__set__paddingForRotation = function (n) {
          this._paddingForRotation = n;
          if (this._selection_mc != undefined) {
            this.initHandles();
          }
          return this.__get__paddingForRotation();
        };

        v2.__get__paddingForRotation = function () {
          return this._paddingForRotation;
        };

        v2.__get__width = function () {
          return this._baseWidth * (this._targetObject.getProp('_xscale') / 100);
        };

        v2.__get__height = function () {
          return this._baseHeight * (this._targetObject.getProp('_yscale') / 100);
        };

        v2.__set__bounds = function (o) {
          if (o.xMax != undefined && o.xMin != undefined && o.yMax != undefined && o.yMin != undefined) {
            this._bounds = o;
          } else {
            trace('ERROR: illegal bounds property for the TransformItem of ' + this._targetObject.mc + '. The bounds property must have valid xMax, xMin, yMax, and yMin properties.');
          }
          return this.__get__bounds();
        };

        v2.__get__bounds = function () {
          return this._bounds;
        };

        v2.__get__centerX = function () {
          return (this.__get__centerPoint()).x;
        };

        v2.__get__centerY = function () {
          return (this.__get__centerPoint()).y;
        };

        v2.__get__centerPoint = function () {
          var v2 = {'x': this._localCenterX, 'y': this._localCenterY};
          this._targetObject.boundingBox.localToGlobal(v2);
          this._targetObject.mc._parent.globalToLocal(v2);
          return v2;
        };

        v2.__get__axisX = function () {
          return (this.__get__axisPoint()).x;
        };

        v2.__get__axisY = function () {
          return (this.__get__axisPoint()).y;
        };

        v2.__get__axisPoint = function () {
          var v2 = {'x': this._localAxisX, 'y': this._localAxisY};
          this._targetObject.mc.localToGlobal(v2);
          this._targetObject.mc._parent.globalToLocal(v2);
          return v2;
        };

        v2.__get__eventHandler = function () {
          return this._eventHandler;
        };

        v2.__set__eventHandler = function (f) {
          if (f != this._eventHandler && f != undefined) {
            this.removeAllEventsListener(this._eventHandler);
            this.addAllEventsListener(f);
            this._eventHandler = f;
          }
          return this.__get__eventHandler();
        };

        v2.addProperty('axisPoint', v2.__get__axisPoint, function () {});
        v2.addProperty('axisX', v2.__get__axisX, function () {});
        v2.addProperty('axisY', v2.__get__axisY, function () {});
        v2.addProperty('bounds', v2.__get__bounds, v2.__set__bounds);
        v2.addProperty('centerPoint', v2.__get__centerPoint, function () {});
        v2.addProperty('centerX', v2.__get__centerX, function () {});
        v2.addProperty('centerY', v2.__get__centerY, function () {});
        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        v2.addProperty('eventHandler', v2.__get__eventHandler, v2.__set__eventHandler);
        v2.addProperty('handleFillColor', v2.__get__handleFillColor, v2.__set__handleFillColor);
        v2.addProperty('handleSize', v2.__get__handleSize, v2.__set__handleSize);
        v2.addProperty('height', v2.__get__height, function () {});
        v2.addProperty('lineColor', v2.__get__lineColor, v2.__set__lineColor);
        v2.addProperty('manager', v2.__get__manager, function () {});
        v2.addProperty('mc', v2.__get__mc, function () {});
        v2.addProperty('paddingForRotation', v2.__get__paddingForRotation, v2.__set__paddingForRotation);
        v2.addProperty('selected', v2.__get__selected, v2.__set__selected);
        v2.addProperty('targetObject', v2.__get__targetObject, function () {});
        v2.addProperty('width', v2.__get__width, function () {});
        ASSetPropFlags(net.typoflash.editor.TransformItem.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 342 __Packages.net.typoflash.editor.TransformManager {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.editor) {
        _global.net.typoflash.editor = new Object();
      }
      if (!_global.net.typoflash.editor.TransformManager) {
        var v1 = function (vars) {
          gs.utils.EventDispatcherAS2.initialize(this);
          this.__set__eventHandler(vars.eventHandler);
          this._allowDelete = net.typoflash.editor.TransformManager.defaultBol(vars.allowDelete, false);
          this._autoDeselect = net.typoflash.editor.TransformManager.defaultBol(vars.autoDeselect, true);
          this._constrainScale = net.typoflash.editor.TransformManager.defaultBol(vars.constrainScale, false);
          this._lockScale = net.typoflash.editor.TransformManager.defaultBol(vars.lockScale, false);
          this._scaleFromCenter = net.typoflash.editor.TransformManager.defaultBol(vars.scaleFromCenter, false);
          this._lockRotation = net.typoflash.editor.TransformManager.defaultBol(vars.lockRotation, false);
          this._lockPosition = net.typoflash.editor.TransformManager.defaultBol(vars.lockPosition, false);
          this._forceSelectionToFront = net.typoflash.editor.TransformManager.defaultBol(vars.forceSelectionToFront, false);
          this._lineColor = vars.lineColor || 14811221;
          this._handleFillColor = vars.handleFillColor || 16777215;
          this._handleSize = vars.handleSize || 8;
          this._paddingForRotation = vars.paddingForRotation || 10;
          if (vars.bounds != undefined) {
            this._bounds = vars.bounds;
          } else {
            if (vars.xMax != undefined) {
              this._bounds = {'xMax': vars.xMax, 'xMin': vars.xMin, 'yMax': vars.yMax, 'yMin': vars.yMin};
            } else {
              this._bounds = {};
            }
          }
          this._enabled = true;
          this._items_array = [];
          if (vars.items.length > 0) {
            this._items_array = vars.items;
          } else {
            if (vars.targetObjects.length > 0) {
              this.addItems(vars.targetObjects);
            }
          }
        };

        net.typoflash.editor.TransformManager = v1;
        var v2 = v1.prototype;
        v2.addItem = function (glue, vars) {
          if (vars.eventHandler != undefined) {
            this.__set__eventHandler(vars.eventHandler);
          }
          if (vars.constrainScale != undefined) {
            this.__set__constrainScale(vars.constrainScale);
          }
          if (vars.scaleFromCenter != undefined) {
            this.__set__scaleFromCenter(vars.scaleFromCenter);
          }
          if (vars.lockScale != undefined) {
            this.__set__lockScale(vars.lockScale);
          }
          if (vars.lockRotation != undefined) {
            this.__set__lockRotation(vars.lockRotation);
          }
          if (vars.lockPosition != undefined) {
            this.__set__lockPosition(vars.lockPosition);
          }
          if (vars.autoDeselect != undefined) {
            this.__set__autoDeselect(vars.autoDeselect);
          }
          if (vars.allowDelete != undefined) {
            this.__set__allowDelete(vars.allowDelete);
          }
          if (vars.bounds != undefined) {
            this.__set__bounds(vars.bounds);
          }
          if (vars.enabled != undefined) {
            this.__set__enabled(vars.enabled);
          }
          if (vars.forceSelectionToFront != undefined) {
            this.__set__forceSelectionToFront(vars.forceSelectionToFront);
          }
          var v2 = 0;
          while (v2 < this._items_array.length) {
            if (this._items_array[v2].targetObject == glue) {
              return this._items_array[v2];
            }
            ++v2;
          }
          var v5 = new net.typoflash.editor.TransformItem(glue, {'eventHandler': mx.utils.Delegate.create(this, this.eventProxy), 'forceSelectionToFront': this._forceSelectionToFront, 'constrainScale': this._constrainScale, 'scaleFromCenter': this._scaleFromCenter, 'lockScale': this._lockScale, 'lockRotation': this._lockRotation, 'lockPosition': this._lockPosition, 'autoDeselect': this._autoDeselect, 'allowDelete': this._allowDelete, 'bounds': this._bounds}, this);
          this._items_array.push(v5);
          return v5;
        };

        v2.addItems = function (tgoa, vars) {
          var v4 = [];
          var v2 = 0;
          while (v2 < tgoa.length) {
            v4.push(this.addItem(tgoa[v2], vars));
            ++v2;
          }
          return v4;
        };

        v2.addAllEventsListener = function (handler) {
          this.addEventListener('select', handler);
          this.addEventListener('deselect', handler);
          this.addEventListener('delete', handler);
          this.addEventListener('clickOff', handler);
          this.addEventListener('deleteKeyDown', handler);
          this.addEventListener('scale', handler);
          this.addEventListener('rotate', handler);
          this.addEventListener('move', handler);
          this._eventHandler = handler;
          var v2 = 0;
          while (v2 < this._items_array.length) {
            this._items_array[v2].addAllEventsListener(mx.utils.Delegate.create(this, this.eventProxy));
            ++v2;
          }
        };

        v2.removeAllEventsListener = function (handler) {
          this.removeEventListener('select', handler);
          this.removeEventListener('deselect', handler);
          this.removeEventListener('delete', handler);
          this.removeEventListener('clickOff', handler);
          this.removeEventListener('deleteKeyDown', handler);
          this.removeEventListener('scale', handler);
          this.removeEventListener('rotate', handler);
          this.removeEventListener('move', handler);
          if (this.listeners.length == 0) {
            this._eventHandler = undefined;
            var v2 = 0;
            while (v2 < this._items_array.length) {
              this._items_array[v2].removeAllEventsListener(mx.utils.Delegate.create(this, this.eventProxy));
              ++v2;
            }
          }
        };

        v2.eventProxy = function (event_obj) {
          event_obj.target = this;
          this.dispatchEvent(event_obj.type, event_obj);
        };

        v2.select = function (ti) {
          if (typeof ti == 'movieclip' || ti instanceof net.typoflash.Glue) {
            ti = this.getItemFromTargetObject(ti);
          }
          ti.select();
          return ti;
        };

        v2.deselect = function () {
          this._selectedItem.deselect();
        };

        v2.onSelectTransformItem = function (ti) {
          if (ti != undefined) {
            this._selectedItem.deselect();
            this._selectedItem = ti;
          }
        };

        v2.onDeselect = function (ti) {
          if (ti == this._selectedItem) {
            this._selectedItem = undefined;
          }
        };

        v2.getItemFromTargetObject = function (targetObject) {
          var v2 = 0;
          while (v2 < this._items_array.length) {
            if (this._items_array[v2].targetObject == targetObject) {
              return this._items_array[v2];
            }
            ++v2;
          }
        };

        v2.reset = function () {
          var v2 = 0;
          while (v2 < this._items_array.length) {
            this._items_array[v2].reset();
            ++v2;
          }
        };

        v2.update = function () {
          var v2 = 0;
          while (v2 < this._items_array.length) {
            this._items_array[v2].update();
            ++v2;
          }
        };

        v2.removeItem = function (item_obj) {
          if (typeof item_obj == 'movieclip' || item_obj instanceof TextField) {
            var v3 = this.getItemFromTargetObject(item_obj);
          } else {
            var v3 = item_obj;
          }
          if (v3 == this._selectedItem) {
            this._selectedItem.deselect(true);
          }
          var v2 = this._items_array.length - 1;
          while (v2 >= 0) {
            if (v3 == this._items_array[v2]) {
              this._items_array[v2].destroy(true);
              this._items_array.splice(v2, 1);
            }
            --v2;
          }
        };

        v2.changePropertyForAllItems = function (property_str, value_obj) {
          var v2 = 0;
          while (v2 < this._items_array.length) {
            this._items_array[v2][property_str] = value_obj;
            ++v2;
          }
        };

        v1.defaultBol = function (b, default_bol) {
          if (b == undefined) {
            return default_bol;
          } else {
            return b;
          }
        };

        v2.destroy = function () {
          this._selectedItem.deselect();
          var v2 = this._items_array.length - 1;
          while (v2 >= 0) {
            this._items_array[v2].destroy();
            --v2;
          }
          net.typoflash.editor.TransformManager.destroyInstance(this);
        };

        v1.destroyInstance = function (i) {
          false;
        };

        v2.__get__enabled = function () {
          return this._enabled;
        };

        v2.__set__enabled = function (b) {
          this._enabled = b;
          this.changePropertyForAllItems('enabled', b);
          return this.__get__enabled();
        };

        v2.__get__items = function () {
          return this._items_array;
        };

        v2.__get__targetObjects = function () {
          var v3 = [];
          var v2 = 0;
          while (v2 < this._items_array.length) {
            v3.push(this._items_array[v2].targetObject);
            ++v2;
          }
          return v3;
        };

        v2.__get__selectedTargetObject = function () {
          return this._selectedItem.__get__targetObject();
        };

        v2.__get__selectedItem = function () {
          return this._selectedItem;
        };

        v2.__set__eventHandler = function (f) {
          if (this._eventHandler != f && f != undefined) {
            this.removeAllEventsListener(this._eventHandler);
            this.addAllEventsListener(f);
          }
          return this.__get__eventHandler();
        };

        v2.__get__eventHandler = function () {
          return this._eventHandler;
        };

        v2.__set__constrainScale = function (b) {
          this._constrainScale = b;
          this.changePropertyForAllItems('constrainScale', b);
          return this.__get__constrainScale();
        };

        v2.__get__constrainScale = function () {
          return this._constrainScale;
        };

        v2.__set__lockScale = function (b) {
          this._lockScale = b;
          this.changePropertyForAllItems('lockScale', b);
          return this.__get__lockScale();
        };

        v2.__get__lockScale = function () {
          return this._lockScale;
        };

        v2.__set__scaleFromCenter = function (b) {
          this._scaleFromCenter = b;
          this.changePropertyForAllItems('scaleFromCenter', b);
          return this.__get__scaleFromCenter();
        };

        v2.__get__scaleFromCenter = function () {
          return this._scaleFromCenter;
        };

        v2.__set__lockRotation = function (b) {
          this._lockRotation = b;
          this.changePropertyForAllItems('lockRotation', b);
          return this.__get__lockRotation();
        };

        v2.__get__lockRotation = function () {
          return this._lockRotation;
        };

        v2.__set__lockPosition = function (b) {
          this._lockPosition = b;
          this.changePropertyForAllItems('lockPosition', b);
          return this.__get__lockPosition();
        };

        v2.__get__lockPosition = function () {
          return this._lockPosition;
        };

        v2.__set__allowDelete = function (b) {
          this._allowDelete = b;
          this.changePropertyForAllItems('allowDelete', b);
          return this.__get__allowDelete();
        };

        v2.__get__allowDelete = function () {
          return this._allowDelete;
        };

        v2.__set__autoDeselect = function (b) {
          this._autoDeselect = b;
          this.changePropertyForAllItems('autoDeselect', b);
          return this.__get__autoDeselect();
        };

        v2.__get__autoDeselect = function () {
          return this._autoDeselect;
        };

        v2.__set__lineColor = function (n) {
          this._lineColor = n;
          this.changePropertyForAllItems('lineColor', n);
          return this.__get__lineColor();
        };

        v2.__get__lineColor = function () {
          return this._lineColor;
        };

        v2.__set__handleFillColor = function (n) {
          this._handleFillColor = n;
          this.changePropertyForAllItems('handleFillColor', n);
          return this.__get__handleFillColor();
        };

        v2.__get__handleFillColor = function () {
          return this._handleFillColor;
        };

        v2.__set__handleSize = function (n) {
          this._handleSize = n;
          this.changePropertyForAllItems('handleSize', n);
          return this.__get__handleSize();
        };

        v2.__get__handleSize = function () {
          return this._handleSize;
        };

        v2.__set__paddingForRotation = function (n) {
          this._paddingForRotation = n;
          this.changePropertyForAllItems('paddingForRotation', n);
          return this.__get__paddingForRotation();
        };

        v2.__get__paddingForRotation = function () {
          return this._paddingForRotation;
        };

        v2.__set__bounds = function (o) {
          if (!isNaN(o.xMax) && !isNaN(o.xMin) && !isNaN(o.yMax) && !isNaN(o.yMin)) {
            this._bounds = o;
            this.changePropertyForAllItems('bounds', o);
          } else {
            trace('ERROR: illegal bounds property for a TransformManager. The bounds property must have valid xMax, xMin, yMax, and yMin properties.');
          }
          return this.__get__bounds();
        };

        v2.__get__bounds = function () {
          return this._bounds;
        };

        v2.__get__forceSelectionToFront = function () {
          return this._forceSelectionToFront;
        };

        v2.__set__forceSelectionToFront = function (b) {
          this._forceSelectionToFront = b;
          this.changePropertyForAllItems('forceSelectionToFront', b);
          return this.__get__forceSelectionToFront();
        };

        v2.getItemFromMC = net.typoflash.editor.TransformManager.prototype.getItemFromTargetObject;
        v2.addProperty('allowDelete', v2.__get__allowDelete, v2.__set__allowDelete);
        v2.addProperty('autoDeselect', v2.__get__autoDeselect, v2.__set__autoDeselect);
        v2.addProperty('bounds', v2.__get__bounds, v2.__set__bounds);
        v2.addProperty('constrainScale', v2.__get__constrainScale, v2.__set__constrainScale);
        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        v2.addProperty('eventHandler', v2.__get__eventHandler, v2.__set__eventHandler);
        v2.addProperty('forceSelectionToFront', v2.__get__forceSelectionToFront, v2.__set__forceSelectionToFront);
        v2.addProperty('handleFillColor', v2.__get__handleFillColor, v2.__set__handleFillColor);
        v2.addProperty('handleSize', v2.__get__handleSize, v2.__set__handleSize);
        v2.addProperty('items', v2.__get__items, function () {});
        v2.addProperty('lineColor', v2.__get__lineColor, v2.__set__lineColor);
        v2.addProperty('lockPosition', v2.__get__lockPosition, v2.__set__lockPosition);
        v2.addProperty('lockRotation', v2.__get__lockRotation, v2.__set__lockRotation);
        v2.addProperty('lockScale', v2.__get__lockScale, v2.__set__lockScale);
        v2.addProperty('paddingForRotation', v2.__get__paddingForRotation, v2.__set__paddingForRotation);
        v2.addProperty('scaleFromCenter', v2.__get__scaleFromCenter, v2.__set__scaleFromCenter);
        v2.addProperty('selectedItem', v2.__get__selectedItem, function () {});
        v2.addProperty('selectedTargetObject', v2.__get__selectedTargetObject, function () {});
        v2.addProperty('targetObjects', v2.__get__targetObjects, function () {});
        ASSetPropFlags(net.typoflash.editor.TransformManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 343 __Packages.gs.utils.EventDispatcherAS2 {

    #initclip
      if (!_global.gs) {
        _global.gs = new Object();
      }
      if (!_global.gs.utils) {
        _global.gs.utils = new Object();
      }
      if (!_global.gs.utils.EventDispatcherAS2) {
        var v1 = function () {};

        gs.utils.EventDispatcherAS2 = v1;
        var v2 = v1.prototype;
        v1.initialize = function ($o) {
          if (gs.utils.EventDispatcherAS2.dispatcher == undefined) {
            gs.utils.EventDispatcherAS2.dispatcher = new gs.utils.EventDispatcherAS2();
          }
          $o.addEventListener = gs.utils.EventDispatcherAS2.dispatcher.addEventListener;
          $o.removeEventListener = gs.utils.EventDispatcherAS2.dispatcher.removeEventListener;
          $o.dispatchEvent = gs.utils.EventDispatcherAS2.dispatcher.dispatchEvent;
          $o.listeners = [];
        };

        v2.addEventListener = function ($type, $handler, $scope) {
          var v6 = this;
          var v3 = v6.listeners;
          $type = $type.toLowerCase();
          var v2 = 0;
          while (v2 < v3.length) {
            if (v3[v2].type == $type && v3[v2].handler == $handler) {
              return undefined;
            }
            ++v2;
          }
          v3.push({'type': $type, 'handler': $handler, 'scope': $scope});
        };

        v2.removeEventListener = function ($type, $handler) {
          var v6 = this;
          var v3 = v6.listeners;
          $type = $type.toLowerCase();
          var v2 = v3.length - 1;
          while (v2 > -1) {
            if (v3[v2].handler == $handler && v3[v2].type == $type) {
              v3.splice(v2, 1);
              return undefined;
            }
            --v2;
          }
        };

        v2.dispatchEvent = function ($type, $event) {
          var v6 = this;
          var v3 = v6.listeners.slice();
          $type = $type.toLowerCase();
          var v2 = 0;
          while (v2 < v3.length) {
            if (v3[v2].type == $type) {
              if (v3[v2].scope != undefined) {
                v3[v2].handler.apply(v3[v2].scope, [$event]);
              } else {
                v3[v2].handler($event);
              }
            }
            ++v2;
          }
        };

        ASSetPropFlags(gs.utils.EventDispatcherAS2.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 344 __Packages.mx.utils.Delegate {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.utils) {
        _global.mx.utils = new Object();
      }
      if (!_global.mx.utils.Delegate) {
        var v1 = function (f) {
          super();
          this.func = f;
        };

        mx.utils.Delegate = v1;
        mx.utils.Delegate extends Object;
        var v2 = v1.prototype;
        v1.create = function (obj, func) {
          var v2 = function () {
            var v2 = arguments.callee.target;
            var v3 = arguments.callee.func;
            return v3.apply(v2, arguments);
          };

          v2.target = obj;
          v2.func = func;
          return v2;
        };

        v2.createDelegate = function (obj) {
          return mx.utils.Delegate.create(obj, this.func);
        };

        ASSetPropFlags(mx.utils.Delegate.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 345 __Packages.net.typoflash.base.EditorDefinition {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.base) {
        _global.net.typoflash.base = new Object();
      }
      if (!_global.net.typoflash.base.EditorDefinition) {
        var v1 = function () {};

        net.typoflash.base.EditorDefinition = v1;
        var v2 = v1.prototype;
        v1.TYPE_EXTERNAL = 'external';
        v1.TYPE_INTERNAL = 'internal';
        ASSetPropFlags(net.typoflash.base.EditorDefinition.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 346 __Packages.net.typoflash.userinterface.components.bMenu {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bMenu) {
        var v1 = function () {
          super();
          mx.events.EventDispatcher.initialize(this);
          this.nodeFromRootline = {};
          this.nodeFromUid = {};
          this.nodeFromAlias = {};
          this.menuId = this._name;
          this.menuData = null;
        };

        net.typoflash.userinterface.components.bMenu = v1;
        net.typoflash.userinterface.components.bMenu extends net.typoflash.userinterface.components.bComponentBase;
        var v2 = v1.prototype;
        v2.init = function () {};

        v2.onClick = function (node) {
          var v4 = node;
          this.activeNode = node;
          var v2 = {};
          v2.type = 'onSetActive';
          v2.orgNode = node;
          v2.node = v2.orgNode;
          this.dispatchEvent(v2);
          v2 = {};
          v2.type = 'change';
          v2.node = node;
          v2.target = this;
          this.dispatchEvent(v2);
        };

        v2.onSetPage = function (o) {};

        v2.onMenuItemActivated = function (obj) {
          if (obj.node.attributes.menuId != this.menuId) {
            if (obj.node.attributes.rootline == this.activeNode.attributes.rootline) {
              var v3 = {};
              v3.type = 'onSetActive';
              v3.node = this.activeNode;
              v3.orgNode = obj.node;
              this.dispatchEvent(v3);
              this.openRootline(v3);
            } else {
              if (this.nodeFromRootline[obj.node.attributes.rootline] != null) {
                this.activeNode = this.nodeFromRootline[obj.node.attributes.rootline];
                var v3 = {};
                v3.type = 'onSetActive';
                v3.node = this.activeNode;
                v3.orgNode = obj.node;
                this.dispatchEvent(v3);
                this.openRootline(v3);
              } else {
                if (this.nodeFromUid[obj.node.attributes.uid] != null && this.nodeFromUid[obj.node.attributes.uid] != this.menuXML.firstChild) {
                  this.activeNode = this.nodeFromUid[obj.node.attributes.uid];
                  var v3 = {};
                  v3.type = 'onSetActive';
                  v3.node = this.activeNode;
                  v3.orgNode = obj.node;
                  this.dispatchEvent(v3);
                  this.openRootline(v3);
                } else {
                  if (this.nodeFromAlias[obj.node.attributes.alias] != null && this.nodeFromUid[obj.node.attributes.uid] != this.menuXML.firstChild) {
                    this.activeNode = this.nodeFromAlias[obj.node.attributes.alias];
                    var v3 = {};
                    v3.type = 'onSetActive';
                    v3.node = this.activeNode;
                    v3.orgNode = obj.node;
                    this.dispatchEvent(v3);
                    this.openRootline(v3);
                  } else {
                    this.activeNode = null;
                    var v3 = {};
                    v3.type = 'onSetActive';
                    v3.orgNode = obj.node;
                    this.dispatchEvent(v3);
                    this.reset();
                  }
                }
              }
            }
          }
        };

        v2.onMenuItemOpened = function (obj) {};

        v2.onMenuItemClosed = function (obj) {};

        v2.isInActiveRootline = function (node) {
          return this.activeNode.attributes.rootline.indexOf(node.attributes.rootline) == 0;
        };

        v2.renderMenu = function (o) {
          this.renderBtns(this.mainSymbol, this.menuXML.firstChild.childNodes);
        };

        v2.renderBtns = function (symbol, nodes) {
          var v9 = this.wTot / nodes.length;
          var v8 = this.createEmptyMovieClip('holder', 0);
          var v3 = null;
          var v4 = 0;
          while (v4 < nodes.length) {
            nodes[v4].attributes.mc = v8.attachMovie(symbol, 'mc' + nodes[v4].attributes.rootline, v8.getNextHighestDepth());
            v3 = nodes[v4].attributes.mc;
            v3._x = v9 * v4;
            v3._y = 0;
            v3.titleTxt.autoSize = 'LEFT';
            v3.titleTxt.text = nodes[v4].attributes[this.titleField];
            if (this.dynamicFont != null) {
              _global.TF.FONT_MANAGER.applyTextFormatByReferenceName(this.dynamicFont, v3.titleTxt);
            }
            v3.mRoot = this;
            v3.menuId = this.menuId;
            v3.rootline = nodes[v4].attributes.rootline;
            this.addEventListener('onSetActive', v3);
            v3.id = v4;
            v3.node = nodes[v4];
            v3.onRelease = function () {
              this.mRoot.onClick(this.node);
            };

            v3.onRollOver = function () {
              var v2 = {};
              v2.type = 'onRolledOver';
              v2.node = this.node;
              this.mRoot.dispatchEvent(v2);
            };

            v3.onRollOut = function () {
              var v2 = {};
              v2.type = 'onRolledOut';
              v2.node = this.node;
              this.mRoot.dispatchEvent(v2);
            };

            v3.onSetActive = function (o) {
              if (o.node == this.node) {
                this.bg.states.gotoAndStop('active');
              } else {
                if (this.mRoot.isInActiveRootline(this.node)) {
                  this.bg.states.gotoAndStop('active');
                } else {
                  this.bg.states.gotoAndStop('passive');
                }
              }
            };

            var v7 = this.isInActiveRootline(v3.node);
            if (v7) {
              v3.bg.states.gotoAndStop('active');
            } else {
              v3.bg.states.gotoAndStop('passive');
            }
            ++v4;
          }
        };

        v2.openRootline = function () {};

        v2.reset = function () {};

        v2.onClearCache = function (o) {
          this.refresh();
        };

        v2.getMenuXML = function () {
          return this.menuXML;
        };

        v2.setMenuXML = function (x) {
          this.menuXML = x;
        };

        v2.array2xml = function (a) {
          var v3 = new net.typoflash.xml.XXX();
          var v2 = {};
          v2.subpages = [];
          v2.subpages[0] = a;
          if (a.subpages.length > 0) {
            v3.firstChild = this.convertSubpages(v2.subpages, v3, '');
          }
          return v3;
        };

        v2.convertSubpages = function (p, x, rLine) {
          var v4;
          var v5;
          var v2 = 0;
          while (v2 < p.length) {
            v4 = new XMLNode(1, 'item');
            for (var v6 in p[v2]) {
              if (v6 != 'subpages' && v6 != 'serviceName') {
                v4.attributes[v6] = p[v2][v6];
              }
            }
            if (p[v2].label == null && p[v2].title != null) {
              v4.attributes.label = p[v2].title;
            }
            v4.attributes.rootline = rLine + '_' + p[v2].uid;
            v5 = v4.attributes.rootline;
            this.nodeFromRootline[v5] = v4;
            if (this.nodeFromUid[p[v2].uid] == null) {
              this.nodeFromUid[p[v2].uid] = v4;
            }
            if (this.nodeFromAlias[p[v2].alias] == null && p[v2].alias.length > 0) {
              this.nodeFromAlias[p[v2].alias] = v4;
            }
            v4.attributes.menuId = this.menuId;
            v4.attributes.mRoot = this;
            if (p[v2].subpages.length > 0) {
              v4 = this.convertSubpages(p[v2].subpages, v4, v5);
            }
            x.appendChild(v4);
            this.addEventListener('onSetActive', v4);
            v4.onSetActive = function (n) {
              if (n.node == this) {
                this.attributes.isActive = 1;
              } else {
                this.attributes.isActive = 0;
                if (this.attributes.mRoot.isInActiveRootline(this)) {
                  this.attributes.isOpen = 1;
                }
              }
            };

            ++v2;
          }
          return x;
        };

        v2.bId = 'Menu';
        ASSetPropFlags(net.typoflash.userinterface.components.bMenu.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 347 __Packages.net.typoflash.userinterface.components.bFileMenu {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.components) {
        _global.net.typoflash.userinterface.components = new Object();
      }
      if (!_global.net.typoflash.userinterface.components.bFileMenu) {
        var v1 = function () {
          super();
          this.addEventListener('onSetActive', this);
          this.titleField = 'label';
          this.subSymbol = 'bFileMenuSubBtn';
          this.mainSymbol = 'StandardBtn';
          this.getPageType = false;
          this.iconInset = 16;
        };

        net.typoflash.userinterface.components.bFileMenu = v1;
        net.typoflash.userinterface.components.bFileMenu extends net.typoflash.userinterface.components.bMenu;
        var v2 = v1.prototype;
        v2.setDataProvider = function (d, m) {
          if (d.toString() == 'bDataProvider') {
            this.dataProvider = d;
          } else {
            this.dataProvider = new net.typoflash.userinterface.components.bDataProvider(d, m);
          }
          this.menuXML = this.dataProvider.xml;
          this.renderMenu();
        };

        v2.renderMenu = function () {
          this.holder = this.createEmptyMovieClip('root', 10);
          this.renderBtns(this.menuXML.firstChild.childNodes);
        };

        v2.renderBtns = function (nodes) {
          var v2;
          var v8;
          var v7;
          var v5 = 0;
          var v6 = this.wTot / nodes.length;
          var v3 = 0;
          while (v3 < nodes.length) {
            nodes[v3].attributes.mc = this.holder.attachMovie(this.mainSymbol, 'mc' + v3, v3);
            v2 = nodes[v3].attributes.mc;
            v2.node = nodes[v3];
            v2.mRoot = this;
            v2.labelTxt.autoSize = 'center';
            v2.label = nodes[v3].attributes[this.titleField];
            v2.labelTxt._x = (v6 - v2.titleTxt._width) / 2;
            v2._x = v5;
            v5 += v2.bg._width;
            if (this.mainSymbol == 'StandardBtn') {
              v2._x += v2.bg._width;
              v2._y += v2._height / 2;
            }
            v2.onRelease = function () {
              clearInterval(this.subInt);
              this.mRoot.openDropdownMenu(this.node);
            };

            v2.onRollOver = function () {
              if (this.mRoot.isOpen) {
                this.mRoot.openDropdownMenu(this.node);
              }
              this.highlite.gotoAndStop('over');
              this.icon.animation.gotoAndPlay('over');
            };

            v2.onRollOut = function () {
              this.highlite.gotoAndPlay('out');
              this.icon.animation.gotoAndPlay('out');
            };

            v2.mRoot = this;
            this.addEventListener('onSetActive', v2);
            v2.onSetActive = function (o) {
              if (o.node === this.node) {
                this.bg.hilite.gotoAndStop('over');
              } else {
                this.bg.states.gotoAndStop('passive');
              }
            };

            ++v3;
          }
        };

        v2.openDropdownMenu = function (node) {
          if (!this.isOpen) {
            this.currPopDepth = this.depthManager.getNextPopupDepth();
          }
          this.isOpen = true;
          if (node.childNodes.length <= 0) {
            this.killMouseLayer.onPress();
            return undefined;
          }
          var k = this.createEmptyMovieClip('killMouseLayer', 5);
          k.beginFill(16777215, 0);
          k.lineStyle(0, 16711935, 0);
          k.moveTo(0, 0);
          k.lineTo(Stage.width + 1000, 0);
          k.lineTo(Stage.width + 1000, Stage.height + 1000);
          k.lineTo(0, Stage.height + 1000);
          k.endFill();
          var v11 = {};
          v11.x = this._x;
          v11.y = this._y;
          this._parent.localToGlobal(v11);
          k._x = -v11.x;
          k._y = -v11.y;
          k.root = this;
          if (this.mainSymbol == 'StandardBtn') {
            var v12 = {'x': node.attributes.mc._x - node.attributes.mc._width / 2, 'y': node.attributes.mc._y + node.attributes.mc._height / 2};
          } else {
            var v12 = {'x': node.attributes.mc._x, 'y': node.attributes.mc._y + node.attributes.mc._height};
          }
          node.attributes.mc._parent.localToGlobal(v12);
          k.mc = this.depthManager.newPopup('bPopupBg', null, this.currPopDepth);
          var mc = k.mc;
          mc._x = v12.x;
          mc._y = v12.y;
          k.onPress = function () {
            this.root.isOpen = false;
            clearInterval(this.subInt);
            this.mc.removeMovieClip();
            this.removeMovieClip();
          };

          k.useHandCursor = 0;
          var v3;
          var v7;
          var v4 = 50;
          var v6 = 0;
          while (v6 < node.childNodes.length) {
            if (String(node.childNodes[v6].attributes.separatorBefore) == 'true' && v6 > 0) {
              v3 = mc.holder.attachMovie('bFileMenuStroke', 'bFileMenuStroke' + v6, 2000 - v6);
              v3.bg.topStroke._alpha = 90;
              v3._y = v7 + 3;
              v3._x = 3;
              v7 += 6;
            }
            v3 = mc.holder.attachMovie(this.subSymbol, 'sub' + v6, 1000 - v6);
            v3._y = v7;
            v7 = v3._y + v3._height + 1;
            v3.titleTxt.autoSize = 'LEFT';
            v3.titleTxt.text = node.childNodes[v6].attributes[this.titleField];
            if (this.dynamicFont != null && this.useDynamicFonts) {
              _global.TF.FONT_MANAGER.applyTextFormatByReferenceName(this.dynamicFont, v3.titleTxt, this.applyFontFormat);
            }
            v4 = Math.max(v4, v3.titleTxt._width + 30);
            v3.bg.mRoot = this;
            v3.bg.node = node.childNodes[v6];
            v3.k = k;
            v3.bg.onRelease = function () {
              clearInterval(this.mRoot.subInt);
              this.mRoot.onClick(this.node);
              this.mRoot.isOpen = false;
              this.k.onPress();
            };

            v3.bg.onRollOver = function () {
              this.hilite.gotoAndStop('over');
              if (this.node.hasChildNodes()) {
                this.mRoot.attachSub(this.node, this._parent);
              }
              var v2 = {};
              v2.type = 'onOpened';
              v2.node = this.node;
              this.mRoot.dispatchEvent(v2);
              v2.type = 'onDropdownRollOver';
              v2.target = this;
              this.mRoot.dispatchEvent(v2);
            };

            v3.bg.onRollOut = function () {
              this.hilite.gotoAndPlay('out');
              var v2 = {};
              v2.node = this.node;
              v2.type = 'onDropdownRollOut';
              v2.target = this;
              this.mRoot.dispatchEvent(v2);
            };

            if (v3.bg.node.hasChildNodes()) {
              var v9 = v3.attachMovie('bFileMenuArrow', 'arrow', 10);
            }
            if (String(node.childNodes[v6].attributes.selected) == 'true' && node.childNodes[v6].attributes.type == 'tick') {
              var v10 = v3.attachMovie('bFileMenuTick', 'tick', 20);
            }
            if (this.showIcons) {
              v3.bg.icoBg._alpha = 100;
              v3.bg.icoBg._width = this.iconInset + 2;
              if (node.childNodes[v6].attributes.icon.length > 0) {
                var v8 = v3.attachMovie(node.childNodes[v6].attributes.icon, 'icon', 30);
                v8._x = 2;
              }
            }
            this.addEventListener('onSetActive', v3.bg);
            v3.bg.onSetActive = function (o) {
              if (o.node === this.node) {
                if (String(this.node.attributes.selected) == 'true' && this.node.attributes.type == 'tick') {
                  this.node.attributes.selected = 'false';
                  this.tick._visible = false;
                } else {
                  this.node.attributes.selected = 'true';
                  this.tick._visible = true;
                }
              } else {}
            };

            ++v6;
          }
          mc.bg._height = v7;
          if (this.showIcons) {
            v4 += this.iconInset;
          }
          v6 = 0;
          while (v6 < node.childNodes.length) {
            v3 = mc.holder['sub' + v6];
            if (this.showIcons) {
              v3.titleTxt._x = 16 + this.iconInset;
              v3.tick._x = this.iconInset + 2;
            }
            v3.arrow._x = v4 - 15;
            v3.arrow._y = v3._height / 2;
            v3.subholder._x = v4 + 1;
            v3.bg._width = v4 + 1;
            mc.holder['bFileMenuStroke' + v6]._width = v4 - 6;
            ++v6;
          }
          mc.bg._width = v4 + 2;
        };

        v2.attachSub = function (node, mc) {
          clearInterval(this.subInt);
          var v4;
          var v8;
          var v12 = 50;
          mc = mc.subholder.attachMovie('bPopupBg', 'ddDropdown', 0);
          mc._y = node.attributes.mc._y + node.attributes.mc._height;
          var v7 = 0;
          while (v7 < node.childNodes.length) {
            if (String(node.childNodes[v7].attributes.separatorBefore) == 'true' && v7 > 0) {
              v4 = mc.holder.attachMovie('bFileMenuStroke', 'bFileMenuStroke' + v7, 2000 - v7);
              v4.bg.topStroke._alpha = 90;
              v4._y = v8 + 3;
              v4._x = 3;
              v8 += 6;
            }
            v4 = mc.holder.attachMovie(this.subSymbol, 'sub' + v7, 1000 - v7);
            v4._y = v8;
            v8 = v4._y + v4._height + 1;
            v4.titleTxt.autoSize = 'LEFT';
            v4.titleTxt.text = node.childNodes[v7].attributes[this.titleField];
            if (this.dynamicFont != null && this.useDynamicFonts) {
              _global.TF.FONT_MANAGER.applyTextFormatByReferenceName(this.dynamicFont, v4.titleTxt, this.applyFontFormat);
            }
            v12 = Math.max(v12, v4.titleTxt._width + 30);
            v4.bg.mRoot = this;
            v4.bg.k = mc.k;
            v4.bg.node = node.childNodes[v7];
            v4.bg.onRelease = function () {
              clearInterval(this.mRoot.subInt);
              this.mRoot.onClick(this.node);
              this.k.onPress();
              this.mRoot.isOpen = false;
            };

            v4.bg.onRollOver = function () {
              this.hilite.gotoAndStop('over');
              if (this.node.hasChildNodes()) {
                this.mRoot.attachSub(this.node, this._parent);
              }
              var v2 = {};
              v2.type = 'onOpened';
              v2.node = this.node;
              this.mRoot.dispatchEvent(v2);
              v2.type = 'onDropdownRollOver';
              v2.target = this;
              this.mRoot.dispatchEvent(v2);
            };

            v4.bg.onRollOut = function () {
              this.hilite.gotoAndPlay('out');
              var v2 = {};
              v2.node = this.node;
              v2.type = 'onDropdownRollOut';
              v2.target = this;
              this.mRoot.dispatchEvent(v2);
            };

            if (v4.bg.node.hasChildNodes()) {
              var v10 = v4.attachMovie('bFileMenuArrow', 'arrow', 10);
            }
            if (String(node.childNodes[v7].attributes.selected) == 'true' && node.childNodes[v7].attributes.type == 'tick') {
              var v11 = v4.attachMovie('bFileMenuTick', 'tick', 20);
            }
            if (this.showIcons) {
              v4.bg.icoBg._alpha = 100;
              v4.bg.icoBg._width = this.iconInset + 2;
              if (node.childNodes[v7].attributes.icon.length > 0) {
                var v9 = v4.attachMovie(node.childNodes[v7].attributes.icon, 'icon', 30);
                v9._x = 2;
              }
            }
            if (node.childNodes[v7].attributes.separatorBefore == 'true') {
              v4.bg.topStroke._alpha = 90;
            } else {
              v4.bg.topStroke._alpha = 0;
            }
            this.addEventListener('onSetActive', v4.bg);
            v4.bg.onSetActive = function (o) {
              if (o.node === this.node) {
                if (String(this.node.attributes.selected) == 'true' && this.node.attributes.type == 'tick') {
                  this.node.attributes.selected = 'false';
                  this.tick._visible = false;
                } else {
                  this.node.attributes.selected = 'true';
                  this.tick._visible = true;
                }
              } else {}
            };

            this.addEventListener('onOpened', v4.bg);
            v4.bg.onOpened = function (o) {
              if (o.node != this.node.parentNode && !this._parent._parent._parent.hitTest(_root._xmouse, _root._ymouse)) {
                this._parent._parent._parent.removeMovieClip();
              }
            };

            ++v7;
          }
          mc.bg._height = v8;
          if (this.showIcons) {
            v12 += this.iconInset;
          }
          v7 = 0;
          while (v7 < node.childNodes.length) {
            v4 = mc.holder['sub' + v7];
            if (this.showIcons) {
              v4.titleTxt._x = 16 + this.iconInset;
              v4.tick._x = this.iconInset + 2;
            }
            v4.arrow._x = v12 - 15;
            v4.arrow._y = v4._height / 2;
            v4.bg._width = v12 + 1;
            mc.holder['bFileMenuStroke' + v7]._width = v12 - 6;
            v4.subholder._x = v12 + 1;
            ++v7;
          }
          mc.bg._width = v12 + 2;
          v12 = new mx.transitions.Tween(mc, '_x', mx.transitions.easing.Regular.easeOut, 20, 1, 0.2, true);
        };

        v2.openRootline = function () {
          this.renderMenu();
        };

        v2.onSetActive = function (o) {
          this.killMouseLayer.onPress();
          this.isOpen = false;
        };

        v2.close = function () {
          this.killMouseLayer.onPress();
          this.isOpen = false;
        };

        v2.onGetMenu = function (o) {};

        v2.reset = function () {
          this.renderMenu();
        };

        ASSetPropFlags(net.typoflash.userinterface.components.bFileMenu.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 348 __Packages.net.typoflash.editor.TypoFlash {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.editor) {
        _global.net.typoflash.editor = new Object();
      }
      if (!_global.net.typoflash.editor.TypoFlash) {
        var v1 = function () {
          super();
          _global.TF.EDITOR = this;
          _global.TF.CONTENT_EDITING = net.typoflash.ContentEditing.global;
          _global.TF.CORE_EVENTS.addEventListener('onError', this);
          if (_global.TF.CONF.USE_SWX) {
            net.typoflash.utils.Debug.trace('Setting transfer mode to AMF when editing for higher reliability.');
            _global.TF.CONF.USE_SWX = 0;
          }
          mx.events.EventDispatcher.initialize(this);
        };

        net.typoflash.editor.TypoFlash = v1;
        net.typoflash.editor.TypoFlash extends MovieClip;
        var v2 = v1.prototype;
        v2.onLoad = function () {
          var v6 = new net.typoflash.base.ConfigBase();
          this.iconsize = 40;
          this.row = [];
          this.topbarHeight = this.topbarBg._height;
          this.topbarBg._width = 4000;
          this.depthManager = new net.typoflash.managers.DepthManager(this);
          this.transformManager = new net.typoflash.editor.TransformManager({'forceSelectionToFront': false, 'eventHandler': this.onAnyEvent, 'scaleFromCenter': false});
          this.container = this.createEmptyMovieClip('container', 10);
          this.frames = this.container.createEmptyMovieClip('frames', this.container.getNextHighestDepth());
          this.icons = this.container.createEmptyMovieClip('icons', this.container.getNextHighestDepth());
          this.fileMenu = this.attachMovie('FileMenu', 'fileMenu', 20);
          this.fileMenu._x = 81;
          this.fileMenu._y = 11;
          this.fileMenu._visible = false;
          this.container._visible = this.fileMenu._visible;
          _global.TF.CORE_EVENTS.addEventListener('onEditStatus', this);
          _global.TF.CORE_EVENTS.addEventListener('onBELoginStatus', this);
          _global.TF.CONTENT_RENDERING.addEventListener('onClearCache', this);
          _global.TF.CONTENT_EDITING.addEventListener('onExternalEdit', this);
          this.inTw = new mx.transitions.Tween(this, 'tweenIn', mx.transitions.easing.Regular.easeInOut, 0, 1, 0.4, true);
          if (_global.TF.BE_USER.uid > 0) {
            this.loadBasicInfo();
          }
          var v5 = _global.TF.CONF.COMPONENT_STYLE;
          var v4 = v5.dynamicFontId;
          var v9 = _global.TF.DYNAMIC_FONTS[v4];
          if (v4 != null && _global.TF.DYNAMIC_FONTS[v4] != null) {
          }
          for (var v3 in _global.TF.CONF.ASSOCIATIVE_LIST) {
            this.registerObject(_global.TF.CONF.ASSOCIATIVE_LIST[v3]);
          }
        };

        v2.loadBasicInfo = function () {
          _global.TF.CONTENT_EDITING.getComponents();
          _global.TF.CONTENT_EDITING.getMediaCategories();
          _global.TF.CONTENT_EDITING.getAccessiblePages();
          this.isInitialised = true;
        };

        v2.__set__tweenIn = function (s) {
          this.twY = s;
          this._y = -this.topbarHeight + this.topbarHeight * s;
          this.container._y = this.topbarHeight * s;
          _global.TF.LAYER.template._y = this.topbarHeight * s;
          _global.TF.LAYER.preloader._y = this.topbarHeight * s;
          return this.__get__tweenIn();
        };

        v2.__get__tweenIn = function () {
          return this.twY;
        };

        v2.logout = function () {
          net.typoflash.Authentication.BElogout();
        };

        v2.onBELoginStatus = function (obj) {
          if (obj.status == true) {
            _global.TF.COOKIE.setData('editEnabled', 1);
            this.fileMenu._visible = true;
            this.container._visible = this.fileMenu._visible;
            if (!this.isInitialised) {
              this.loadBasicInfo();
            }
          } else {
            if (obj.status != 'pending') {
              _global.TF.COOKIE.setData('editEnabled', 0);
              this.fileMenu._visible = false;
              this.container._visible = this.fileMenu._visible;
            }
          }
        };

        v2.registerObject = function (c) {
          if (c.mc._alpha == null) {
            _global.TF.CONF.ASSOCIATIVE_LIST[c.key] = null;
            c.unregister();
            false;
            return undefined;
          }
          var v5 = this.icons.getNextHighestDepth();
          c.pen = this.icons.attachMovie('EditorIcon', 'EditorIcon' + v5, v5);
          var v7 = this.positionPen(c);
          this.allocateSlot(v7, c.pen);
          c.pen.icon.gotoAndStop(c.editorClass);
          if (c.enabled) {
            c.pen._alpha = 100;
          } else {
            c.pen._alpha = 20;
          }
          c.pen.bg.onRelease = net.typoflash.utils.Proxy.create(this, this.loadEditor, c);
          c.pen.bg.onRollOver = net.typoflash.utils.Proxy.create(this, this.showBoundingBox, c);
          c.pen.bg.onRollOut = net.typoflash.utils.Proxy.create(this, this.hideBoundingBox, c);
          this.rebuildObjectList();
          if (c.editorClass != 'Component') {
            this.addEventListener('updatePenOnTweenChange', c);
            this.addEventListener('updatePenOnTweenComplete', c);
            c.updatePenOnTweenChange = function (o) {
              if (o.target != this) {
                this.pen._alpha = 20;
              }
            };

            c.updatePenOnTweenComplete = function (o) {
              if (o.target != this) {
                if (this.pDelay <= 0) {
                  clearInterval(this.pDelay);
                  this.pDelay = setInterval(this, 'delayedPenUpdate', 1000);
                }
              }
            };

            c.delayedPenUpdate = function () {
              clearInterval(this.pDelay);
              this.pDelay = 0;
              if (this.enabled) {
                this.pen._alpha = 100;
              } else {
                this.pen._alpha = 20;
              }
              var v4 = _global.TF.EDITOR.getPenPoint(this);
              var v3 = _global.TF.EDITOR.checkSlot(v4, this.pen);
              if (this.pen.tx != v3.tx || this.pen.ty != v3.ty) {
                _global.TF.EDITOR.allocateSlot(v4, this.pen);
              }
            };

          } else {
            c.addEventListener('onTweenChange', this);
            c.addEventListener('onTweenComplete', this);
            c.addEventListener('onData', this);
          }
          c.onGlobalStorePageData = function (o) {
            if (this.unsaved) {
              this.storePageData();
            }
          };

          c.onGlobalStoreTemplateData = function (o) {
            if (this.unsaved) {
              if (this.editorClass == 'Component') {
                this.storePageData();
              } else {
                this.storeTemplateData();
              }
            }
          };

          c.onGlobalRevert = function (o) {
            this.revert();
          };

          c.onTransform = function (o) {
            _global.TF.EDITOR.updatePenPosition(this);
          };

          this.addEventListener('onGlobalStorePageData', c);
          this.addEventListener('onGlobalStoreTemplateData', c);
          this.addEventListener('onGlobalRevert', c);
          this.addEventListener('onTransform', c);
          var v4 = {};
          v4.type = 'onRegisterObject';
          v4.data = c;
          this.dispatchEvent(v4);
        };

        v2.unregisterObject = function (c) {
          if (c.key == null) {
            net.typoflash.utils.Debug.trace('Trying to unregisterObject null object.');
            return undefined;
          } else {
            if (_global.TF.CONF.ASSOCIATIVE_LIST[c.key].mc != c.mc) {
              return undefined;
            }
          }
          _global.TF.EDITOR.row[c.pen.ty][c.pen.tx] = null;
          if (_global.TF.EDITOR.currGlue == c) {
            _global.TF.EDITOR.currGlue = null;
          }
          c.editor.close();
          c.pen.removeMovieClip();
          this.removeEventListener('updatePenOnTweenChange', c);
          this.removeEventListener('updatePenOnTweenComplete', c);
          this.removeEventListener('onGlobalStorePageData', c);
          this.removeEventListener('onGlobalStoreTemplateData', c);
          this.removeEventListener('onGlobalRevert', c);
          this.removeEventListener('onTransform', c);
          var v4 = {};
          v4.type = 'onUnregisterObject';
          v4.data = c.key;
          _global.TF.CONF.ASSOCIATIVE_LIST[c.key] = null;
          this.rebuildObjectList();
          this.dispatchEvent(v4);
        };

        v2.rebuildObjectList = function () {
          _global.TF.CONF.LIST = [];
          var v3 = _global.TF.CONF.LIST;
          var v2;
          for (var v6 in _global.TF.CONF.ASSOCIATIVE_LIST) {
            if (typeof _global.TF.CONF.ASSOCIATIVE_LIST[v6].mc != 'movieclip') {
              continue;
            }
            v2 = _global.TF.CONF.ASSOCIATIVE_LIST[v6];
            if (v2.editorClass == 'Component') {
              v3.push({'label': 'Comp ' + v2.data.uid + ' » ' + v2.data.name, 'data': v2});
            } else {
              if (v2.editorClass == 'Frame') {
                v3.push({'label': 'Frame » ' + v2.mc._name, 'data': v2});
              } else {
                if (v2.editorClass == 'Menu') {
                  v3.push({'label': 'Menu » ' + v2.mc._name, 'data': v2});
                } else {
                  if (v2.editorClass == 'MC') {
                    v3.push({'label': 'MC » ' + v2.mc._name, 'data': v2});
                  } else {
                    if (v2.editorClass == 'Template') {
                      v3.push({'label': 'Template', 'data': v2});
                    } else {
                      v3.push({'label': v2.key, 'data': v2});
                    }
                  }
                }
              }
            }
          }
        };

        v2.onEditStatus = function (o) {
          if (o.status) {
            this.container._visible = true;
          } else {
            this.container._visible = false;
          }
        };

        v2.showBoundingBox = function (c) {
          if (!c.enabled) {
            return undefined;
          }
          this.loadEditor(c);
        };

        v2.hideBoundingBox = function (c) {
          (c.__get__editor()).hideBoundingBox();
        };

        v2.loadEditor = function (c) {
          if (!c.enabled) {
            return undefined;
          }
          if (_global.TF.EDITOR.currGlue != null) {
            this.unloadEditor(_global.TF.EDITOR.currGlue);
          }
          c.editor = c.pen.holder.attachMovie('Editor', 'Editor', 10, {'glue': c});
          _global.TF.EDITOR.currGlue = c;
          return c.editor;
        };

        v2.onAnyEvent = function (event_obj) {
          if (event_obj.transformed) {
            var v3 = event_obj.targetObject;
            v3.unsaved = true;
            v3.pen.bg.gotoAndStop('unsaved');
            var v2 = {};
            v2.type = 'onTransform';
            v2.data = v3;
            v2.target = _global.TF.EDITOR;
            _global.TF.EDITOR.dispatchEvent(v2);
          }
        };

        v2.updatePenPosition = function (c) {
          var v4 = _global.TF.EDITOR.getPenPoint(c);
          var v3 = _global.TF.EDITOR.checkSlot(v4, c.pen);
          if (c.pen.tx != v3.tx || c.pen.ty != v3.ty) {
            _global.TF.EDITOR.allocateSlot(v4, c.pen);
          }
        };

        v2.clearCache = function () {
          _global.TF.CONTENT_RENDERING.clearCache();
        };

        v2.toggleVisible = function (itemType, status) {
          var v2 = {};
          v2.type = 'onEnableGlue';
          v2.data = itemType;
          v2.status = status == 'true';
          _global.TF.COOKIE.setData('TF' + itemType + 'Editable', v2.status);
          _global.TF.CORE_EVENTS.dispatchEvent(v2);
        };

        v2.sendToCentre = function (c) {
          var v5 = _global.TF.EDITOR.currGlue.getProp('_width');
          var v4 = _global.TF.EDITOR.currGlue.getProp('_height');
          var v3 = {'x': (Stage.width - v5) / 2, 'y': (Stage.height - v4) / 2};
          _global.TF.EDITOR.currGlue.mc._parent.globalToLocal(v3);
          _global.TF.EDITOR.currGlue.setProp('_x', v3.x);
          _global.TF.EDITOR.currGlue.setProp('_y', v3.y);
          _global.TF.EDITOR.currGlue.editor.close();
          v3 = this.positionPen(_global.TF.EDITOR.currGlue);
          this.allocateSlot(v3, _global.TF.EDITOR.currGlue.pen);
        };

        v2.deletePageDataForComponent = function (c) {
          if (c == null) {
            c = this.currGlue;
          }
          _global.TF.CONTENT_EDITING.deletePageData(c._TFkey, _global.TF.PID);
        };

        v2.unloadEditor = function (c) {
          var v3 = this.positionPen(c);
          this.allocateSlot(v3, c.pen);
          c.editor.close();
        };

        v2.positionPen = function (c) {
          var v2 = this.getPenPoint(c);
          c.pen._x = v2.x;
          c.pen._y = v2.y;
          return v2;
        };

        v2.getPenPoint = function (c) {
          var v2 = {};
          if (c.getProp('_x') / c.getProp('_x') == 1) {
            v2.x = c.getProp('_x');
          } else {
            v2.x = c.mc._x;
          }
          if (c.getProp('_y') / c.getProp('_y') == 1) {
            v2.y = c.getProp('_y');
            c.mc._parent.localToGlobal(v2);
            v2.x = Math.max(0, v2.x);
            v2.y -= this.container._y;
            v2.y = Math.max(0, v2.y);
            return v2;
          }
          v2.y = c.mc._y;
          c.mc._parent.localToGlobal(v2);
          v2.x = Math.max(0, v2.x);
          v2.y -= this.container._y;
          v2.y = Math.max(0, v2.y);
          return v2;
        };

        v2.allocateSlot = function (o, c) {
          var v5 = int(o.x / this.iconsize);
          var v4 = int(o.y / this.iconsize);
          if (this.row[v4] == null) {
            this.row[v4] = [];
          }
          var v2 = v5;
          while (v2 < 200) {
            if (this.row[v4][v2] == null || this.row[v4][v2] == c) {
              this.row[v4][v2] = c;
              c.ty = v4;
              c.tx = v2;
              c._x = v2 * this.iconsize;
              c._y = v4 * this.iconsize;
              break;
            }
            ++v2;
          }
        };

        v2.checkSlot = function (o, c) {
          var v4 = int(o.x / this.iconsize);
          var v3 = int(o.y / this.iconsize);
          if (this.row[v3] == null) {
            this.row[v3] = [];
          }
          var v2 = v4;
          while (v2 < 200) {
            if (this.row[v3][v2] == null || this.row[v3][v2] == c) {
              return {'ty': v3, 'tx': v2, 'x': v2 * this.iconsize, 'y': v3 * this.iconsize};
              break;
            }
            ++v2;
          }
        };

        v2.onTweenChange = function (o) {
          var v1 = o.target;
          v1.pen._alpha = 20;
        };

        v2.onTweenComplete = function (o) {
          var v2 = o.target;
          var v3 = this.positionPen(v2);
          this.allocateSlot(v3, v2.pen);
          v2.pen._alpha = 100;
        };

        v2.onData = function (o) {
          var v2 = o.target;
          this.positionPen(v2);
        };

        v2.globalStorePageData = function (o) {
          o = {};
          o.type = 'onGlobalStorePageData';
          o.target = this;
          this.dispatchEvent(o);
        };

        v2.globalStoreTemplateData = function (o) {
          o = {};
          o.type = 'onGlobalStoreTemplateData';
          o.target = this;
          this.dispatchEvent(o);
        };

        v2.globalRevert = function (o) {
          o = {};
          o.type = 'onGlobalRevert';
          o.target = this;
          this.dispatchEvent(o);
        };

        v2.addComponent = function (glue) {
          var v4 = _global.TF.CONTENT_RENDERING.page.TEMPLATE.pid;
          if (glue.key == null) {
            var v3 = 'NewComponent';
          } else {
            var v3 = glue.key;
          }
          var v5 = _global.TF.HOST_URL + 'typo3/alt_doc.php?edit[tx_typoflash_component][' + v4 + ']=new&noView=1&returnUrl=/typo3conf/ext/typoflash/pi1/close_and_refresh.php?key=' + v3;
          var v7 = 590;
          var v6 = 500;
          this.getURL('javascript:popup(\'' + v5 + '\',' + v7 + ',' + v6 + ')', '_self');
        };

        v2.onExternalEdit = function (o) {
          net.typoflash.utils.Debug.trace('onExternalEdit: ' + o.data);
          if (o.data == 'NewComponent') {
            _global.TF.CONTENT_EDITING.getComponents();
          }
        };

        v2.traceMotherLoad = function () {
          if (!_global.TF.COOKIE.data.debugEnabled) {
            this.turnOnDebug();
          }
          net.typoflash.utils.Debug.trace(_global.TF.CONTENT_RENDERING.motherload);
        };

        v2.traceCurrentPage = function () {
          if (!_global.TF.COOKIE.data.debugEnabled) {
            this.turnOnDebug();
          }
          net.typoflash.utils.Debug.trace(_global.TF.CONTENT_RENDERING.page);
        };

        v2.clearDebug = function () {
          net.typoflash.utils.Debug.clear();
        };

        v2.turnOnDebug = function () {
          var v3 = {'target': this, 'type': 'onDebugStatus', 'status': !_global.TF.COOKIE.data.debugEnabled};
          _global.TF.CORE_EVENTS.dispatchEvent(v3);
        };

        v2.alert = function (msg) {
          this.depthManager.alert(msg);
        };

        v2.gotoT3be = function () {
          this.getURL('/typo3/', '_blank');
        };

        v2.gotoT3 = function () {
          this.getURL('http://typo3.org/documentation/', '_blank');
        };

        v2.gotoTypoflash = function () {
          this.getURL('http://typoflash.net', '_blank');
        };

        v2.gotoHtml = function () {
          this.getURL('/?id=' + _global.TF.PID + '&L=' + _global.TF.LANGUAGE + '&flash=0', '_blank');
        };

        v2.about = function () {
          this.alert('TypoFlash version ' + this.version + '. <br/>Developed by Andreas Borg at <a href=\'http://elevated.to\' target=\'_blank\'>Elevated</a>. <br/>2008. All rights reserved.');
        };

        v2.onError = function (o) {
          this.alert(o.errormsg);
        };

        v2.isInitialised = false;
        v2.version = 0.8;
        v2.addProperty('tweenIn', v2.__get__tweenIn, v2.__set__tweenIn);
        ASSetPropFlags(net.typoflash.editor.TypoFlash.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 349 __Packages.net.typoflash.ContentEditing {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.ContentEditing) {
        var v1 = function () {
          if (!net.typoflash.ContentEditing._allowInstantiation) {
            trace('Error: Instantiation failed: Use _global[\'TF\'][\'CONTENT_EDITING\'] = ContentEditing.global instead of new ContentEditing().');
            return undefined;
          }
          mx.events.EventDispatcher.initialize(this);
          this._gateway = _global.TF.REMOTING_GATEWAY;
          if (this._gateway.length <= 0) {
            this._gateway = '/typo3conf/ext/flashremoting/amf.php';
          }
          this._service = new mx.remoting.Service(this._gateway, null, 'typoflash.remoting.contentediting', null, null);
          _global.TF.CORE_EVENTS.addEventListener('onBELoginStatus', this);
        };

        net.typoflash.ContentEditing = v1;
        var v2 = v1.prototype;
        v2.storePageData = function (key, data, pid, L) {
          var v3 = {};
          if (L != null) {
            v3.L = L;
          } else {
            v3.L = _global.TF.LANGUAGE;
          }
          v3.data = data;
          v3.key = key;
          if (pid != null) {
            v3.id = pid;
            var v4 = this._service.storePageData(v3);
            v4.__set__responder(new mx.rpc.RelayResponder(this, 'handleStorePageData', 'handleRemotingError'));
          } else {
            v3.id = _global.TF.CONTENT_RENDERING.page.TEMPLATE.template_pid;
            var v4 = this._service.storePageData(v3);
            v4.__set__responder(new mx.rpc.RelayResponder(this, 'handleStoreTemplateData', 'handleRemotingError'));
          }
          net.typoflash.utils.Debug.trace('ContentEditing.StorePageData got...');
          net.typoflash.utils.Debug.trace(v3);
          v3 = {};
          v3.type = 'onStorePageData';
          v3.status = 'pending';
          this.dispatchEvent(v3);
        };

        v2.handleStorePageData = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v2 = {};
            v2.type = 'onStorePageData';
            v2.status = false;
            v2.errortype = (re.__get__result()).errortype;
            v2.errormsg = (re.__get__result()).errormsg;
            this.dispatchEvent(v2);
          } else {
            var v2 = {};
            v2.type = 'onStorePageData';
            v2.status = true;
            v2.data = re.result;
            this.dispatchEvent(v2);
            this.clearCache();
          }
          net.typoflash.utils.Debug.trace('ContentEditing.handleStorePageData got...');
          net.typoflash.utils.Debug.trace(re.__get__result());
        };

        v2.handleStoreTemplateData = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v2 = {};
            v2.type = 'onStorePageData';
            v2.status = false;
            v2.errortype = (re.__get__result()).errortype;
            v2.errormsg = (re.__get__result()).errormsg;
            this.dispatchEvent(v2);
          } else {
            var v2 = {};
            v2.type = 'onStorePageData';
            v2.status = true;
            v2.data = re.result;
            this.dispatchEvent(v2);
            this.clearCache();
          }
          net.typoflash.utils.Debug.trace('ContentEditing.handleStoreTemplateData got...');
          net.typoflash.utils.Debug.trace(re.__get__result());
        };

        v2.storeHtmlVars = function (key, data, pid, L) {
          var v3 = {};
          if (L != null) {
            v3.L = L;
          } else {
            v3.L = _global.TF.LANGUAGE;
          }
          v3.data = data;
          v3.key = key;
          if (pid != null) {
            v3.id = pid;
          } else {
            v3.id = _global.TF.CONTENT_RENDERING.page.TEMPLATE.template_pid;
          }
          var v4 = this._service.storeHtmlVars(v3);
          v4.__set__responder(new mx.rpc.RelayResponder(this, 'handleStoreHtmlVars', 'handleRemotingError'));
          v3 = {};
          v3.type = 'onStoreHtmlVars';
          v3.status = 'pending';
          this.dispatchEvent(v3);
        };

        v2.handleStoreHtmlVars = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v3 = {};
            v3.type = 'onStoreHtmlVars';
            v3.status = false;
            v3.errortype = (re.__get__result()).errortype;
            v3.errormsg = (re.__get__result()).errormsg;
            this.dispatchEvent(v3);
          } else {
            var v3 = {};
            v3.type = 'onStoreHtmlVars';
            v3.status = true;
            v3.data = re.result;
            this.dispatchEvent(v3);
            this.clearCache();
            var v5 = _global.TF.HOST_URL + '?no_cache=1&random=' + getTimer() + '#L=' + _global.TF.LANGUAGE + '&id=' + _global.TF.PID;
            getURL(v5, '_top');
          }
        };

        v2.deletePageData = function (key, pid, L) {
          var v3 = {};
          if (L != null) {
            v3.L = L;
          } else {
            v3.L = _global.TF.LANGUAGE;
          }
          v3.key = key;
          if (pid != null) {
            v3.id = pid;
          } else {
            v3.id = _global.TF.CONTENT_RENDERING.page.TEMPLATE.template_pid;
          }
          var v4 = this._service.deletePageData(v3);
          v4.__set__responder(new mx.rpc.RelayResponder(this, 'handleDeletePageData', 'handleRemotingError'));
          v3 = {};
          v3.type = 'onDeletePageData';
          v3.status = 'pending';
          this.dispatchEvent(v3);
        };

        v2.handleDeletePageData = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v4 = {};
            v4.type = 'onDeletePageData';
            v4.status = false;
            v4.errortype = (re.__get__result()).errortype;
            v4.errormsg = (re.__get__result()).errormsg;
            this.dispatchEvent(v4);
            v4.errorfunction = 'deletePageData';
            v4.errortype = (re.__get__result()).errortype;
            v4.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            var v4 = {};
            v4.type = 'onDeletePageData';
            v4.status = true;
            v4.data = re.result;
            this.dispatchEvent(v4);
            this.clearCache();
          }
          net.typoflash.utils.Debug.trace('ContentEditing.handleDeletePageData got...');
          net.typoflash.utils.Debug.trace(re.__get__result());
        };

        v2.externalEdit = function (rec) {
          var v2 = {};
          v2.type = 'onExternalEdit';
          v2.data = rec;
          this.dispatchEvent(v2);
        };

        v2.getComponents = function (pid) {
          var v2 = {};
          if (pid != null) {
            v2.id = pid;
          }
          var v3 = this._service.getComponents(v2);
          v3.__set__responder(new mx.rpc.RelayResponder(this, 'handleGetComponents', 'handleRemotingError'));
        };

        v2.handleGetComponents = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v5 = {};
            v5.type = 'onError';
            v5.errorfunction = 'handleGetComponents';
            v5.errortype = (re.__get__result()).errortype;
            v5.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v5);
          } else {
            if (re.__get__result()) {
              var v5 = {};
              v5.type = 'onGetComponents';
              v5.status = true;
              v5.data = [];
              var v3 = 0;
              while (v3 < (re.__get__result()).length) {
                v5.data.push({'label': (re.__get__result())[v3].name, 'data': (re.__get__result())[v3]});
                ++v3;
              }
              _global.TF.COMPONENT_LIST = v5.data;
              this.dispatchEvent(v5);
            } else {}
          }
          net.typoflash.utils.Debug.trace('ContentEditing.GetComponents got ' + _global.TF.COMPONENT_LIST.length + ' components');
        };

        v2.getAccessiblePages = function () {
          var v2 = {};
          var v3 = this._service.getAccessiblePages(v2);
          v3.__set__responder(new mx.rpc.RelayResponder(this, 'handleGetAccessiblePages', 'handleRemotingError'));
        };

        v2.handleGetAccessiblePages = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v6 = {};
            v6.type = 'onError';
            v6.errorfunction = 'handleGetAccessiblePages';
            v6.errortype = (re.__get__result()).errortype;
            v6.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v6);
          } else {
            if (re.__get__result()) {
              var v6 = {};
              v6.type = 'onGetAccessiblePages';
              v6.status = true;
              var v5 = [];
              var v3 = 0;
              while (v3 < (re.__get__result()).length) {
                v5.push(this.getAccessiblePageDataProvider((re.__get__result())[v3]));
                ++v3;
              }
              _global.TF.ACCESSIBLE_PAGES = re.result;
              _global.TF.ACCESSIBLE_PAGES.dataProvider = v5;
              this.dispatchEvent(v6);
            } else {}
          }
          net.typoflash.utils.Debug.trace('ContentEditing.handleGetAccessiblePages got ' + _global.TF.ACCESSIBLE_PAGES.length + ' pages');
        };

        v2.getAccessiblePageDataProvider = function (o) {
          var v4 = {'label': o.title, 'data': o.uid, 'type': 'tick', 'func': 'setRootPage', 'subdata': []};
          var v2 = 0;
          while (v2 < o.subpages.length) {
            v4.subdata.push(this.getAccessiblePageDataProvider(o.subpages[v2]));
            ++v2;
          }
          return v4;
        };

        v2.getMediaCategories = function () {
          var v2 = this._service.getMediaCategories();
          v2.__set__responder(new mx.rpc.RelayResponder(this, 'handleGetMediaCategories', 'handleRemotingError'));
        };

        v2.handleGetMediaCategories = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v6 = {};
            v6.type = 'onError';
            v6.errorfunction = 'handleGetMediaCategories';
            v6.errortype = (re.__get__result()).errortype;
            v6.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v6);
          } else {
            if (re.__get__result()) {
              var v6 = {};
              v6.type = 'onGetMediaCategories';
              v6.status = true;
              var v5 = [];
              var v3 = 0;
              while (v3 < (re.__get__result()).tree.length) {
                v5.push(this.getMediaCatProvider((re.__get__result()).tree[v3]));
                ++v3;
              }
              _global.TF.MEDIA_CATEGORIES = re.result;
              _global.TF.MEDIA_CATEGORIES.dataProvider = new net.typoflash.userinterface.components.bDataProvider(v5, true);
              this.dispatchEvent(v6);
            } else {}
          }
          net.typoflash.utils.Debug.trace('Loaded _global[\'TF\'][\'MEDIA_CATEGORIES\']. Root cats num:' + (re.__get__result()).tree.length);
        };

        v2.getMediaCatProvider = function (o) {
          var v4 = {'label': o.lang[0].title, 'data': 'tx_dam_cat_' + o.lang[0].uid, 'type': 'tick', 'func': 'toggleMediaCategory', 'subdata': []};
          var v2 = 0;
          while (v2 < o.subcat.length) {
            v4.subdata.push(this.getMediaCatProvider(o.subcat[v2]));
            ++v2;
          }
          return v4;
        };

        v2.setMediaCategories = function (c) {
          var v2 = this._service.setMediaCategories(c);
          v2.__set__responder(new mx.rpc.RelayResponder(this, 'handleSetMediaCategories', 'handleRemotingError'));
        };

        v2.handleSetMediaCategories = function (re) {
          if (re.result.errortype > 0) {
            var v4 = {};
            v4.type = 'onError';
            v4.errorfunction = 'saveContent';
            v4.errortype = re.result.errortype;
            v4.errormsg = re.result.errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            if (re.result) {
              var v4 = {};
              v4.type = re.result.callback;
              v4.data = re.result;
              this.dispatchEvent(v4);
            } else {}
          }
          net.typoflash.utils.Debug.trace('ContentEditing.handleSetMediaCategories got...');
          net.typoflash.utils.Debug.trace(re.result);
        };

        v2.saveContent = function (c) {
          if (c.pid == null) {
            c.pid = _global.TF.CONTENT_RENDERING.page.HEADER.uid;
          }
          var v4 = this._service.saveContent(c);
          v4.__set__responder(new mx.rpc.RelayResponder(this, 'handleSaveContent', 'handleRemotingError'));
        };

        v2.handleSaveContent = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v4 = {};
            v4.type = 'onError';
            v4.errorfunction = 'saveContent';
            v4.errortype = (re.__get__result()).errortype;
            v4.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            if (re.__get__result()) {
              var v4 = {};
              v4.type = 'onSaveContent';
              v4.status = true;
              v4.data = re.result;
              _global.TF.COMPONENT_LIST.push({'label': (re.__get__result()).name, 'data': re.__get__result()});
              this.clearCache();
              this.dispatchEvent(v4);
            } else {}
          }
          net.typoflash.utils.Debug.trace('ContentEditing.GetComponents got...');
          net.typoflash.utils.Debug.trace(re);
        };

        v2.deleteContent = function (c) {
          if (c.uid <= 0) {
            net.typoflash.utils.Debug.trace('ContentEditing.deleteContent unhappy with the following...');
            net.typoflash.utils.Debug.trace(c);
            return undefined;
          }
          var v3 = {};
          v3.pid = _global.TF.CONTENT_RENDERING.page.HEADER.uid;
          v3.uid = c.uid;
          var v5 = this._service.deleteContent(v3);
          v5.__set__responder(new mx.rpc.RelayResponder(this, 'handleDeleteContent', 'handleRemotingError'));
        };

        v2.handleDeleteContent = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v3 = {};
            v3.type = 'onError';
            v3.errorfunction = 'deleteContent';
            v3.errortype = (re.__get__result()).errortype;
            v3.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v3);
          } else {
            if (re.__get__result()) {
              var v3 = {};
              v3.type = 'onDeleteContent';
              v3.status = true;
              v3.data = re.result;
              this.clearCache();
              this.dispatchEvent(v3);
            } else {}
          }
          net.typoflash.utils.Debug.trace('ContentEditing.deleteContent got...');
          net.typoflash.utils.Debug.trace(re);
        };

        v2.storeLinkedRecord = function (c) {
          if (c.uid == null) {
            net.typoflash.utils.Debug.trace('No component uid set for storeLinkedRecord');
            return undefined;
          }
          if (c.table == null) {
            net.typoflash.utils.Debug.trace('No table set for storeLinkedRecord');
            return undefined;
          }
          if (c.record == null) {
            net.typoflash.utils.Debug.trace('No record set for storeLinkedRecord');
            return undefined;
          }
          if (c.record.pid == null) {
            net.typoflash.utils.Debug.trace('No record pid set for storeLinkedRecord');
            return undefined;
          }
          var v3 = this._service.storeLinkedRecord(c);
          v3.__set__responder(new mx.rpc.RelayResponder(this, 'handleStoreLinkedRecord', 'handleRemotingError'));
        };

        v2.handleStoreLinkedRecord = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v3 = {};
            v3.type = 'onError';
            v3.errorfunction = 'storeLinkedRecord';
            v3.errortype = (re.__get__result()).errortype;
            v3.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v3);
          } else {
            if (re.__get__result()) {
              var v3 = {};
              v3.type = 'onStoreLinkedRecord';
              v3.status = true;
              v3.data = (re.__get__result()).result;
              this.dispatchEvent(v3);
            }
          }
        };

        v2.select = function (fields, table, where, group, order, callback, showHidden, showDeleted) {
          if (_global.TF.BE_USER.uid <= 0) {
            net.typoflash.utils.Debug.trace('You need to log in before calling \'ContentEditing.select\'');
            return undefined;
          }
          var v3 = this._service.select(fields, table, where, group, order, callback, showHidden, showDeleted);
          v3.__set__responder(new mx.rpc.RelayResponder(this, 'selectResult', 'handleRemotingError'));
        };

        v2.selectResult = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v4 = {};
            v4.type = 'onError';
            v4.errorfunction = 'select';
            v4.errortype = (re.__get__result()).errortype;
            v4.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            if (re.__get__result()) {
              var v4 = {};
              v4.type = (re.__get__result()).callback;
              v4.data = (re.__get__result()).result;
              this.dispatchEvent(v4);
            } else {}
          }
          net.typoflash.utils.Debug.trace(re);
        };

        v2.insert = function (table, obj, callback) {
          if (_global.TF.BE_USER.uid <= 0) {
            net.typoflash.utils.Debug.trace('You need to log in before calling \'ContentEditing.insert\'');
            return undefined;
          }
          var v3 = this._service.insert(table, obj, callback);
          v3.__set__responder(new mx.rpc.RelayResponder(this, 'insertResult', 'handleRemotingError'));
        };

        v2.insertResult = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v4 = {};
            v4.type = 'onError';
            v4.errorfunction = 'select';
            v4.errortype = (re.__get__result()).errortype;
            v4.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            if (re.__get__result()) {
              var v4 = {};
              v4.type = (re.__get__result()).callback;
              v4.data = (re.__get__result()).result;
              this.dispatchEvent(v4);
            } else {}
          }
          net.typoflash.utils.Debug.trace(re);
        };

        v2.update = function (table, where, obj, callback) {
          if (_global.TF.BE_USER.uid <= 0) {
            net.typoflash.utils.Debug.trace('You need to log in before calling \'ContentEditing.update\'');
            return undefined;
          }
          var v3 = this._service.update(table, where, obj, callback);
          v3.__set__responder(new mx.rpc.RelayResponder(this, 'updateResult', 'handleRemotingError'));
        };

        v2.updateResult = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v4 = {};
            v4.type = 'onError';
            v4.errorfunction = 'select';
            v4.errortype = (re.__get__result()).errortype;
            v4.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            if (re.__get__result()) {
              var v4 = {};
              v4.type = (re.__get__result()).callback;
              v4.data = (re.__get__result()).result;
              this.dispatchEvent(v4);
            } else {}
          }
          net.typoflash.utils.Debug.trace(re);
        };

        v2.exec_delete = function (table, where, callback) {
          if (_global.TF.BE_USER.uid <= 0) {
            net.typoflash.utils.Debug.trace('You need to log in before calling \'ContentEditing.delete\'');
            return undefined;
          }
          var v3 = this._service.exec_delete(table, where, callback);
          v3.__set__responder(new mx.rpc.RelayResponder(this, 'deleteResult', 'handleRemotingError'));
        };

        v2.deleteResult = function (re) {
          if ((re.__get__result()).errortype > 0) {
            var v4 = {};
            v4.type = 'onError';
            v4.errorfunction = 'select';
            v4.errortype = (re.__get__result()).errortype;
            v4.errormsg = (re.__get__result()).errormsg;
            _global.TF.CORE_EVENTS.dispatchEvent(v4);
          } else {
            if (re.__get__result()) {
              var v4 = {};
              v4.type = (re.__get__result()).callback;
              v4.data = (re.__get__result()).result;
              this.dispatchEvent(v4);
            } else {}
          }
          net.typoflash.utils.Debug.trace(re);
        };

        v2.handleRemotingError = function (fault) {
          var v2 = {};
          v2.type = 'onRemotingError';
          v2.errormsg = (fault.__get__fault()).faultstring;
          _global.TF.CORE_EVENTS.dispatchEvent(v2);
          net.typoflash.utils.Debug.trace(v2);
        };

        v2.clearCache = function () {
          net.typoflash.utils.Debug.trace('ContentEditing.clearCache called');
          _global.TF.CONTENT_RENDERING.clearCache();
        };

        v2.onBELoginStatus = function (obj) {
          if (!obj.status) {
          }
        };

        v1.__get__global = function () {
          if (net.typoflash.ContentEditing._instance == null) {
            net.typoflash.ContentEditing._allowInstantiation = true;
            net.typoflash.ContentEditing._instance = new net.typoflash.ContentEditing();
            net.typoflash.ContentEditing._allowInstantiation = false;
          }
          return net.typoflash.ContentEditing._instance;
        };

        v1._instance = null;
        v1._allowInstantiation = false;
        v1.addProperty('global', v1.__get__global, function () {});
        ASSetPropFlags(net.typoflash.ContentEditing.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 350 __Packages.net.typoflash.base.ConfigBase {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.base) {
        _global.net.typoflash.base = new Object();
      }
      if (!_global.net.typoflash.base.ConfigBase) {
        var v1 = function () {
          _global.TF = this.setIfNull(_global.TF, {});
          var v3 = _global.TF;
          v3.CONF = this.setIfNull(v3.CONF, {});
          v3.CONF.ASSOCIATIVE_LIST = this.setIfNull(v3.CONF.ASSOCIATIVE_LIST, {});
          v3.CONF.MOTHERLOAD = this.setIfNull(v3.CONF.MOTHERLOAD, {});
          v3.CONF.MENU = this.setIfNull(v3.CONF.MENU, {});
          v3.CONF.PAGE = this.setIfNull(v3.CONF.PAGE, {});
        };

        net.typoflash.base.ConfigBase = v1;
        var v2 = v1.prototype;
        v2.setIfNull = function (o, v) {
          if (o == null) {
            return v;
          } else {
            return o;
          }
        };

        ASSetPropFlags(net.typoflash.base.ConfigBase.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 351 __Packages.net.typoflash.userinterface.windows.Window {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.windows) {
        _global.net.typoflash.userinterface.windows = new Object();
      }
      if (!_global.net.typoflash.userinterface.windows.Window) {
        var v1 = function () {
          super();
        };

        net.typoflash.userinterface.windows.Window = v1;
        net.typoflash.userinterface.windows.Window extends MovieClip;
        var v2 = v1.prototype;
        v2.onLoad = function () {
          mx.events.EventDispatcher.initialize(this);
          var v5 = {};
          v5.root = this;
          v5.onResize = function () {
            this.root.onStageResize();
          };

          Stage.addListener(v5);
          this.bg.onPress = function () {
            this._parent.swapDepths(this.depthManager.getNextWindowDepth());
            this._parent.startDrag(false, -380, -400, 1500, 800);
          };

          this.titleBg.onPress = function () {
            if (getTimer() - this.doubleClickTimer < 130) {
              this._parent.toggleMaximise();
            } else {
              this._parent.bg.onPress();
            }
          };

          this.titleBg.onRelease = function () {
            this.doubleClickTimer = getTimer();
            this.stopDrag();
          };

          var v6 = {};
          Mouse.addListener(v6);
          this.titleBg.onReleaseOutside = function () {
            this.stopDrag();
          };

          this.bg.onRelease = this.titleBg.onReleaseOutside;
          v6.onMouseUp = this.titleBg.onReleaseOutside;
          this.bg.useHandCursor = false;
          this.titleBg.onRollOver = function () {};

          if (this.resizeEnabled) {
            this.resizeBtn.onPress = function () {
              this.startDrag(false, 100, 70, 700, 800);
              this.updateAfterEvent();
              this.onEnterFrame = function () {
                this._parent.setSize(this._x, this._y);
              };

            };

            this.resizeBtn.onReleaseOutside = function () {
              this.stopDrag();
              this._parent.setSize(this._x, this._y);
              this.onEnterFrame = null;
            };

            this.resizeBtn.onRelease = this.resizeBtn.onReleaseOutside;
          } else {
            this.resizeBtn._visible = false;
          }
          if (this.closeEnabled) {
            this.closeBtn.gotoAndStop('close');
            this.closeBtn.onRelease = function () {
              this._parent.close();
            };

          } else {
            this.closeBtn._visible = false;
          }
          this.titleBg.onRollOut = function () {
            if (this._xmouse > this._x && this._xmouse < this._x + this._width && this._ymouse > this._y && this._ymouse < this._y + this._height) {
              this.gotoAndStop('_over');
            }
          };

          if (this.maximiseEnabled) {
            if (!this.closeEnabled) {
              this.cascadeBtn._x = this.closeBtn._x;
            }
            this.cascadeBtn.gotoAndStop('maximise');
            this.cascadeBtn._visible = true;
            this.cascadeBtn.onRelease = function () {
              this._parent.toggleMaximise();
            };

          } else {
            this.cascadeBtn._visible = false;
          }
          if (this.minimiseEnabled) {
            if (!this.maximiseEnabled) {
              this.minimiseBtn._x = this.cascadeBtn._x;
            }
            if (!this.closeEnabled) {
              this.minimiseBtn._x = this.closeBtn._x;
            }
            this.minimiseBtn.gotoAndStop('minimise');
            this.minimiseBtn._visible = true;
            this.minimiseBtn.onRelease = function () {
              this._parent.toggleMinimise();
            };

          } else {
            this.minimiseBtn._visible = false;
          }
          this.count = 1;
          this.title_txt.autoSize = 'left';
          this.title_txt.text = this.title;
          this.title_txt._x = Math.round(this.bg._width / 2 - this.title_txt._width / 2);
          if (this.type == 'ScrollPane') {
            this.initObj._windowFrame = this;
            this.containerInitObj.initObj = this.initObj;
            this.view = this.content.attachMovie('bScrollPane', 'scrollpane', 0, this.containerInitObj);
            this.view.contentPath = this.contentPath;
            this.view.setSize(this.w, this.h);
            var v3 = {};
            v3.w = this.w;
            v3.h = this.h;
            v3.mc = this;
            v3.onHorisontalLoad = function (eventObject) {
              this.mc.setSize(this.w, this.h);
            };

            v3.onVerticalLoad = v3.onHorisontalLoad;
            this.view.addEventListener('onVerticalLoad', v3);
            this.view.addEventListener('onHorisontalLoad', v3);
            this.addEventListener('setSize', this.view);
          } else {
            if (this.type == 'TextArea') {
              this.initObj.windowFrame = this;
              this.view = this.content.attachMovie('bTextArea', 'bTextArea', 0, this.initObj);
              for (var v4 in this.initObj) {
                this.view.setTextProperty(v4, this.initObj[v4]);
              }
              this.addEventListener('setSize', this.view);
            } else {
              if (this.type == 'MovieClip') {
                if (this.contentPath != null) {
                  this.initObj._windowFrame = this;
                  this.view = this.content.attachMovie(this.contentPath, this.contentPath, 0, this.initObj);
                }
                this.addEventListener('setSize', this.view);
              } else {
                this.type = 'SWF';
                if ('SWF') {
                  if (this.contentPath != null) {
                    this.initObj._windowFrame = this;
                    this.view = this.content;
                    var v3 = {};
                    v3.initObj = this.initObj;
                    v3.mc = this.content;
                    v3.onComplete = function (eventObject) {
                      this.mc.onData(this.initObj);
                    };

                    var v7 = {'url': this.contentPath, 'target': this.content, 'name': 'External SWF', 'listener': v3};
                    _global.TF.LOAD_QUEUE.load(v7);
                  }
                }
              }
            }
          }
          if (this.w != null && this.h != null) {
            this.setSize(this.w, this.h);
          }
        };

        v2.close = function () {
          this.view.close();
          this.removeMovieClip();
        };

        v2.setSize = function (w, h) {
          if (w < this.minW) {
            w = this.minW;
          }
          if (h < this.minH) {
            h = this.minH;
          }
          this.title_txt._x = Math.round(w / 2 - this.title_txt._width / 2);
          this.bg._width = w;
          this.titleBg._width = this.bg._width;
          this.shadow._width = w + 30 * this.bg._xscale / 100;
          this.resizeBtn._x = w;
          if (this.closeEnabled) {
            this.closeBtn._x = this.titleBg._width - 16;
          }
          if (!this.closeEnabled) {
            this.cascadeBtn._x = this.titleBg._width - 16;
          } else {
            this.cascadeBtn._x = this.titleBg._width - 30;
          }
          if (!this.closeEnabled) {
            this.minimiseBtn._x = this.titleBg._width - 16;
          } else {
            if (!this.maximiseEnabled) {
              this.minimiseBtn._x = this.titleBg._width - 30;
            } else {
              this.minimiseBtn._x = this.titleBg._width - 44;
            }
          }
          this.view.setSize(w - 12, h - 40);
          this.shadow._height = h + 30 * this.bg._yscale / 130;
          this.bg._height = h;
          this.resizeBtn._y = h;
        };

        v2.setText = function (msg) {
          this.view.text = msg;
        };

        v2.addText = function (msg) {
          this.view.text += msg;
          this.view.txt.scroll = this.view.txt.maxscroll;
        };

        v2.move = function (x, y) {
          this._x = x;
          this._y = y;
        };

        v2.onFocus = function () {};

        v2.toggleMinimise = function () {
          if (this.isMaximised) {
            this.toggleMaximise();
          }
          if (this.isMinimised) {
            this.minimiseBtn.gotoAndStop('minimise');
            this.view._visible = true;
            this.resizeBtn._visible = this.resizeEnabled;
            this.bg._visible = true;
            this.shadow._height = this.shadowOldH;
          } else {
            this.minimiseBtn.gotoAndStop('cascade');
            this.shadowOldH = this.shadow._height;
            this.shadow._height = 20;
            this.view._visible = false;
            this.resizeBtn._visible = false;
            this.bg._visible = false;
          }
          this.isMinimised = !this.isMinimised;
        };

        v2.toggleMaximise = function () {
          if (this.isMinimised) {
            this.toggleMinimise();
          }
          if (!this.isMaximised) {
            this.cascadeBtn.gotoAndStop('cascade');
            this.oldW = this.bg._width;
            this.oldH = this.bg._height;
            this.oldX = this._x;
            this.oldY = this._y;
            this.setSize(_global.TF.CONF.APPLICATION_TOP, _global.TF.CONF.APPLICATION_HEIGHT);
            this.move(_global.TF.CONF.APPLICATION_LEFT, _global.TF.CONF.APPLICATION_TOP);
          } else {
            this.cascadeBtn.gotoAndStop('maximise');
            this.setSize(this.oldW, this.oldH);
            this.move(this.oldX, this.oldY);
            this.resizeBtn._visible = this.resizeEnabled;
          }
          this.isMaximised = !this.isMaximised;
        };

        v2.focus = function () {
          this.swapDepths(this.depthManager.getNextWindowDepth());
        };

        v2.blur = function () {
          this.swapDepths(1);
        };

        v2.onStageResize = function () {
          if (this.isMaximised) {
            this.toggleMaximise();
            this.toggleMaximise();
          }
        };

        v2.maximiseEnabled = true;
        v2.minW = 140;
        v2.minH = 80;
        ASSetPropFlags(net.typoflash.userinterface.windows.Window.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 352 __Packages.net.typoflash.userinterface.popups.Popup {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.popups) {
        _global.net.typoflash.userinterface.popups = new Object();
      }
      if (!_global.net.typoflash.userinterface.popups.Popup) {
        var v1 = function () {
          super();
          this.keyListener = new Object();
          this.keyListener.parent = this;
          this.keyListener.onKeyDown = function () {
            if (Key.getCode() == 13) {
              this.parent.close();
            }
          };

          Key.addListener(this.keyListener);
          this.bg.onPress = function () {
            this._parent.startDrag();
          };

          this.bg.onReleaseOutside = function () {
            this.stopDrag();
          };

          this.bg.onRelease = this.bg.onReleaseOutside;
          this.bg.onRollOver = function () {
            this._parent.swapDepths(this._parent.depthManager.getNextPopupDepth());
          };

          this.bg.useHandCursor = 0;
          this.killMouseLayer = this.depthManager.newKillMouseLayer();
        };

        net.typoflash.userinterface.popups.Popup = v1;
        net.typoflash.userinterface.popups.Popup extends MovieClip;
        var v2 = v1.prototype;
        v2.close = function () {
          this.killMouseLayer.removeMovieClip();
          this.removeMovieClip();
        };

        v2.setMsg = function (msg) {
          this.txt.useDynamicFonts = this.useDynamicFonts;
          this.ttxt = msg;
          this.txt.__set__text(msg);
        };

        v2.onLoad = function () {
          this.init();
          this.txt.__set__html(true);
          this.txt.__set__text(this.ttxt);
        };

        v2.init = function () {};

        ASSetPropFlags(net.typoflash.userinterface.popups.Popup.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 353 __Packages.net.typoflash.userinterface.popups.Confirm {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.popups) {
        _global.net.typoflash.userinterface.popups = new Object();
      }
      if (!_global.net.typoflash.userinterface.popups.Confirm) {
        var v1 = function () {
          super();
        };

        net.typoflash.userinterface.popups.Confirm = v1;
        net.typoflash.userinterface.popups.Confirm extends net.typoflash.userinterface.popups.Popup;
        var v2 = v1.prototype;
        v2.init = function () {
          this.acceptBtn.label = 'OK';
          this.acceptBtn.onRelease = function () {
            this._parent.accept();
            this._parent.close();
          };

          this.rejectBtn.label = 'Cancel';
          this.rejectBtn.onRelease = function () {
            this._parent.decline();
            this._parent.close();
          };

        };

        ASSetPropFlags(net.typoflash.userinterface.popups.Confirm.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 354 __Packages.net.typoflash.userinterface.popups.Alert {

    #initclip
      if (!_global.net) {
        _global.net = new Object();
      }
      if (!_global.net.typoflash) {
        _global.net.typoflash = new Object();
      }
      if (!_global.net.typoflash.userinterface) {
        _global.net.typoflash.userinterface = new Object();
      }
      if (!_global.net.typoflash.userinterface.popups) {
        _global.net.typoflash.userinterface.popups = new Object();
      }
      if (!_global.net.typoflash.userinterface.popups.Alert) {
        var v1 = function () {
          super();
        };

        net.typoflash.userinterface.popups.Alert = v1;
        net.typoflash.userinterface.popups.Alert extends net.typoflash.userinterface.popups.Popup;
        var v2 = v1.prototype;
        v2.init = function () {
          this.btn.label = 'OK';
          this.btn.onRelease = function () {
            this._parent.close();
          };

        };

        ASSetPropFlags(net.typoflash.userinterface.popups.Alert.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 251 __Packages.mx.events.UIEventDispatcher {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.events) {
        _global.mx.events = new Object();
      }
      if (!_global.mx.events.UIEventDispatcher) {
        var v1 = function () {
          super();
        };

        mx.events.UIEventDispatcher = v1;
        var v2 = new mx.events.EventDispatcher();
        mx.events.UIEventDispatcher.prototype = v2;
        v1.addKeyEvents = function (obj) {
          if (obj.keyHandler == undefined) {
            obj.keyHandler = new Object();
            var v1 = obj.keyHandler;
            v1.owner = obj;
            v1.onKeyDown = mx.events.UIEventDispatcher._fEventDispatcher.onKeyDown;
            v1.onKeyUp = mx.events.UIEventDispatcher._fEventDispatcher.onKeyUp;
          }
          Key.addListener(obj.keyHandler);
        };

        v1.removeKeyEvents = function (obj) {
          Key.removeListener(obj.keyHandler);
        };

        v1.addLoadEvents = function (obj) {
          if (obj.onLoad == undefined) {
            obj.onLoad = mx.events.UIEventDispatcher._fEventDispatcher.onLoad;
            obj.onUnload = mx.events.UIEventDispatcher._fEventDispatcher.onUnload;
            if (obj.getBytesTotal() == obj.getBytesLoaded()) {
              obj.doLater(obj, 'onLoad');
            }
          }
        };

        v1.removeLoadEvents = function (obj) {
          delete obj.onLoad;
          delete obj.onUnload;
        };

        v1.initialize = function (obj) {
          if (mx.events.UIEventDispatcher._fEventDispatcher == undefined) {
            mx.events.UIEventDispatcher._fEventDispatcher = new mx.events.UIEventDispatcher();
          }
          obj.addEventListener = mx.events.UIEventDispatcher._fEventDispatcher.__addEventListener;
          obj.__origAddEventListener = mx.events.UIEventDispatcher._fEventDispatcher.addEventListener;
          obj.removeEventListener = mx.events.UIEventDispatcher._fEventDispatcher.removeEventListener;
          obj.dispatchEvent = mx.events.UIEventDispatcher._fEventDispatcher.dispatchEvent;
          obj.dispatchQueue = mx.events.UIEventDispatcher._fEventDispatcher.dispatchQueue;
        };

        v2.dispatchEvent = function (eventObj) {
          if (eventObj.target == undefined) {
            eventObj.target = this;
          }
          this[eventObj.type + 'Handler'](eventObj);
          this.dispatchQueue(mx.events.EventDispatcher, eventObj);
          this.dispatchQueue(this, eventObj);
        };

        v2.onKeyDown = function (Void) {
          this.owner.dispatchEvent({'type': 'keyDown', 'code': Key.getCode(), 'ascii': Key.getAscii(), 'shiftKey': Key.isDown(16), 'ctrlKey': Key.isDown(17)});
        };

        v2.onKeyUp = function (Void) {
          this.owner.dispatchEvent({'type': 'keyUp', 'code': Key.getCode(), 'ascii': Key.getAscii(), 'shiftKey': Key.isDown(16), 'ctrlKey': Key.isDown(17)});
        };

        v2.onLoad = function (Void) {
          if (this.__sentLoadEvent != true) {
            this.dispatchEvent({'type': 'load'});
          }
          this.__sentLoadEvent = true;
        };

        v2.onUnload = function (Void) {
          this.dispatchEvent({'type': 'unload'});
        };

        v2.__addEventListener = function (event, handler) {
          this.__origAddEventListener(event, handler);
          var v3 = mx.events.UIEventDispatcher.lowLevelEvents;
          for (var v5 in v3) {
            if (mx.events.UIEventDispatcher[v5][event] != undefined) {
              var v2 = v3[v5][0];
              mx.events.UIEventDispatcher[v2](this);
            }
          }
        };

        v2.removeEventListener = function (event, handler) {
          var v6 = '__q_' + event;
          mx.events.EventDispatcher._removeEventListener(this[v6], event, handler);
          if (this[v6].length == 0) {
            var v2 = mx.events.UIEventDispatcher.lowLevelEvents;
            for (var v5 in v2) {
              if (mx.events.UIEventDispatcher[v5][event] != undefined) {
                var v3 = v2[v5][1];
                mx.events.UIEventDispatcher[v2[v5][1]](this);
              }
            }
          }
        };

        v1.keyEvents = {'keyDown': 1, 'keyUp': 1};
        v1.loadEvents = {'load': 1, 'unload': 1};
        v1.lowLevelEvents = {'keyEvents': ['addKeyEvents', 'removeKeyEvents'], 'loadEvents': ['addLoadEvents', 'removeLoadEvents']};
        v1._fEventDispatcher = undefined;
        ASSetPropFlags(mx.events.UIEventDispatcher.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 252 __Packages.mx.skins.ColoredSkinElement {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.ColoredSkinElement) {
        var v1 = function () {};

        mx.skins.ColoredSkinElement = v1;
        var v2 = v1.prototype;
        v2.setColor = function (c) {
          if (c != undefined) {
            var v2 = new Color(this);
            v2.setRGB(c);
          }
        };

        v2.draw = function (Void) {
          this.setColor(this.getStyle(this._color));
          this.onEnterFrame = undefined;
        };

        v2.invalidateStyle = function (Void) {
          this.onEnterFrame = this.draw;
        };

        v1.setColorStyle = function (p, colorStyle) {
          if (p._color == undefined) {
            p._color = colorStyle;
          }
          p.setColor = mx.skins.ColoredSkinElement.mixins.setColor;
          p.invalidateStyle = mx.skins.ColoredSkinElement.mixins.invalidateStyle;
          p.draw = mx.skins.ColoredSkinElement.mixins.draw;
          p.setColor(p.getStyle(colorStyle));
        };

        v1.mixins = new mx.skins.ColoredSkinElement();
        ASSetPropFlags(mx.skins.ColoredSkinElement.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 253 __Packages.mx.core.ext.UIObjectExtensions {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.ext) {
        _global.mx.core.ext = new Object();
      }
      if (!_global.mx.core.ext.UIObjectExtensions) {
        var v1 = function () {};

        mx.core.ext.UIObjectExtensions = v1;
        var v2 = v1.prototype;
        v1.addGeometry = function (tf, ui) {
          tf.addProperty('width', ui.__get__width, null);
          tf.addProperty('height', ui.__get__height, null);
          tf.addProperty('left', ui.__get__left, null);
          tf.addProperty('x', ui.__get__x, null);
          tf.addProperty('top', ui.__get__top, null);
          tf.addProperty('y', ui.__get__y, null);
          tf.addProperty('right', ui.__get__right, null);
          tf.addProperty('bottom', ui.__get__bottom, null);
          tf.addProperty('visible', ui.__get__visible, ui.__set__visible);
        };

        v1.Extensions = function () {
          if (mx.core.ext.UIObjectExtensions.bExtended == true) {
            return true;
          }
          mx.core.ext.UIObjectExtensions.bExtended = true;
          var v6 = mx.core.UIObject.prototype;
          var v9 = mx.skins.SkinElement.prototype;
          mx.core.ext.UIObjectExtensions.addGeometry(v9, v6);
          mx.events.UIEventDispatcher.initialize(v6);
          var v13 = mx.skins.ColoredSkinElement;
          mx.styles.CSSTextStyles.addTextStyles(v6);
          var v5 = MovieClip.prototype;
          v5.getTopLevel = v6.getTopLevel;
          v5.createLabel = v6.createLabel;
          v5.createObject = v6.createObject;
          v5.createClassObject = v6.createClassObject;
          v5.createEmptyObject = v6.createEmptyObject;
          v5.destroyObject = v6.destroyObject;
          _global.ASSetPropFlags(v5, 'getTopLevel', 1);
          _global.ASSetPropFlags(v5, 'createLabel', 1);
          _global.ASSetPropFlags(v5, 'createObject', 1);
          _global.ASSetPropFlags(v5, 'createClassObject', 1);
          _global.ASSetPropFlags(v5, 'createEmptyObject', 1);
          _global.ASSetPropFlags(v5, 'destroyObject', 1);
          v5.__getTextFormat = v6.__getTextFormat;
          v5._getTextFormat = v6._getTextFormat;
          v5.getStyleName = v6.getStyleName;
          v5.getStyle = v6.getStyle;
          _global.ASSetPropFlags(v5, '__getTextFormat', 1);
          _global.ASSetPropFlags(v5, '_getTextFormat', 1);
          _global.ASSetPropFlags(v5, 'getStyleName', 1);
          _global.ASSetPropFlags(v5, 'getStyle', 1);
          var v7 = TextField.prototype;
          mx.core.ext.UIObjectExtensions.addGeometry(v7, v6);
          v7.addProperty('enabled', function () {
            return this.__enabled;
          }, function (x) {
            this.__enabled = x;
            this.invalidateStyle();
          });
          v7.move = v9.move;
          v7.setSize = v9.setSize;
          v7.invalidateStyle = function () {
            this.invalidateFlag = true;
          };

          v7.draw = function () {
            if (this.invalidateFlag) {
              this.invalidateFlag = false;
              var v2 = this._getTextFormat();
              this.setTextFormat(v2);
              this.setNewTextFormat(v2);
              this.embedFonts = v2.embedFonts == true;
              if (this.__text != undefined) {
                if (this.text == '') {
                  this.text = this.__text;
                }
                delete this.__text;
              }
              this._visible = true;
            }
          };

          v7.setColor = function (color) {
            this.textColor = color;
          };

          v7.getStyle = v5.getStyle;
          v7.__getTextFormat = v6.__getTextFormat;
          v7.setValue = function (v) {
            this.text = v;
          };

          v7.getValue = function () {
            return this.text;
          };

          v7.addProperty('value', function () {
            return this.getValue();
          }, function (v) {
            this.setValue(v);
          });
          v7._getTextFormat = function () {
            var v2 = this.stylecache.tf;
            if (v2 != undefined) {
              return v2;
            }
            v2 = new TextFormat();
            this.__getTextFormat(v2);
            this.stylecache.tf = v2;
            if (this.__enabled == false) {
              if (this.enabledColor == undefined) {
                var v4 = this.getTextFormat();
                this.enabledColor = v4.color;
              }
              var v3 = this.getStyle('disabledColor');
              v2.color = v3;
              return v2;
            }
            if (this.enabledColor != undefined) {
              if (v2.color == undefined) {
                v2.color = this.enabledColor;
              }
            }
            return v2;
          };

          v7.getPreferredWidth = function () {
            this.draw();
            return this.textWidth + 4;
          };

          v7.getPreferredHeight = function () {
            this.draw();
            return this.textHeight + 4;
          };

          TextFormat.prototype.getTextExtent2 = function (s) {
            var v3 = _root._getTextExtent;
            if (v3 == undefined) {
              _root.createTextField('_getTextExtent', -2, 0, 0, 1000, 100);
              v3 = _root._getTextExtent;
              v3._visible = false;
            }
            _root._getTextExtent.text = s;
            var v4 = this.align;
            this.align = 'left';
            _root._getTextExtent.setTextFormat(this);
            this.align = v4;
            return {'width': v3.textWidth, 'height': v3.textHeight};
          };

          if (_global.style == undefined) {
            _global.style = new mx.styles.CSSStyleDeclaration();
            _global.cascadingStyles = true;
            _global.styles = new Object();
            _global.skinRegistry = new Object();
            if (_global._origWidth == undefined) {
              _global.origWidth = Stage.width;
              _global.origHeight = Stage.height;
            }
          }
          var v4 = _root;
          while (v4._parent != undefined) {
            v4 = v4._parent;
          }
          v4.addProperty('width', function () {
            return Stage.width;
          }, null);
          v4.addProperty('height', function () {
            return Stage.height;
          }, null);
          _global.ASSetPropFlags(v4, 'width', 1);
          _global.ASSetPropFlags(v4, 'height', 1);
          return true;
        };

        v1.bExtended = false;
        v1.UIObjectExtended = mx.core.ext.UIObjectExtensions.Extensions();
        v1.UIObjectDependency = mx.core.UIObject;
        v1.SkinElementDependency = mx.skins.SkinElement;
        v1.CSSTextStylesDependency = mx.styles.CSSTextStyles;
        v1.UIEventDispatcherDependency = mx.events.UIEventDispatcher;
        ASSetPropFlags(mx.core.ext.UIObjectExtensions.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 254 __Packages.mx.skins.halo.Defaults {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.halo) {
        _global.mx.skins.halo = new Object();
      }
      if (!_global.mx.skins.halo.Defaults) {
        var v1 = function () {};

        mx.skins.halo.Defaults = v1;
        var v2 = v1.prototype;
        v1.setThemeDefaults = function () {
          var v2 = _global.style;
          v2.themeColor = 8453965;
          v2.disabledColor = 8684164;
          v2.modalTransparency = 0;
          v2.filled = true;
          v2.stroked = true;
          v2.strokeWidth = 1;
          v2.strokeColor = 0;
          v2.fillColor = 16777215;
          v2.repeatInterval = 35;
          v2.repeatDelay = 500;
          v2.fontFamily = '_sans';
          v2.fontSize = 12;
          v2.selectionColor = 13500353;
          v2.rollOverColor = 14942166;
          v2.useRollOver = true;
          v2.backgroundDisabledColor = 14540253;
          v2.selectionDisabledColor = 14540253;
          v2.selectionDuration = 200;
          v2.openDuration = 250;
          v2.borderStyle = 'inset';
          v2.color = 734012;
          v2.textSelectedColor = 24371;
          v2.textRollOverColor = 2831164;
          v2.textDisabledColor = 16777215;
          v2.vGridLines = true;
          v2.hGridLines = false;
          v2.vGridLineColor = 6710886;
          v2.hGridLineColor = 6710886;
          v2.headerColor = 15395562;
          v2.indentation = 17;
          v2.folderOpenIcon = 'TreeFolderOpen';
          v2.folderClosedIcon = 'TreeFolderClosed';
          v2.defaultLeafIcon = 'TreeNodeIcon';
          v2.disclosureOpenIcon = 'TreeDisclosureOpen';
          v2.disclosureClosedIcon = 'TreeDisclosureClosed';
          v2.popupDuration = 150;
          v2.todayColor = 6710886;
          _global.styles.ScrollSelectList = new mx.styles.CSSStyleDeclaration();
          v2 = _global.styles.ScrollSelectList;
          v2.backgroundColor = 16777215;
          v2.borderColor = 13290186;
          v2.borderStyle = 'inset';
          _global.styles.ComboBox = new mx.styles.CSSStyleDeclaration();
          v2 = _global.styles.ComboBox;
          v2.borderStyle = 'inset';
          _global.styles.NumericStepper = new mx.styles.CSSStyleDeclaration();
          v2 = _global.styles.NumericStepper;
          v2.textAlign = 'center';
          _global.styles.RectBorder = new mx.styles.CSSStyleDeclaration();
          v2 = _global.styles.RectBorder;
          v2.borderColor = 14015965;
          v2.buttonColor = 7305079;
          v2.shadowColor = 15658734;
          v2.highlightColor = 12897484;
          v2.shadowCapColor = 14015965;
          v2.borderCapColor = 9542041;
          var v4 = new Object();
          v4.borderColor = 16711680;
          v4.buttonColor = 16711680;
          v4.shadowColor = 16711680;
          v4.highlightColor = 16711680;
          v4.shadowCapColor = 16711680;
          v4.borderCapColor = 16711680;
          mx.core.UIComponent.prototype.origBorderStyles = v4;
          var v3;
          _global.styles.TextInput = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.TextInput;
          v3.backgroundColor = 16777215;
          v3.borderStyle = 'inset';
          _global.styles.TextArea = _global.styles.TextInput;
          _global.styles.Window = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.Window;
          v3.borderStyle = 'default';
          _global.styles.windowStyles = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.windowStyles;
          v3.fontWeight = 'bold';
          _global.styles.dataGridStyles = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.dataGridStyles;
          v3.fontWeight = 'bold';
          _global.styles.Alert = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.Alert;
          v3.borderStyle = 'alert';
          _global.styles.ScrollView = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.ScrollView;
          v3.borderStyle = 'inset';
          _global.styles.View = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.View;
          v3.borderStyle = 'none';
          _global.styles.ProgressBar = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.ProgressBar;
          v3.color = 11187123;
          v3.fontWeight = 'bold';
          _global.styles.AccordionHeader = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.AccordionHeader;
          v3.fontWeight = 'bold';
          v3.fontSize = '11';
          _global.styles.Accordion = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.Accordion;
          v3.borderStyle = 'solid';
          v3.backgroundColor = 16777215;
          v3.borderColor = 9081738;
          v3.headerHeight = 22;
          v3.marginBottom = -1;
          v3.marginTop = -1;
          v3.marginRight = -1;
          v3.marginLeft = -1;
          v3.verticalGap = -1;
          _global.styles.DateChooser = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.DateChooser;
          v3.borderColor = 9542041;
          v3.headerColor = 16777215;
          _global.styles.CalendarLayout = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.CalendarLayout;
          v3.fontSize = 10;
          v3.textAlign = 'right';
          v3.color = 2831164;
          _global.styles.WeekDayStyle = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.WeekDayStyle;
          v3.fontWeight = 'bold';
          v3.fontSize = 11;
          v3.textAlign = 'center';
          v3.color = 2831164;
          _global.styles.TodayStyle = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.TodayStyle;
          v3.color = 16777215;
          _global.styles.HeaderDateText = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.HeaderDateText;
          v3.fontSize = 12;
          v3.fontWeight = 'bold';
          v3.textAlign = 'center';
        };

        v2.drawRoundRect = function (x, y, w, h, r, c, alpha, rot, gradient, ratios) {
          if (typeof r == 'object') {
            var v18 = r.br;
            var v16 = r.bl;
            var v15 = r.tl;
            var v10 = r.tr;
          } else {
            var v10 = r;
            var v15 = v10;
            var v16 = v15;
            var v18 = v16;
          }
          if (typeof c == 'object') {
            if (typeof alpha != 'object') {
              var v9 = [alpha, alpha];
            } else {
              var v9 = alpha;
            }
            if (ratios == undefined) {
              ratios = [0, 255];
            }
            var v14 = h * 0.7;
            if (typeof rot != 'object') {
              var v11 = {'matrixType': 'box', 'x': -v14, 'y': v14, 'w': w * 2, 'h': h * 4, 'r': rot * 0.0174532925199433};
            } else {
              var v11 = rot;
            }
            if (gradient == 'radial') {
              this.beginGradientFill('radial', c, v9, ratios, v11);
            } else {
              this.beginGradientFill('linear', c, v9, ratios, v11);
            }
          } else {
            if (c != undefined) {
              this.beginFill(c, alpha);
            }
          }
          r = v18;
          var v13 = r - r * Math.SQRT1_2;
          var v12 = r - r * 0.414213562373095;
          this.moveTo(x + w, y + h - r);
          this.lineTo(x + w, y + h - r);
          this.curveTo(x + w, y + h - v12, x + w - v13, y + h - v13);
          this.curveTo(x + w - v12, y + h, x + w - r, y + h);
          r = v16;
          v13 = r - r * Math.SQRT1_2;
          v12 = r - r * 0.414213562373095;
          this.lineTo(x + r, y + h);
          this.curveTo(x + v12, y + h, x + v13, y + h - v13);
          this.curveTo(x, y + h - v12, x, y + h - r);
          r = v15;
          v13 = r - r * Math.SQRT1_2;
          v12 = r - r * 0.414213562373095;
          this.lineTo(x, y + r);
          this.curveTo(x, y + v12, x + v13, y + v13);
          this.curveTo(x + v12, y, x + r, y);
          r = v10;
          v13 = r - r * Math.SQRT1_2;
          v12 = r - r * 0.414213562373095;
          this.lineTo(x + w - r, y);
          this.curveTo(x + w - v12, y, x + w - v13, y + v13);
          this.curveTo(x + w, y + v12, x + w, y + r);
          this.lineTo(x + w, y + h - r);
          if (c != undefined) {
            this.endFill();
          }
        };

        v1.classConstruct = function () {
          mx.core.ext.UIObjectExtensions.Extensions();
          mx.skins.halo.Defaults.setThemeDefaults();
          mx.core.UIObject.prototype.drawRoundRect = mx.skins.halo.Defaults.prototype.drawRoundRect;
          return true;
        };

        v1.classConstructed = mx.skins.halo.Defaults.classConstruct();
        v1.CSSStyleDeclarationDependency = mx.styles.CSSStyleDeclaration;
        v1.UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
        v1.UIObjectDependency = mx.core.UIObject;
        ASSetPropFlags(mx.skins.halo.Defaults.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 255 __Packages.mx.managers.DepthManager {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.managers) {
        _global.mx.managers = new Object();
      }
      if (!_global.mx.managers.DepthManager) {
        var v1 = function () {
          MovieClip.prototype.createClassChildAtDepth = this.createClassChildAtDepth;
          MovieClip.prototype.createChildAtDepth = this.createChildAtDepth;
          MovieClip.prototype.setDepthTo = this.setDepthTo;
          MovieClip.prototype.setDepthAbove = this.setDepthAbove;
          MovieClip.prototype.setDepthBelow = this.setDepthBelow;
          MovieClip.prototype.findNextAvailableDepth = this.findNextAvailableDepth;
          MovieClip.prototype.shuffleDepths = this.shuffleDepths;
          MovieClip.prototype.getDepthByFlag = this.getDepthByFlag;
          MovieClip.prototype.buildDepthTable = this.buildDepthTable;
          _global.ASSetPropFlags(MovieClip.prototype, 'createClassChildAtDepth', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'createChildAtDepth', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'setDepthTo', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'setDepthAbove', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'setDepthBelow', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'findNextAvailableDepth', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'shuffleDepths', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'getDepthByFlag', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'buildDepthTable', 1);
        };

        mx.managers.DepthManager = v1;
        var v2 = v1.prototype;
        v1.sortFunction = function (a, b) {
          if (a.getDepth() > b.getDepth()) {
            return 1;
          }
          return -1;
        };

        v1.test = function (depth) {
          if (depth == mx.managers.DepthManager.reservedDepth) {
            return false;
          } else {
            return true;
          }
        };

        v1.createClassObjectAtDepth = function (className, depthSpace, initObj) {
          var v1;
          switch (depthSpace) {
            case mx.managers.DepthManager.kCursor:
              v1 = mx.managers.DepthManager.holder.createClassChildAtDepth(className, mx.managers.DepthManager.kTopmost, initObj);
              return v1;
            case mx.managers.DepthManager.kTooltip:
              v1 = mx.managers.DepthManager.holder.createClassChildAtDepth(className, mx.managers.DepthManager.kTop, initObj);
              return v1;
          }
          return v1;
        };

        v1.createObjectAtDepth = function (linkageName, depthSpace, initObj) {
          var v1;
          switch (depthSpace) {
            case mx.managers.DepthManager.kCursor:
              v1 = mx.managers.DepthManager.holder.createChildAtDepth(linkageName, mx.managers.DepthManager.kTopmost, initObj);
              return v1;
            case mx.managers.DepthManager.kTooltip:
              v1 = mx.managers.DepthManager.holder.createChildAtDepth(linkageName, mx.managers.DepthManager.kTop, initObj);
              return v1;
          }
          return v1;
        };

        v2.createClassChildAtDepth = function (className, depthFlag, initObj) {
          if (this._childCounter == undefined) {
            this._childCounter = 0;
          }
          var v3 = this.buildDepthTable();
          var v2 = this.getDepthByFlag(depthFlag, v3);
          var v6 = 'down';
          if (depthFlag == mx.managers.DepthManager.kBottom) {
            v6 = 'up';
          }
          var v5;
          if (v3[v2] != undefined) {
            v5 = v2;
            v2 = this.findNextAvailableDepth(v2, v3, v6);
          }
          var v4 = this.createClassObject(className, 'depthChild' + this._childCounter++, v2, initObj);
          if (v5 != undefined) {
            v3[v2] = v4;
            this.shuffleDepths(v4, v5, v3, v6);
          }
          if (depthFlag == mx.managers.DepthManager.kTopmost) {
            v4._topmost = true;
          }
          return v4;
        };

        v2.createChildAtDepth = function (linkageName, depthFlag, initObj) {
          if (this._childCounter == undefined) {
            this._childCounter = 0;
          }
          var v3 = this.buildDepthTable();
          var v2 = this.getDepthByFlag(depthFlag, v3);
          var v6 = 'down';
          if (depthFlag == mx.managers.DepthManager.kBottom) {
            v6 = 'up';
          }
          var v5;
          if (v3[v2] != undefined) {
            v5 = v2;
            v2 = this.findNextAvailableDepth(v2, v3, v6);
          }
          var v4 = this.createObject(linkageName, 'depthChild' + this._childCounter++, v2, initObj);
          if (v5 != undefined) {
            v3[v2] = v4;
            this.shuffleDepths(v4, v5, v3, v6);
          }
          if (depthFlag == mx.managers.DepthManager.kTopmost) {
            v4._topmost = true;
          }
          return v4;
        };

        v2.setDepthTo = function (depthFlag) {
          var v2 = this._parent.buildDepthTable();
          var v3 = this._parent.getDepthByFlag(depthFlag, v2);
          if (v2[v3] != undefined) {
            this.shuffleDepths(this, v3, v2, undefined);
          } else {
            this.swapDepths(v3);
          }
          if (depthFlag == mx.managers.DepthManager.kTopmost) {
            this._topmost = true;
          } else {
            delete this._topmost;
          }
        };

        v2.setDepthAbove = function (targetInstance) {
          if (targetInstance._parent != this._parent) {
            return undefined;
          }
          var v2 = targetInstance.getDepth() + 1;
          var v3 = this._parent.buildDepthTable();
          if (v3[v2] != undefined && this.getDepth() < v2) {
            v2 -= 1;
          }
          if (v2 > mx.managers.DepthManager.highestDepth) {
            v2 = mx.managers.DepthManager.highestDepth;
          }
          if (v2 == mx.managers.DepthManager.highestDepth) {
            this._parent.shuffleDepths(this, v2, v3, 'down');
          } else {
            if (v3[v2] != undefined) {
              this._parent.shuffleDepths(this, v2, v3, undefined);
            } else {
              this.swapDepths(v2);
            }
          }
        };

        v2.setDepthBelow = function (targetInstance) {
          if (targetInstance._parent != this._parent) {
            return undefined;
          }
          var v6 = targetInstance.getDepth() - 1;
          var v3 = this._parent.buildDepthTable();
          if (v3[v6] != undefined && this.getDepth() > v6) {
            v6 += 1;
          }
          var v4 = mx.managers.DepthManager.lowestDepth + mx.managers.DepthManager.numberOfAuthortimeLayers;
          var v5;
          for (v5 in v3) {
            var v2 = v3[v5];
            if (v2._parent != undefined) {
              v4 = Math.min(v4, v2.getDepth());
            }
          }
          if (v6 < v4) {
            v6 = v4;
          }
          if (v6 == v4) {
            this._parent.shuffleDepths(this, v6, v3, 'up');
          } else {
            if (v3[v6] != undefined) {
              this._parent.shuffleDepths(this, v6, v3, undefined);
            } else {
              this.swapDepths(v6);
            }
          }
        };

        v2.findNextAvailableDepth = function (targetDepth, depthTable, direction) {
          var v5 = mx.managers.DepthManager.lowestDepth + mx.managers.DepthManager.numberOfAuthortimeLayers;
          if (targetDepth < v5) {
            targetDepth = v5;
          }
          if (depthTable[targetDepth] == undefined) {
            return targetDepth;
          }
          var v2 = targetDepth;
          var v1 = targetDepth;
          if (direction == 'down') {
            while (depthTable[v1] != undefined) {
              --v1;
            }
            return v1;
          }
          while (depthTable[v2] != undefined) {
            ++v2;
          }
          return v2;
        };

        v2.shuffleDepths = function (subject, targetDepth, depthTable, direction) {
          var v9 = mx.managers.DepthManager.lowestDepth + mx.managers.DepthManager.numberOfAuthortimeLayers;
          var v8 = v9;
          var v5;
          for (v5 in depthTable) {
            var v7 = depthTable[v5];
            if (v7._parent != undefined) {
              v9 = Math.min(v9, v7.getDepth());
            }
          }
          if (direction == undefined) {
            if (subject.getDepth() > targetDepth) {
              direction = 'up';
            } else {
              direction = 'down';
            }
          }
          var v1 = new Array();
          for (v5 in depthTable) {
            v7 = depthTable[v5];
            if (v7._parent != undefined) {
              v1.push(v7);
            }
          }
          v1.sort(mx.managers.DepthManager.sortFunction);
          if (direction == 'up') {
            var v3;
            var v11;
            while (v1.length > 0) {
              v3 = v1.pop();
              if (v3 == subject) {
                break;
              }
            }
            while (v1.length > 0) {
              v11 = subject.getDepth();
              v3 = v1.pop();
              var v4 = v3.getDepth();
              if (v11 > v4 + 1) {
                if (v4 >= 0) {
                  subject.swapDepths(v4 + 1);
                } else {
                  if (v11 > v8 && v4 < v8) {
                    subject.swapDepths(v8);
                  }
                }
              }
              subject.swapDepths(v3);
              if (v4 == targetDepth) {
                break;
              }
            }
          } else {
            if (direction == 'down') {
              var v3;
              while (v1.length > 0) {
                v3 = v1.shift();
                if (v3 == subject) {
                  break;
                }
              }
              while (v1.length > 0) {
                var v11 = v3.getDepth();
                v3 = v1.shift();
                var v4 = v3.getDepth();
                if (v11 < v4 - 1 && v4 > 0) {
                  subject.swapDepths(v4 - 1);
                }
                subject.swapDepths(v3);
                if (v4 == targetDepth) {
                  break;
                }
              }
            }
          }
        };

        v2.getDepthByFlag = function (depthFlag, depthTable) {
          var v2 = 0;
          if (depthFlag == mx.managers.DepthManager.kTop || depthFlag == mx.managers.DepthManager.kNotopmost) {
            var v5 = 0;
            var v7 = false;
            var v8;
            for (v8 in depthTable) {
              var v9 = depthTable[v8];
              var v3 = typeof v9;
              if (v3 == 'movieclip' || v3 == 'object' && v9.__getTextFormat != undefined) {
                if (v9.getDepth() <= mx.managers.DepthManager.highestDepth) {
                  if (!v9._topmost) {
                    v2 = Math.max(v2, v9.getDepth());
                  } else {
                    if (!v7) {
                      v5 = v9.getDepth();
                      v7 = true;
                    } else {
                      v5 = Math.min(v5, v9.getDepth());
                    }
                  }
                }
              }
            }
            v2 += 20;
            if (v7) {
              if (v2 >= v5) {
                v2 = v5 - 1;
              }
            }
          } else {
            if (depthFlag == mx.managers.DepthManager.kBottom) {
              for (var v8 in depthTable) {
                var v9 = depthTable[v8];
                var v3 = typeof v9;
                if (v3 == 'movieclip' || v3 == 'object' && v9.__getTextFormat != undefined) {
                  if (v9.getDepth() <= mx.managers.DepthManager.highestDepth) {
                    v2 = Math.min(v2, v9.getDepth());
                  }
                }
              }
              v2 -= 20;
            } else {
              if (depthFlag == mx.managers.DepthManager.kTopmost) {
                for (var v8 in depthTable) {
                  var v9 = depthTable[v8];
                  var v3 = typeof v9;
                  if (v3 == 'movieclip' || v3 == 'object' && v9.__getTextFormat != undefined) {
                    if (v9.getDepth() <= mx.managers.DepthManager.highestDepth) {
                      v2 = Math.max(v2, v9.getDepth());
                    }
                  }
                }
                v2 += 100;
              }
            }
          }
          if (v2 >= mx.managers.DepthManager.highestDepth) {
            v2 = mx.managers.DepthManager.highestDepth;
          }
          var v6 = mx.managers.DepthManager.lowestDepth + mx.managers.DepthManager.numberOfAuthortimeLayers;
          for (v9 in depthTable) {
            var v4 = depthTable[v9];
            if (v4._parent != undefined) {
              v6 = Math.min(v6, v4.getDepth());
            }
          }
          if (v2 <= v6) {
            v2 = v6;
          }
          return v2;
        };

        v2.buildDepthTable = function (Void) {
          var v5 = new Array();
          var v4;
          for (v4 in this) {
            var v2 = this[v4];
            var v3 = typeof v2;
            if (v3 == 'movieclip' || v3 == 'object' && v2.__getTextFormat != undefined) {
              if (v2._parent == this) {
                v5[v2.getDepth()] = v2;
              }
            }
          }
          return v5;
        };

        v1.reservedDepth = 1048575;
        v1.highestDepth = 1048574;
        v1.lowestDepth = -16383;
        v1.numberOfAuthortimeLayers = 383;
        v1.kCursor = 101;
        v1.kTooltip = 102;
        v1.kTop = 201;
        v1.kBottom = 202;
        v1.kTopmost = 203;
        v1.kNotopmost = 204;
        v1.holder = _root.createEmptyMovieClip('reserved', mx.managers.DepthManager.reservedDepth);
        v1.__depthManager = new mx.managers.DepthManager();
        ASSetPropFlags(mx.managers.DepthManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 256 __Packages.mx.managers.SystemManager {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.managers) {
        _global.mx.managers = new Object();
      }
      if (!_global.mx.managers.SystemManager) {
        var v1 = function () {};

        mx.managers.SystemManager = v1;
        var v2 = v1.prototype;
        v1.init = function (Void) {
          if (mx.managers.SystemManager._initialized == false) {
            mx.managers.SystemManager._initialized = true;
            mx.events.EventDispatcher.initialize(mx.managers.SystemManager);
            Mouse.addListener(mx.managers.SystemManager);
            Stage.addListener(mx.managers.SystemManager);
            mx.managers.SystemManager._xAddEventListener = mx.managers.SystemManager.addEventListener;
            mx.managers.SystemManager.addEventListener = mx.managers.SystemManager.__addEventListener;
            mx.managers.SystemManager._xRemoveEventListener = mx.managers.SystemManager.removeEventListener;
            mx.managers.SystemManager.removeEventListener = mx.managers.SystemManager.__removeEventListener;
          }
        };

        v1.addFocusManager = function (f) {
          mx.managers.SystemManager.form = f;
          f.focusManager.activate();
        };

        v1.removeFocusManager = function (f) {};

        v1.onMouseDown = function (Void) {
          var v1 = mx.managers.SystemManager.form;
          v1.focusManager._onMouseDown();
        };

        v1.onResize = function (Void) {
          var v7 = Stage.width;
          var v6 = Stage.height;
          var v9 = _global.origWidth;
          var v8 = _global.origHeight;
          var v3 = Stage.align;
          var v5 = (v9 - v7) / 2;
          var v4 = (v8 - v6) / 2;
          if (v3 == 'T') {
            v4 = 0;
          } else {
            if (v3 == 'B') {
              v4 = v8 - v6;
            } else {
              if (v3 == 'L') {
                v5 = 0;
              } else {
                if (v3 == 'R') {
                  v5 = v9 - v7;
                } else {
                  if (v3 == 'LT') {
                    v4 = 0;
                    v5 = 0;
                  } else {
                    if (v3 == 'TR') {
                      v4 = 0;
                      v5 = v9 - v7;
                    } else {
                      if (v3 == 'LB') {
                        v4 = v8 - v6;
                        v5 = 0;
                      } else {
                        if (v3 == 'RB') {
                          v4 = v8 - v6;
                          v5 = v9 - v7;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (mx.managers.SystemManager.__screen == undefined) {
            mx.managers.SystemManager.__screen = new Object();
          }
          mx.managers.SystemManager.__screen.x = v5;
          mx.managers.SystemManager.__screen.y = v4;
          mx.managers.SystemManager.__screen.width = v7;
          mx.managers.SystemManager.__screen.height = v6;
          _root.focusManager.relocate();
          mx.managers.SystemManager.dispatchEvent({'type': 'resize'});
        };

        v1.__get__screen = function () {
          mx.managers.SystemManager.init();
          if (mx.managers.SystemManager.__screen == undefined) {
            mx.managers.SystemManager.onResize();
          }
          return mx.managers.SystemManager.__screen;
        };

        v1._initialized = false;
        v1.idleFrames = 0;
        v1.isMouseDown = false;
        v1.forms = new Array();
        v1.addProperty('screen', v1.__get__screen, function () {});
        ASSetPropFlags(mx.managers.SystemManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 257 __Packages.mx.managers.FocusManager {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.managers) {
        _global.mx.managers = new Object();
      }
      if (!_global.mx.managers.FocusManager) {
        var v1 = function () {
          super();
        };

        mx.managers.FocusManager = v1;
        var v2 = new mx.core.UIComponent();
        mx.managers.FocusManager.prototype = v2;
        v2.__get__defaultPushButton = function () {
          return this.__defaultPushButton;
        };

        v2.__set__defaultPushButton = function (x) {
          if (x != this.__defaultPushButton) {
            this.__defaultPushButton.__set__emphasized(false);
            this.__defaultPushButton = x;
            this.defPushButton = x;
            x.__set__emphasized(true);
          }
          return this.__get__defaultPushButton();
        };

        v2.getMaxTabIndex = function (o) {
          var v3 = 0;
          var v6;
          for (v6 in o) {
            var v2 = o[v6];
            if (v2._parent == o) {
              if (v2.tabIndex != undefined) {
                if (v2.tabIndex > v3) {
                  v3 = v2.tabIndex;
                }
              }
              if (v2.tabChildren == true) {
                var v4 = this.getMaxTabIndex(v2);
                if (v4 > v3) {
                  v3 = v4;
                }
              }
            }
          }
          return v3;
        };

        v2.getNextTabIndex = function (Void) {
          return this.getMaxTabIndex(this.form) + 1;
        };

        v2.__get__nextTabIndex = function () {
          return this.getNextTabIndex();
        };

        v2.relocate = function (Void) {
          var v2 = mx.managers.SystemManager.__get__screen();
          this.move(v2.x - 1, v2.y - 1);
        };

        v2.init = function (Void) {
          super.init();
          this.tabEnabled = false;
          this._height = 1;
          this._width = 1;
          this._y = -1;
          this._x = -1;
          this._alpha = 0;
          this._parent.focusManager = this;
          this._parent.tabChildren = true;
          this._parent.tabEnabled = false;
          this.form = this._parent;
          this._parent.addEventListener('hide', this);
          this._parent.addEventListener('reveal', this);
          mx.managers.SystemManager.init();
          mx.managers.SystemManager.addFocusManager(this.form);
          this.tabCapture.tabIndex = 0;
          this.watch('enabled', this.enabledChanged);
          Selection.addListener(this);
          this.lastMouse = new Object();
          _global.ASSetPropFlags(this._parent, 'focusManager', 1);
          _global.ASSetPropFlags(this._parent, 'tabChildren', 1);
          _global.ASSetPropFlags(this._parent, 'tabEnabled', 1);
        };

        v2.enabledChanged = function (id, oldValue, newValue) {
          this._visible = newValue;
          return newValue;
        };

        v2.activate = function (Void) {
          Key.addListener(this);
          this._visible = true;
          this.activated = this._visible;
          if (this.lastFocus != undefined) {
            this.bNeedFocus = true;
            if (!mx.managers.SystemManager.isMouseDown) {
              this.doLater(this, 'restoreFocus');
            }
          }
        };

        v2.deactivate = function (Void) {
          Key.removeListener(this);
          this._visible = false;
          this.activated = this._visible;
          var v2 = this.getSelectionFocus();
          var v3 = this.getActualFocus(v2);
          if (this.isOurFocus(v3)) {
            this.lastSelFocus = v2;
            this.lastFocus = v3;
          }
          this.cancelAllDoLaters();
        };

        v2.isOurFocus = function (o) {
          if (o.focusManager == this) {
            return true;
          }
          while (o != undefined) {
            if (o.focusManager != undefined) {
              return false;
            }
            if (o._parent == this._parent) {
              return true;
            }
            o = o._parent;
          }
          return false;
        };

        v2.onSetFocus = function (o, n) {
          if (n == null) {
            if (this.activated) {
              this.bNeedFocus = true;
            }
          } else {
            var v2 = this.getFocus();
            if (this.isOurFocus(v2)) {
              this.bNeedFocus = false;
              this.lastFocus = v2;
              this.lastSelFocus = n;
            }
          }
        };

        v2.restoreFocus = function (Void) {
          var v2 = this.lastSelFocus.hscroll;
          if (v2 != undefined) {
            var v5 = this.lastSelFocus.scroll;
            var v4 = this.lastSelFocus.background;
          }
          this.lastFocus.setFocus();
          var v3 = Selection;
          Selection.setSelection(v3.lastBeginIndex, v3.lastEndIndex);
          if (v2 != undefined) {
            this.lastSelFocus.scroll = v5;
            this.lastSelFocus.hscroll = v2;
            this.lastSelFocus.background = v4;
          }
        };

        v2.onUnload = function (Void) {
          mx.managers.SystemManager.removeFocusManager(this.form);
        };

        v2.setFocus = function (o) {
          if (o == null) {
            Selection.setFocus(null);
          } else {
            if (o.setFocus == undefined) {
              Selection.setFocus(o);
            } else {
              o.setFocus();
            }
          }
        };

        v2.getActualFocus = function (o) {
          var v1 = o._parent;
          while (v1 != undefined) {
            if (v1.focusTextField != undefined) {
              while (v1.focusTextField != undefined) {
                o = v1;
                v1 = v1._parent;
                if (v1 == undefined) {
                  return undefined;
                }
                if (v1.focusTextField == undefined) {
                  return o;
                }
              }
            }
            if (v1.tabEnabled != true) {
              return o;
            }
            o = v1;
            v1 = o._parent;
          }
          return undefined;
        };

        v2.getSelectionFocus = function () {
          var m = Selection.getFocus();
          var o = eval(m);
          return o;
        };

        v2.getFocus = function (Void) {
          var v2 = this.getSelectionFocus();
          return this.getActualFocus(v2);
        };

        v2.walkTree = function (p, index, groupName, dir, lookup, firstChild) {
          var v5 = true;
          var v11;
          for (v11 in p) {
            var v2 = p[v11];
            if (v2._parent == p && v2.enabled != false && v2._visible != false && (v2.tabEnabled == true || v2.tabEnabled != false && (v2.onPress != undefined || v2.onRelease != undefined || v2.onReleaseOutside != undefined || v2.onDragOut != undefined || v2.onDragOver != undefined || v2.onRollOver != undefined || v2.onRollOut != undefined || v2 instanceof TextField))) {
              if (v2._searchKey == this._searchKey) {
                continue;
              }
              v2._searchKey = this._searchKey;
              if (v2 != this._lastTarget) {
                if ((v2.groupName != undefined || groupName != undefined) && v2.groupName == groupName) {
                  continue;
                }
                if (v2 instanceof TextField && v2.selectable == false) {
                  continue;
                }
                if (v5 || v2.groupName != undefined && v2.groupName == this._firstNode.groupName && v2.selected == true) {
                  if (firstChild) {
                    this._firstNode = v2;
                    firstChild = false;
                  }
                }
                if (this._nextIsNext == true) {
                  if (v2.groupName != undefined && v2.groupName == this._nextNode.groupName && v2.selected == true || this._nextNode == undefined && (v2.groupName == undefined || v2.groupName != undefined && v2.groupName != groupName)) {
                    this._nextNode = v2;
                  }
                }
                if (v2.groupName == undefined || groupName != v2.groupName) {
                  if (this._lastx.groupName != undefined && v2.groupName == this._lastx.groupName && this._lastx.selected == true) {
                  } else {
                    this._lastx = v2;
                  }
                }
              } else {
                this._prevNode = this._lastx;
                this._needPrev = false;
                this._nextIsNext = true;
              }
              if (v2.tabIndex != undefined) {
                if (v2.tabIndex == index) {
                  if (this._foundList[v2._name] == undefined) {
                    if (this._needPrev) {
                      this._prevObj = v2;
                      this._needPrev = false;
                    }
                    this._nextObj = v2;
                  }
                }
                if (dir && v2.tabIndex > index) {
                  if (this._nextObj == undefined || this._nextObj.tabIndex > v2.tabIndex && (v2.groupName == undefined || this._nextObj.groupName == undefined || v2.groupName != this._nextObj.groupName) || this._nextObj.groupName != undefined && this._nextObj.groupName == v2.groupName && this._nextObj.selected != true && (v2.selected == true || this._nextObj.tabIndex > v2.tabIndex)) {
                    this._nextObj = v2;
                  }
                } else {
                  if (!dir && v2.tabIndex < index) {
                    if (this._prevObj == undefined || this._prevObj.tabIndex < v2.tabIndex && (v2.groupName == undefined || this._prevObj.groupName == undefined || v2.groupName != this._prevObj.groupName) || this._prevObj.groupName != undefined && this._prevObj.groupName == v2.groupName && this._prevObj.selected != true && (v2.selected == true || this._prevObj.tabIndex < v2.tabIndex)) {
                      this._prevObj = v2;
                    }
                  }
                }
                if (this._firstObj == undefined || v2.tabIndex < this._firstObj.tabIndex && (v2.groupName == undefined || this._firstObj.groupName == undefined || v2.groupName != this._firstObj.groupName) || this._firstObj.groupName != undefined && this._firstObj.groupName == v2.groupName && this._firstObj.selected != true && (v2.selected == true || v2.tabIndex < this._firstObj.tabIndex)) {
                  this._firstObj = v2;
                }
                if (this._lastObj == undefined || v2.tabIndex > this._lastObj.tabIndex && (v2.groupName == undefined || this._lastObj.groupName == undefined || v2.groupName != this._lastObj.groupName) || this._lastObj.groupName != undefined && this._lastObj.groupName == v2.groupName && this._lastObj.selected != true && (v2.selected == true || v2.tabIndex > this._lastObj.tabIndex)) {
                  this._lastObj = v2;
                }
              }
              if (v2.tabChildren) {
                this.getTabCandidateFromChildren(v2, index, groupName, dir, v5 && firstChild);
              }
              v5 = false;
            } else {
              if (v2._parent == p && v2.tabChildren == true && v2._visible != false) {
                if (v2 == this._lastTarget) {
                  if (v2._searchKey == this._searchKey) {
                    continue;
                  }
                  v2._searchKey = this._searchKey;
                  if (this._prevNode == undefined) {
                    var v3 = this._lastx;
                    var v7 = false;
                    while (v3 != undefined) {
                      if (v3 == v2) {
                        v7 = true;
                        break;
                      }
                      v3 = v3._parent;
                    }
                    if (v7 == false) {
                      this._prevNode = this._lastx;
                    }
                  }
                  this._needPrev = false;
                  if (this._nextNode == undefined) {
                    this._nextIsNext = true;
                  }
                } else {
                  if (!(v2.focusManager != undefined && v2.focusManager._parent == v2)) {
                    if (v2._searchKey == this._searchKey) {
                      continue;
                    }
                    v2._searchKey = this._searchKey;
                    this.getTabCandidateFromChildren(v2, index, groupName, dir, v5 && firstChild);
                  }
                }
                v5 = false;
              }
            }
          }
          this._lastNode = this._lastx;
          if (lookup) {
            if (p._parent != undefined) {
              if (p != this._parent) {
                if (this._prevNode == undefined && dir) {
                  this._needPrev = true;
                } else {
                  if (this._nextNode == undefined && !dir) {
                    this._nextIsNext = false;
                  }
                }
                this._lastTarget = this._lastTarget._parent;
                this.getTabCandidate(p._parent, index, groupName, dir, true);
              }
            }
          }
        };

        v2.getTabCandidate = function (o, index, groupName, dir, firstChild) {
          var v2;
          var v3 = true;
          if (o == this._parent) {
            v2 = o;
            v3 = false;
          } else {
            v2 = o._parent;
            if (v2 == undefined) {
              v2 = o;
              v3 = false;
            }
          }
          this.walkTree(v2, index, groupName, dir, v3, firstChild);
        };

        v2.getTabCandidateFromChildren = function (o, index, groupName, dir, firstChild) {
          this.walkTree(o, index, groupName, dir, false, firstChild);
        };

        v2.getFocusManagerFromObject = function (o) {
          while (o != undefined) {
            if (o.focusManager != undefined) {
              return o.focusManager;
            }
            o = o._parent;
          }
          return undefined;
        };

        v2.tabHandler = function (Void) {
          this.bDrawFocus = true;
          var v5 = this.getSelectionFocus();
          var v4 = this.getActualFocus(v5);
          if (v4 != v5) {
            v5 = v4;
          }
          if (this.getFocusManagerFromObject(v5) != this) {
            v5 == undefined;
          }
          if (v5 == undefined) {
            v5 = this.form;
          } else {
            if (v5.tabIndex != undefined) {
              if (this._foundList != undefined || this._foundList.tabIndex != v5.tabIndex) {
                this._foundList = new Object();
                this._foundList.tabIndex = v5.tabIndex;
              }
              this._foundList[v5._name] = v5;
            }
          }
          var v3 = Key.isDown(16) != true;
          this._searchKey = getTimer();
          this._needPrev = true;
          this._nextIsNext = false;
          this._lastx = undefined;
          this._firstNode = undefined;
          this._lastNode = undefined;
          this._nextNode = undefined;
          this._prevNode = undefined;
          this._firstObj = undefined;
          this._lastObj = undefined;
          this._nextObj = undefined;
          this._prevObj = undefined;
          this._lastTarget = v5;
          var v6 = v5;
          this.getTabCandidate(v6, (v5.tabIndex == undefined) ? 0 : v5.tabIndex, v5.groupName, v3, true);
          var v2;
          if (v3) {
            if (this._nextObj != undefined) {
              v2 = this._nextObj;
            } else {
              v2 = this._firstObj;
            }
          } else {
            if (this._prevObj != undefined) {
              v2 = this._prevObj;
            } else {
              v2 = this._lastObj;
            }
          }
          if (v2.tabIndex != v5.tabIndex) {
            this._foundList = new Object();
            this._foundList.tabIndex = v2.tabIndex;
            this._foundList[v2._name] = v2;
          } else {
            if (this._foundList == undefined) {
              this._foundList = new Object();
              this._foundList.tabIndex = v2.tabIndex;
            }
            this._foundList[v2._name] = v2;
          }
          if (v2 == undefined) {
            if (v3 == false) {
              if (this._nextNode != undefined) {
                v2 = this._nextNode;
              } else {
                v2 = this._firstNode;
              }
            } else {
              if (this._prevNode == undefined || v5 == this.form) {
                v2 = this._lastNode;
              } else {
                v2 = this._prevNode;
              }
            }
          }
          if (v2 == undefined) {
            return undefined;
          }
          this.lastTabFocus = v2;
          this.setFocus(v2);
          if (v2.emphasized != undefined) {
            if (this.defPushButton != undefined) {
              v5 = this.defPushButton;
              this.defPushButton = v2;
              v5.emphasized = false;
              v2.emphasized = true;
            }
          } else {
            if (this.defPushButton != undefined && this.defPushButton != this.__defaultPushButton) {
              v5 = this.defPushButton;
              this.defPushButton = this.__defaultPushButton;
              v5.emphasized = false;
              this.__defaultPushButton.__set__emphasized(true);
            }
          }
        };

        v2.onKeyDown = function (Void) {
          mx.managers.SystemManager.idleFrames = 0;
          if (this.defaultPushButtonEnabled) {
            if (Key.getCode() == 13) {
              if (this.__get__defaultPushButton() != undefined) {
                this.doLater(this, 'sendDefaultPushButtonEvent');
              }
            }
          }
        };

        v2.sendDefaultPushButtonEvent = function (Void) {
          this.defPushButton.dispatchEvent({'type': 'click'});
        };

        v2.getMousedComponentFromChildren = function (x, y, o) {
          for (var v7 in o) {
            var v2 = o[v7];
            if (v2._visible && v2.enabled && v2._parent == o && v2._searchKey != this._searchKey) {
              v2._searchKey = this._searchKey;
              if (v2.hitTest(x, y, true)) {
                if (v2.onPress != undefined || v2.onRelease != undefined) {
                                    return v2;
                }
                var v3 = this.getMousedComponentFromChildren(x, y, v2);
                if (v3 != undefined) {
                                    return v3;
                }
                                return v2;
              }
            }
          }
          return undefined;
        };

        v2.mouseActivate = function (Void) {
          if (!this.bNeedFocus) {
            return undefined;
          }
          this._searchKey = getTimer();
          var v2 = this.getMousedComponentFromChildren(this.lastMouse.x, this.lastMouse.y, this.form);
          if (v2 instanceof mx.core.UIComponent) {
            return undefined;
          }
          v2 = this.findFocusFromObject(v2);
          if (v2 == this.lastFocus) {
            return undefined;
          }
          if (v2 == undefined) {
            this.doLater(this, 'restoreFocus');
            return undefined;
          }
          var v3 = v2.hscroll;
          if (v3 != undefined) {
            var v6 = v2.scroll;
            var v5 = v2.background;
          }
          this.setFocus(v2);
          var v4 = Selection;
          Selection.setSelection(v4.lastBeginIndex, v4.lastEndIndex);
          if (v3 != undefined) {
            v2.scroll = v6;
            v2.hscroll = v3;
            v2.background = v5;
          }
        };

        v2._onMouseDown = function (Void) {
          this.bDrawFocus = false;
          if (this.lastFocus != undefined) {
            this.lastFocus.drawFocus(false);
          }
          mx.managers.SystemManager.idleFrames = 0;
          var v3 = Selection;
          v3.lastBeginIndex = Selection.getBeginIndex();
          v3.lastEndIndex = Selection.getEndIndex();
          this.lastMouse.x = _root._xmouse;
          this.lastMouse.y = _root._ymouse;
          _root.localToGlobal(this.lastMouse);
        };

        v2.onMouseUp = function (Void) {
          if (this._visible) {
            this.doLater(this, 'mouseActivate');
          }
        };

        v2.handleEvent = function (e) {
          if (e.type == 'reveal') {
            mx.managers.SystemManager.activate(this.form);
          } else {
            mx.managers.SystemManager.deactivate(this.form);
          }
        };

        v1.enableFocusManagement = function () {
          if (!mx.managers.FocusManager.initialized) {
            mx.managers.FocusManager.initialized = true;
            Object.registerClass('FocusManager', mx.managers.FocusManager);
            if (_root.focusManager == undefined) {
              _root.createClassObject(mx.managers.FocusManager, 'focusManager', mx.managers.DepthManager.highestDepth--);
            }
          }
        };

        v1.symbolName = 'FocusManager';
        v1.symbolOwner = mx.managers.FocusManager;
        v1.version = '2.0.2.126';
        v2.className = 'FocusManager';
        v2.bNeedFocus = false;
        v2.bDrawFocus = false;
        v2.defaultPushButtonEnabled = true;
        v2.activated = true;
        v1.initialized = false;
        v1.UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
        v2.addProperty('defaultPushButton', v2.__get__defaultPushButton, v2.__set__defaultPushButton);
        v2.addProperty('nextTabIndex', v2.__get__nextTabIndex, function () {});
        ASSetPropFlags(mx.managers.FocusManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 258 __Packages.mx.skins.halo.FocusRect {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.halo) {
        _global.mx.skins.halo = new Object();
      }
      if (!_global.mx.skins.halo.FocusRect) {
        var v1 = function () {
          super();
          this.boundingBox_mc._visible = false;
          this.boundingBox_mc._height = 0;
          this.boundingBox_mc._width = 0;
        };

        mx.skins.halo.FocusRect = v1;
        var v2 = new mx.skins.SkinElement();
        mx.skins.halo.FocusRect.prototype = v2;
        v2.draw = function (o) {
          o.adjustFocusRect();
        };

        v2.setSize = function (w, h, r, a, rectCol) {
          this._yscale = 100;
          this._xscale = 100;
          this.clear();
          if (typeof r == 'object') {
            r.br = r.br > 2 ? r.br - 2 : 0;
            r.bl = r.bl > 2 ? r.bl - 2 : 0;
            r.tr = r.tr > 2 ? r.tr - 2 : 0;
            r.tl = r.tl > 2 ? r.tl - 2 : 0;
            this.beginFill(rectCol, a * 0.3);
            this.drawRoundRect(0, 0, w, h, r);
            this.drawRoundRect(2, 2, w - 4, h - 4, r);
            this.endFill();
            r.br = r.br > 1 ? r.br + 1 : 0;
            r.bl = r.bl > 1 ? r.bl + 1 : 0;
            r.tr = r.tr > 1 ? r.tr + 1 : 0;
            r.tl = r.tl > 1 ? r.tl + 1 : 0;
            this.beginFill(rectCol, a * 0.3);
            this.drawRoundRect(1, 1, w - 2, h - 2, r);
            r.br = r.br > 1 ? r.br - 1 : 0;
            r.bl = r.bl > 1 ? r.bl - 1 : 0;
            r.tr = r.tr > 1 ? r.tr - 1 : 0;
            r.tl = r.tl > 1 ? r.tl - 1 : 0;
            this.drawRoundRect(2, 2, w - 4, h - 4, r);
            this.endFill();
          } else {
            var v5;
            if (r != 0) {
              v5 = r - 2;
            } else {
              v5 = 0;
            }
            this.beginFill(rectCol, a * 0.3);
            this.drawRoundRect(0, 0, w, h, r);
            this.drawRoundRect(2, 2, w - 4, h - 4, v5);
            this.endFill();
            this.beginFill(rectCol, a * 0.3);
            if (r != 0) {
              v5 = r - 2;
              r -= 1;
            } else {
              v5 = 0;
              r = 0;
            }
            this.drawRoundRect(1, 1, w - 2, h - 2, r);
            this.drawRoundRect(2, 2, w - 4, h - 4, v5);
            this.endFill();
          }
        };

        v2.handleEvent = function (e) {
          if (e.type == 'unload') {
            this._visible = true;
          } else {
            if (e.type == 'resize') {
              e.target.adjustFocusRect();
            } else {
              if (e.type == 'move') {
                e.target.adjustFocusRect();
              }
            }
          }
        };

        v1.classConstruct = function () {
          mx.core.UIComponent.prototype.drawFocus = function (focused) {
            var v2 = this._parent.focus_mc;
            if (!focused) {
              v2._visible = false;
              this.removeEventListener('unload', v2);
              this.removeEventListener('move', v2);
              this.removeEventListener('resize', v2);
            } else {
              if (v2 == undefined) {
                v2 = this._parent.createChildAtDepth('FocusRect', mx.managers.DepthManager.kTop);
                v2.tabEnabled = false;
                this._parent.focus_mc = v2;
              } else {
                v2._visible = true;
              }
              v2.draw(this);
              if (v2.getDepth() < this.getDepth()) {
                v2.setDepthAbove(this);
              }
              this.addEventListener('unload', v2);
              this.addEventListener('move', v2);
              this.addEventListener('resize', v2);
            }
          };

          mx.core.UIComponent.prototype.adjustFocusRect = function () {
            var v2 = this.getStyle('themeColor');
            if (v2 == undefined) {
              v2 = 8453965;
            }
            var v3 = this._parent.focus_mc;
            v3.setSize(this.width + 4, this.height + 4, 0, 100, v2);
            v3.move(this.x - 2, this.y - 2);
          };

          TextField.prototype.drawFocus = mx.core.UIComponent.prototype.drawFocus;
          TextField.prototype.adjustFocusRect = mx.core.UIComponent.prototype.adjustFocusRect;
          mx.skins.halo.FocusRect.prototype.drawRoundRect = mx.skins.halo.Defaults.prototype.drawRoundRect;
          return true;
        };

        v1.classConstructed = mx.skins.halo.FocusRect.classConstruct();
        v1.DefaultsDependency = mx.skins.halo.Defaults;
        v1.UIComponentDependency = mx.core.UIComponent;
        ASSetPropFlags(mx.skins.halo.FocusRect.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 259 __Packages.mx.managers.OverlappedWindows {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.managers) {
        _global.mx.managers = new Object();
      }
      if (!_global.mx.managers.OverlappedWindows) {
        var v1 = function () {};

        mx.managers.OverlappedWindows = v1;
        var v2 = v1.prototype;
        v1.checkIdle = function (Void) {
          if (mx.managers.SystemManager.idleFrames > 10) {
            mx.managers.SystemManager.dispatchEvent({'type': 'idle'});
          } else {
            ++mx.managers.SystemManager.idleFrames;
          }
        };

        v1.__addEventListener = function (e, o, l) {
          if (e == 'idle') {
            if (mx.managers.SystemManager.interval == undefined) {
              mx.managers.SystemManager.interval = setInterval(mx.managers.SystemManager.checkIdle, 100);
            }
          }
          mx.managers.SystemManager._xAddEventListener(e, o, l);
        };

        v1.__removeEventListener = function (e, o, l) {
          if (e == 'idle') {
            if (mx.managers.SystemManager._xRemoveEventListener(e, o, l) == 0) {
              clearInterval(mx.managers.SystemManager.interval);
            }
          } else {
            mx.managers.SystemManager._xRemoveEventListener(e, o, l);
          }
        };

        v1.onMouseDown = function (Void) {
          mx.managers.SystemManager.idleFrames = 0;
          mx.managers.SystemManager.isMouseDown = true;
          var v5 = _root;
          var v3;
          var v8 = _root._xmouse;
          var v7 = _root._ymouse;
          if (mx.managers.SystemManager.form.modalWindow == undefined) {
            if (mx.managers.SystemManager.forms.length > 1) {
              var v6 = mx.managers.SystemManager.forms.length;
              var v4;
              v4 = 0;
              while (v4 < v6) {
                var v2 = mx.managers.SystemManager.forms[v4];
                if (v2._visible) {
                  if (v2.hitTest(v8, v7)) {
                    if (v3 == undefined) {
                      v3 = v2.getDepth();
                      v5 = v2;
                    } else {
                      if (v3 < v2.getDepth()) {
                        v3 = v2.getDepth();
                        v5 = v2;
                      }
                    }
                  }
                }
                ++v4;
              }
              if (v5 != mx.managers.SystemManager.form) {
                mx.managers.SystemManager.activate(v5);
              }
            }
          }
          var v9 = mx.managers.SystemManager.form;
          v9.focusManager._onMouseDown();
        };

        v1.onMouseMove = function (Void) {
          mx.managers.SystemManager.idleFrames = 0;
        };

        v1.onMouseUp = function (Void) {
          mx.managers.SystemManager.isMouseDown = false;
          mx.managers.SystemManager.idleFrames = 0;
        };

        v1.activate = function (f) {
          if (mx.managers.SystemManager.form != undefined) {
            if (mx.managers.SystemManager.form != f && mx.managers.SystemManager.forms.length > 1) {
              var v1 = mx.managers.SystemManager.form;
              v1.focusManager.deactivate();
            }
          }
          mx.managers.SystemManager.form = f;
          f.focusManager.activate();
        };

        v1.deactivate = function (f) {
          if (mx.managers.SystemManager.form != undefined) {
            if (mx.managers.SystemManager.form == f && mx.managers.SystemManager.forms.length > 1) {
              var v5 = mx.managers.SystemManager.form;
              v5.focusManager.deactivate();
              var v3 = mx.managers.SystemManager.forms.length;
              var v1;
              var v2;
              v1 = 0;
              while (v1 < v3) {
                if (mx.managers.SystemManager.forms[v1] == f) {
                  v1 += 1;
                  while (v1 < v3) {
                    if (mx.managers.SystemManager.forms[v1]._visible == true) {
                      v2 = mx.managers.SystemManager.forms[v1];
                    }
                    ++v1;
                  }
                  mx.managers.SystemManager.form = v2;
                  break;
                } else {
                  if (mx.managers.SystemManager.forms[v1]._visible == true) {
                    v2 = mx.managers.SystemManager.forms[v1];
                  }
                }
                ++v1;
              }
              v5 = mx.managers.SystemManager.form;
              v5.focusManager.activate();
            }
          }
        };

        v1.addFocusManager = function (f) {
          mx.managers.SystemManager.forms.push(f);
          mx.managers.SystemManager.activate(f);
        };

        v1.removeFocusManager = function (f) {
          var v3 = mx.managers.SystemManager.forms.length;
          var v1;
          v1 = 0;
          while (v1 < v3) {
            if (mx.managers.SystemManager.forms[v1] == f) {
              if (mx.managers.SystemManager.form == f) {
                mx.managers.SystemManager.deactivate(f);
              }
              mx.managers.SystemManager.forms.splice(v1, 1);
              return undefined;
            }
            ++v1;
          }
        };

        v1.enableOverlappedWindows = function () {
          if (!mx.managers.OverlappedWindows.initialized) {
            mx.managers.OverlappedWindows.initialized = true;
            mx.managers.SystemManager.checkIdle = mx.managers.OverlappedWindows.checkIdle;
            mx.managers.SystemManager.__addEventListener = mx.managers.OverlappedWindows.__addEventListener;
            mx.managers.SystemManager.__removeEventListener = mx.managers.OverlappedWindows.__removeEventListener;
            mx.managers.SystemManager.onMouseDown = mx.managers.OverlappedWindows.onMouseDown;
            mx.managers.SystemManager.onMouseMove = mx.managers.OverlappedWindows.onMouseMove;
            mx.managers.SystemManager.onMouseUp = mx.managers.OverlappedWindows.onMouseUp;
            mx.managers.SystemManager.activate = mx.managers.OverlappedWindows.activate;
            mx.managers.SystemManager.deactivate = mx.managers.OverlappedWindows.deactivate;
            mx.managers.SystemManager.addFocusManager = mx.managers.OverlappedWindows.addFocusManager;
            mx.managers.SystemManager.removeFocusManager = mx.managers.OverlappedWindows.removeFocusManager;
          }
        };

        v1.initialized = false;
        v1.SystemManagerDependency = mx.managers.SystemManager;
        ASSetPropFlags(mx.managers.OverlappedWindows.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 260 __Packages.mx.styles.CSSSetStyle {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.styles) {
        _global.mx.styles = new Object();
      }
      if (!_global.mx.styles.CSSSetStyle) {
        var v1 = function () {};

        mx.styles.CSSSetStyle = v1;
        var v2 = v1.prototype;
        v2._setStyle = function (styleProp, newValue) {
          this[styleProp] = newValue;
          if (mx.styles.StyleManager.TextStyleMap[styleProp] != undefined) {
            if (styleProp == 'color') {
              if (isNaN(newValue)) {
                newValue = mx.styles.StyleManager.getColorName(newValue);
                this[styleProp] = newValue;
                if (newValue == undefined) {
                  return undefined;
                }
              }
            }
            _level0.changeTextStyleInChildren(styleProp);
            return undefined;
          }
          if (mx.styles.StyleManager.isColorStyle(styleProp)) {
            if (isNaN(newValue)) {
              newValue = mx.styles.StyleManager.getColorName(newValue);
              this[styleProp] = newValue;
              if (newValue == undefined) {
                return undefined;
              }
            }
            if (styleProp == 'themeColor') {
              var v7 = mx.styles.StyleManager.colorNames.haloBlue;
              var v6 = mx.styles.StyleManager.colorNames.haloGreen;
              var v8 = mx.styles.StyleManager.colorNames.haloOrange;
              var v4 = {};
              v4[v7] = 12188666;
              v4[v6] = 13500353;
              v4[v8] = 16766319;
              var v5 = {};
              v5[v7] = 13958653;
              v5[v6] = 14942166;
              v5[v8] = 16772787;
              var v9 = v4[newValue];
              var v10 = v5[newValue];
              if (v9 == undefined) {
                v9 = newValue;
              }
              if (v10 == undefined) {
                v10 = newValue;
              }
              this.setStyle('selectionColor', v9);
              this.setStyle('rollOverColor', v10);
            }
            _level0.changeColorStyleInChildren(this.styleName, styleProp, newValue);
          } else {
            if (styleProp == 'backgroundColor' && isNaN(newValue)) {
              newValue = mx.styles.StyleManager.getColorName(newValue);
              this[styleProp] = newValue;
              if (newValue == undefined) {
                return undefined;
              }
            }
            _level0.notifyStyleChangeInChildren(this.styleName, styleProp, newValue);
          }
        };

        v2.changeTextStyleInChildren = function (styleProp) {
          var v4 = getTimer();
          var v5;
          for (v5 in this) {
            var v2 = this[v5];
            if (v2._parent == this) {
              if (v2.searchKey != v4) {
                if (v2.stylecache != undefined) {
                  delete v2.stylecache.tf;
                  delete v2.stylecache[styleProp];
                }
                v2.invalidateStyle(styleProp);
                v2.changeTextStyleInChildren(styleProp);
                v2.searchKey = v4;
              }
            }
          }
        };

        v2.changeColorStyleInChildren = function (sheetName, colorStyle, newValue) {
          var v6 = getTimer();
          var v7;
          for (v7 in this) {
            var v2 = this[v7];
            if (v2._parent == this) {
              if (v2.searchKey != v6) {
                if (v2.getStyleName() == sheetName || sheetName == undefined || sheetName == '_global') {
                  if (v2.stylecache != undefined) {
                    delete v2.stylecache[colorStyle];
                  }
                  if (typeof v2._color == 'string') {
                    if (v2._color == colorStyle) {
                      var v4 = v2.getStyle(colorStyle);
                      if (colorStyle == 'color') {
                        if (this.stylecache.tf.color != undefined) {
                          this.stylecache.tf.color = v4;
                        }
                      }
                      v2.setColor(v4);
                    }
                  } else {
                    if (v2._color[colorStyle] != undefined) {
                      if (typeof v2 != 'movieclip') {
                        v2._parent.invalidateStyle();
                      } else {
                        v2.invalidateStyle(colorStyle);
                      }
                    }
                  }
                }
                v2.changeColorStyleInChildren(sheetName, colorStyle, newValue);
                v2.searchKey = v6;
              }
            }
          }
        };

        v2.notifyStyleChangeInChildren = function (sheetName, styleProp, newValue) {
          var v5 = getTimer();
          var v6;
          for (v6 in this) {
            var v2 = this[v6];
            if (v2._parent == this) {
              if (v2.searchKey != v5) {
                if (v2.styleName == sheetName || v2.styleName != undefined && typeof v2.styleName == 'movieclip' || sheetName == undefined) {
                  if (v2.stylecache != undefined) {
                    delete v2.stylecache[styleProp];
                    delete v2.stylecache.tf;
                  }
                  delete v2.enabledColor;
                  v2.invalidateStyle(styleProp);
                }
                v2.notifyStyleChangeInChildren(sheetName, styleProp, newValue);
                v2.searchKey = v5;
              }
            }
          }
        };

        v2.setStyle = function (styleProp, newValue) {
          if (this.stylecache != undefined) {
            delete this.stylecache[styleProp];
            delete this.stylecache.tf;
          }
          this[styleProp] = newValue;
          if (mx.styles.StyleManager.isColorStyle(styleProp)) {
            if (isNaN(newValue)) {
              newValue = mx.styles.StyleManager.getColorName(newValue);
              this[styleProp] = newValue;
              if (newValue == undefined) {
                return undefined;
              }
            }
            if (styleProp == 'themeColor') {
              var v10 = mx.styles.StyleManager.colorNames.haloBlue;
              var v9 = mx.styles.StyleManager.colorNames.haloGreen;
              var v11 = mx.styles.StyleManager.colorNames.haloOrange;
              var v6 = {};
              v6[v10] = 12188666;
              v6[v9] = 13500353;
              v6[v11] = 16766319;
              var v7 = {};
              v7[v10] = 13958653;
              v7[v9] = 14942166;
              v7[v11] = 16772787;
              var v12 = v6[newValue];
              var v13 = v7[newValue];
              if (v12 == undefined) {
                v12 = newValue;
              }
              if (v13 == undefined) {
                v13 = newValue;
              }
              this.setStyle('selectionColor', v12);
              this.setStyle('rollOverColor', v13);
            }
            if (typeof this._color == 'string') {
              if (this._color == styleProp) {
                if (styleProp == 'color') {
                  if (this.stylecache.tf.color != undefined) {
                    this.stylecache.tf.color = newValue;
                  }
                }
                this.setColor(newValue);
              }
            } else {
              if (this._color[styleProp] != undefined) {
                this.invalidateStyle(styleProp);
              }
            }
            this.changeColorStyleInChildren(undefined, styleProp, newValue);
          } else {
            if (styleProp == 'backgroundColor' && isNaN(newValue)) {
              newValue = mx.styles.StyleManager.getColorName(newValue);
              this[styleProp] = newValue;
              if (newValue == undefined) {
                return undefined;
              }
            }
            this.invalidateStyle(styleProp);
          }
          if (mx.styles.StyleManager.isInheritingStyle(styleProp) || styleProp == 'styleName') {
            var v8;
            var v5 = newValue;
            if (styleProp == 'styleName') {
              v8 = (typeof newValue == 'string') ? _global.styles[newValue] : v5;
              v5 = v8.themeColor;
              if (v5 != undefined) {
                v8.selectionColor = v5;
                v8.rollOverColor = v8.selectionColor;
              }
            }
            this.notifyStyleChangeInChildren(undefined, styleProp, newValue);
          }
        };

        v1.enableRunTimeCSS = function () {};

        v1.classConstruct = function () {
          var v2 = MovieClip.prototype;
          var v3 = mx.styles.CSSSetStyle.prototype;
          mx.styles.CSSStyleDeclaration.prototype.setStyle = v3._setStyle;
          v2.changeTextStyleInChildren = v3.changeTextStyleInChildren;
          v2.changeColorStyleInChildren = v3.changeColorStyleInChildren;
          v2.notifyStyleChangeInChildren = v3.notifyStyleChangeInChildren;
          v2.setStyle = v3.setStyle;
          _global.ASSetPropFlags(v2, 'changeTextStyleInChildren', 1);
          _global.ASSetPropFlags(v2, 'changeColorStyleInChildren', 1);
          _global.ASSetPropFlags(v2, 'notifyStyleChangeInChildren', 1);
          _global.ASSetPropFlags(v2, 'setStyle', 1);
          var v4 = TextField.prototype;
          v4.setStyle = v2.setStyle;
          v4.changeTextStyleInChildren = v3.changeTextStyleInChildren;
          return true;
        };

        v1.classConstructed = mx.styles.CSSSetStyle.classConstruct();
        v1.CSSStyleDeclarationDependency = mx.styles.CSSStyleDeclaration;
        ASSetPropFlags(mx.styles.CSSSetStyle.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 261 __Packages.mx.core.ext.UIComponentExtensions {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.ext) {
        _global.mx.core.ext = new Object();
      }
      if (!_global.mx.core.ext.UIComponentExtensions) {
        var v1 = function () {};

        mx.core.ext.UIComponentExtensions = v1;
        var v2 = v1.prototype;
        v1.Extensions = function () {
          if (mx.core.ext.UIComponentExtensions.bExtended == true) {
            return true;
          }
          mx.core.ext.UIComponentExtensions.bExtended = true;
          TextField.prototype.setFocus = function () {
            Selection.setFocus(this);
          };

          TextField.prototype.onSetFocus = function (oldFocus) {
            if (this.tabEnabled != false) {
              if ((this.getFocusManager()).bDrawFocus) {
                this.drawFocus(true);
              }
            }
          };

          TextField.prototype.onKillFocus = function (oldFocus) {
            if (this.tabEnabled != false) {
              this.drawFocus(false);
            }
          };

          TextField.prototype.drawFocus = mx.core.UIComponent.prototype.drawFocus;
          TextField.prototype.getFocusManager = mx.core.UIComponent.prototype.getFocusManager;
          mx.managers.OverlappedWindows.enableOverlappedWindows();
          mx.styles.CSSSetStyle.enableRunTimeCSS();
          mx.managers.FocusManager.enableFocusManagement();
        };

        v1.bExtended = false;
        v1.UIComponentExtended = mx.core.ext.UIComponentExtensions.Extensions();
        v1.UIComponentDependency = mx.core.UIComponent;
        v1.FocusManagerDependency = mx.managers.FocusManager;
        v1.OverlappedWindowsDependency = mx.managers.OverlappedWindows;
        ASSetPropFlags(mx.core.ext.UIComponentExtensions.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 262 __Packages.mx.skins.Border {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.Border) {
        var v1 = function () {
          super();
        };

        mx.skins.Border = v1;
        var v2 = new mx.core.UIObject();
        mx.skins.Border.prototype = v2;
        v2.init = function (Void) {
          super.init();
        };

        v1.symbolName = 'Border';
        v1.symbolOwner = mx.skins.Border;
        v2.className = 'Border';
        v2.tagBorder = 0;
        v2.idNames = new Array('border_mc');
        ASSetPropFlags(mx.skins.Border.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 263 __Packages.mx.skins.RectBorder {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.RectBorder) {
        var v1 = function () {
          super();
        };

        mx.skins.RectBorder = v1;
        var v2 = new mx.skins.Border();
        mx.skins.RectBorder.prototype = v2;
        v2.__get__width = function () {
          return this.__width;
        };

        v2.__get__height = function () {
          return this.__height;
        };

        v2.init = function (Void) {
          super.init();
        };

        v2.draw = function (Void) {
          this.size();
        };

        v2.getBorderMetrics = function (Void) {
          var v2 = this.offset;
          if (this.__borderMetrics == undefined) {
            this.__borderMetrics = {'left': v2, 'top': v2, 'right': v2, 'bottom': v2};
            return this.__borderMetrics;
          }
          this.__borderMetrics.left = v2;
          this.__borderMetrics.top = v2;
          this.__borderMetrics.right = v2;
          this.__borderMetrics.bottom = v2;
          return this.__borderMetrics;
        };

        v2.__get__borderMetrics = function () {
          return this.getBorderMetrics();
        };

        v2.drawBorder = function (Void) {};

        v2.size = function (Void) {
          this.drawBorder();
        };

        v2.setColor = function (Void) {
          this.drawBorder();
        };

        v1.symbolName = 'RectBorder';
        v1.symbolOwner = mx.skins.RectBorder;
        v1.version = '2.0.2.126';
        v2.className = 'RectBorder';
        v2.borderStyleName = 'borderStyle';
        v2.borderColorName = 'borderColor';
        v2.shadowColorName = 'shadowColor';
        v2.highlightColorName = 'highlightColor';
        v2.buttonColorName = 'buttonColor';
        v2.backgroundColorName = 'backgroundColor';
        v2.addProperty('borderMetrics', v2.__get__borderMetrics, function () {});
        v2.addProperty('height', v2.__get__height, function () {});
        v2.addProperty('width', v2.__get__width, function () {});
        ASSetPropFlags(mx.skins.RectBorder.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 264 __Packages.mx.skins.halo.RectBorder {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.halo) {
        _global.mx.skins.halo = new Object();
      }
      if (!_global.mx.skins.halo.RectBorder) {
        var v1 = function () {
          super();
        };

        mx.skins.halo.RectBorder = v1;
        var v2 = new mx.skins.RectBorder();
        mx.skins.halo.RectBorder.prototype = v2;
        v2.init = function (Void) {
          this.borderWidths.default = 3;
          super.init();
        };

        v2.getBorderMetrics = function (Void) {
          if (this.offset == undefined) {
            var v3 = this.getStyle(this.borderStyleName);
            this.offset = this.borderWidths[v3];
          }
          if (this.getStyle(this.borderStyleName) == 'default' || this.getStyle(this.borderStyleName) == 'alert') {
            this.__borderMetrics = {'left': 3, 'top': 1, 'right': 3, 'bottom': 3};
            return this.__borderMetrics;
          }
          return super.getBorderMetrics();
        };

        v2.drawBorder = function (Void) {
          var v6 = _global.styles[this.className];
          if (v6 == undefined) {
            v6 = _global.styles.RectBorder;
          }
          var v5 = this.getStyle(this.borderStyleName);
          var v7 = this.getStyle(this.borderColorName);
          if (v7 == undefined) {
            v7 = v6[this.borderColorName];
          }
          var v8 = this.getStyle(this.backgroundColorName);
          if (v8 == undefined) {
            v8 = v6[this.backgroundColorName];
          }
          var v16 = this.getStyle('backgroundImage');
          if (v5 != 'none') {
            var v14 = this.getStyle(this.shadowColorName);
            if (v14 == undefined) {
              v14 = v6[this.shadowColorName];
            }
            var v13 = this.getStyle(this.highlightColorName);
            if (v13 == undefined) {
              v13 = v6[this.highlightColorName];
            }
            var v12 = this.getStyle(this.buttonColorName);
            if (v12 == undefined) {
              v12 = v6[this.buttonColorName];
            }
            var v11 = this.getStyle(this.borderCapColorName);
            if (v11 == undefined) {
              v11 = v6[this.borderCapColorName];
            }
            var v10 = this.getStyle(this.shadowCapColorName);
            if (v10 == undefined) {
              v10 = v6[this.shadowCapColorName];
            }
          }
          this.offset = this.borderWidths[v5];
          var v9 = this.offset;
          var v3 = this.__get__width();
          var v4 = this.__get__height();
          this.clear();
          this._color = undefined;
          if (v5 == 'none') {
          } else {
            if (v5 == 'inset') {
              this._color = this.colorList;
              this.draw3dBorder(v11, v12, v7, v13, v14, v10);
            } else {
              if (v5 == 'outset') {
                this._color = this.colorList;
                this.draw3dBorder(v11, v7, v12, v14, v13, v10);
              } else {
                if (v5 == 'alert') {
                  var v15 = this.getStyle('themeColor');
                  this.drawRoundRect(0, 5, v3, v4 - 5, 5, 6184542, 10);
                  this.drawRoundRect(1, 4, v3 - 2, v4 - 5, 4, [6184542, 6184542], 10, 0, 'radial');
                  this.drawRoundRect(2, 0, v3 - 4, v4 - 2, 3, [0, 14342874], 100, 0, 'radial');
                  this.drawRoundRect(2, 0, v3 - 4, v4 - 2, 3, v15, 50);
                  this.drawRoundRect(3, 1, v3 - 6, v4 - 4, 2, 16777215, 100);
                } else {
                  if (v5 == 'default') {
                    this.drawRoundRect(0, 5, v3, v4 - 5, {'tl': 5, 'tr': 5, 'br': 0, 'bl': 0}, 6184542, 10);
                    this.drawRoundRect(1, 4, v3 - 2, v4 - 5, {'tl': 4, 'tr': 4, 'br': 0, 'bl': 0}, [6184542, 6184542], 10, 0, 'radial');
                    this.drawRoundRect(2, 0, v3 - 4, v4 - 2, {'tl': 3, 'tr': 3, 'br': 0, 'bl': 0}, [12897484, 11844796], 100, 0, 'radial');
                    this.drawRoundRect(3, 1, v3 - 6, v4 - 4, {'tl': 2, 'tr': 2, 'br': 0, 'bl': 0}, 16777215, 100);
                  } else {
                    if (v5 == 'dropDown') {
                      this.drawRoundRect(0, 0, v3 + 1, v4, {'tl': 4, 'tr': 0, 'br': 0, 'bl': 4}, [13290186, 7895160], 100, -10, 'linear');
                      this.drawRoundRect(1, 1, v3 - 1, v4 - 2, {'tl': 3, 'tr': 0, 'br': 0, 'bl': 3}, 16777215, 100);
                    } else {
                      if (v5 == 'menuBorder') {
                        var v15 = this.getStyle('themeColor');
                        this.drawRoundRect(4, 4, v3 - 2, v4 - 3, 0, [6184542, 6184542], 10, 0, 'radial');
                        this.drawRoundRect(4, 4, v3 - 1, v4 - 2, 0, 6184542, 10);
                        this.drawRoundRect(0, 0, v3 + 1, v4, 0, [0, 14342874], 100, 250, 'linear');
                        this.drawRoundRect(0, 0, v3 + 1, v4, 0, v15, 50);
                        this.drawRoundRect(2, 2, v3 - 3, v4 - 4, 0, 16777215, 100);
                      } else {
                        if (v5 == 'comboNonEdit') {
                        } else {
                          this.beginFill(v7);
                          this.drawRect(0, 0, v3, v4);
                          this.drawRect(1, 1, v3 - 1, v4 - 1);
                          this.endFill();
                          this._color = this.borderColorName;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v8 != undefined) {
            this.beginFill(v8);
            this.drawRect(v9, v9, this.__get__width() - v9, this.__get__height() - v9);
            this.endFill();
          }
        };

        v2.draw3dBorder = function (c1, c2, c3, c4, c5, c6) {
          var v3 = this.__get__width();
          var v2 = this.__get__height();
          this.beginFill(c1);
          this.drawRect(0, 0, v3, v2);
          this.drawRect(1, 0, v3 - 1, v2);
          this.endFill();
          this.beginFill(c2);
          this.drawRect(1, 0, v3 - 1, 1);
          this.endFill();
          this.beginFill(c3);
          this.drawRect(1, v2 - 1, v3 - 1, v2);
          this.endFill();
          this.beginFill(c4);
          this.drawRect(1, 1, v3 - 1, 2);
          this.endFill();
          this.beginFill(c5);
          this.drawRect(1, v2 - 2, v3 - 1, v2 - 1);
          this.endFill();
          this.beginFill(c6);
          this.drawRect(1, 2, v3 - 1, v2 - 2);
          this.drawRect(2, 2, v3 - 2, v2 - 2);
          this.endFill();
        };

        v1.classConstruct = function () {
          mx.core.ext.UIObjectExtensions.Extensions();
          _global.styles.rectBorderClass = mx.skins.halo.RectBorder;
          _global.skinRegistry.RectBorder = true;
          return true;
        };

        v1.symbolName = 'RectBorder';
        v1.symbolOwner = mx.skins.halo.RectBorder;
        v1.version = '2.0.2.126';
        v2.borderCapColorName = 'borderCapColor';
        v2.shadowCapColorName = 'shadowCapColor';
        v2.colorList = {'highlightColor': 0, 'borderColor': 0, 'buttonColor': 0, 'shadowColor': 0, 'borderCapColor': 0, 'shadowCapColor': 0};
        v2.borderWidths = {'none': 0, 'solid': 1, 'inset': 2, 'outset': 2, 'alert': 3, 'dropDown': 2, 'menuBorder': 2, 'comboNonEdit': 2};
        v1.classConstructed = mx.skins.halo.RectBorder.classConstruct();
        v1.UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
        ASSetPropFlags(mx.skins.halo.RectBorder.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 265 __Packages.mx.skins.halo.ButtonSkin {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.halo) {
        _global.mx.skins.halo = new Object();
      }
      if (!_global.mx.skins.halo.ButtonSkin) {
        var v1 = function () {
          super();
        };

        mx.skins.halo.ButtonSkin = v1;
        var v2 = new mx.skins.RectBorder();
        mx.skins.halo.ButtonSkin.prototype = v2;
        v2.init = function () {
          super.init();
        };

        v2.size = function () {
          this.drawHaloRect(this.__get__width(), this.__get__height());
        };

        v2.drawHaloRect = function (w, h) {
          var v6 = this.getStyle('borderStyle');
          var v4 = this.getStyle('themeColor');
          var v5 = this._parent.emphasized;
          this.clear();
          switch (v6) {
            case 'falseup':
              if (v5) {
                this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 9542041, 100);
                this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 75);
                this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16777215], 85, 0, 'radial');
                this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
                this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, v4, 75);
                this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
                this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, 16316664, 100);
              } else {
                this.drawRoundRect(0, 0, w, h, 5, 9542041, 100);
                this.drawRoundRect(1, 1, w - 2, h - 2, 4, [13291985, 16250871], 100, 0, 'radial');
                this.drawRoundRect(2, 2, w - 4, h - 4, 3, [9542041, 13818586], 100, 0, 'radial');
                this.drawRoundRect(3, 3, w - 6, h - 6, 2, 16777215, 100);
                this.drawRoundRect(3, 4, w - 6, h - 7, 2, 16316664, 100);
              }
              break;
            case 'falsedown':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 9542041, 100);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16579836], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, v4, 50);
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 40);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, v4, 20);
              break;
            case 'falserollover':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 9542041, 100);
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 50);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16777215], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, v4, 50);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, 16316664, 100);
              break;
            case 'falsedisabled':
              this.drawRoundRect(0, 0, w, h, 5, 13159628, 100);
              this.drawRoundRect(1, 1, w - 2, h - 2, 4, 15921906, 100);
              this.drawRoundRect(2, 2, w - 4, h - 4, 3, 13949401, 100);
              this.drawRoundRect(3, 3, w - 6, h - 6, 2, 15921906, 100);
              break;
            case 'trueup':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 10066329, 100);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16579836], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, v4, 50);
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 40);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, 16250871, 100);
              break;
            case 'truedown':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 10066329, 100);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16579836], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, v4, 50);
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 40);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, v4, 20);
              break;
            case 'truerollover':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 9542041, 100);
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 50);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16777215], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, v4, 40);
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, v4, 40);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, 16316664, 100);
              break;
            case 'truedisabled':
              this.drawRoundRect(0, 0, w, h, 5, 13159628, 100);
              this.drawRoundRect(1, 1, w - 2, h - 2, 4, 15921906, 100);
              this.drawRoundRect(2, 2, w - 4, h - 4, 3, 13949401, 100);
              this.drawRoundRect(3, 3, w - 6, h - 6, 2, 15921906, 100);
          }
        };

        v1.classConstruct = function () {
          mx.core.ext.UIObjectExtensions.Extensions();
          _global.skinRegistry.ButtonSkin = true;
          return true;
        };

        v1.symbolName = 'ButtonSkin';
        v1.symbolOwner = mx.skins.halo.ButtonSkin;
        v2.className = 'ButtonSkin';
        v2.backgroundColorName = 'buttonColor';
        v1.classConstructed = mx.skins.halo.ButtonSkin.classConstruct();
        v1.UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
        ASSetPropFlags(mx.skins.halo.ButtonSkin.prototype, null, 1);
      }
    #endinitclip
  }
}
