package com.flashdynamix.ui {	import flash.display.BlendMode;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.MouseEvent;	import com.flashdynamix.abstract.AbstractDisplay;	import com.flashdynamix.events.VideoControlEvent;	import com.flashdynamix.events.VolumeSliderEvent;		/**	 * @author FlashDynamix	 */	public class VideoControl extends AbstractDisplay {		public var fullScreenButton : VideoControlButton;		public var pauseButton : VideoControlButton;		public var playButton : VideoControlButton;		public var rewindButton : VideoControlButton;		public var volumeSlider : VolumeSlider;		public var progressBar : Sprite;		public var loadBar : Sprite;		public var trackBar : Sprite;		public var progressArrow : Sprite;		public var bg : Sprite;		private var _position : Number = 0;		private var _progress : Number = 0;		private var _seeking : Boolean = false;		private var barWidth : int;		public function VideoControl() {			super();						fullScreenButton.buttonMode = true;			pauseButton.buttonMode = true;			playButton.buttonMode = true;			rewindButton.buttonMode = true;			trackBar.buttonMode = true;						progressArrow.buttonMode = true;			progressBar.mouseEnabled = false;			loadBar.mouseEnabled = false;						barWidth = trackBar.width;			progressBar.width = 0;			progressArrow.x = trackBar.x;						pauseButton.alpha = 1;			pauseButton.visible = false;						this.blendMode = BlendMode.LAYER;		}		override protected function added(event : Event) : void {			super.added(event);						addEvent(fullScreenButton, MouseEvent.MOUSE_DOWN, onFullScreen);			addEvent(pauseButton, MouseEvent.MOUSE_DOWN, onPlay);			addEvent(playButton, MouseEvent.MOUSE_DOWN, onPause);			addEvent(rewindButton, MouseEvent.MOUSE_DOWN, onRewind);			addEvent(trackBar, MouseEvent.MOUSE_DOWN, onSeekJump);			addEvent(progressArrow, MouseEvent.MOUSE_DOWN, onSeekStart);			addEvent(volumeSlider, VolumeSliderEvent.ON_CHANGE, onVolumeChange);						addEvent(this, Event.ENTER_FRAME, draw);		}		override protected function removed(event : Event) : void {			super.removed(event);						removeEvent(fullScreenButton, MouseEvent.MOUSE_DOWN, onFullScreen);			removeEvent(pauseButton, MouseEvent.MOUSE_DOWN, onPlay);			removeEvent(playButton, MouseEvent.MOUSE_DOWN, onPause);			removeEvent(rewindButton, MouseEvent.MOUSE_DOWN, onRewind);			removeEvent(trackBar, MouseEvent.MOUSE_DOWN, onSeekJump);			removeEvent(progressArrow, MouseEvent.MOUSE_DOWN, onSeekStart);			removeEvent(volumeSlider, VolumeSliderEvent.ON_CHANGE, onVolumeChange);						removeEvent(stage, MouseEvent.MOUSE_MOVE, onSeeking);			removeEvent(stage, MouseEvent.MOUSE_UP, onSeekEnd);						removeEvent(this, Event.ENTER_FRAME, draw);		}		public function set enabled(flag : Boolean) : void {			this.mouseEnabled = this.mouseChildren = flag;		}		public function set progress(amount : Number) : void {			_progress = amount;		}		public function set position(value : Number) : void {			if(_seeking) return;			_position = value;		}		public function get position() : Number {			return _position;		}		public function set volume(value : Number) : void {			volumeSlider.position = value;		}		public function get volume() : Number {			return volumeSlider.position;		}		public function setWidth(pixels : int) : void {			barWidth = pixels - 110;						bg.width = pixels;			trackBar.width = barWidth;			progressBar.width = _position * barWidth;			loadBar.width = _progress * barWidth;			progressArrow.x = progressBar.x + progressBar.width;			fullScreenButton.x = pixels - fullScreenButton.width - 5;			volumeSlider.x = fullScreenButton.x - volumeSlider.width - 8;		}		private function onVolumeChange(event : VolumeSliderEvent) : void {			this.dispatchEvent(new VideoControlEvent(VideoControlEvent.ON_VOLUME_CHANGE));		}		private function onFullScreen(event : MouseEvent) : void {			if(stage.displayState == StageDisplayState.NORMAL) {				stage.displayState = StageDisplayState.FULL_SCREEN;			} else {				stage.displayState = StageDisplayState.NORMAL;			}						this.dispatchEvent(new VideoControlEvent(VideoControlEvent.ON_FULL_SCREEN));		}		private function onPlay(event : MouseEvent) : void {			pauseButton.visible = false;			playButton.visible = true;						this.dispatchEvent(new VideoControlEvent(VideoControlEvent.ON_PLAY));		}		private function onPause(event : MouseEvent) : void {			pauseButton.visible = true;			playButton.visible = false;						this.dispatchEvent(new VideoControlEvent(VideoControlEvent.ON_PAUSE));		}		private function onRewind(event : MouseEvent) : void {			_position = 0;						this.dispatchEvent(new VideoControlEvent(VideoControlEvent.ON_SEEK));		}		private function onSeekJump(event : MouseEvent) : void {			_position = (mouseX - trackBar.x) / trackBar.width;						this.dispatchEvent(new VideoControlEvent(VideoControlEvent.ON_SEEK));						onSeekStart();		}		private function onSeekStart(event : MouseEvent = null) : void {			_seeking = true;						addEvent(stage, MouseEvent.MOUSE_MOVE, onSeeking);			addEvent(stage, MouseEvent.MOUSE_UP, onSeekEnd);		}		private function onSeeking(event : MouseEvent) : void {			progressArrow.x = Math.min(trackBar.x + trackBar.width, Math.max(trackBar.x, mouseX));						_position = (progressArrow.x - trackBar.x) / trackBar.width;			progressBar.width = _position * barWidth;		}		private function onSeekEnd(event : MouseEvent) : void {			_seeking = false;						removeEvent(stage, MouseEvent.MOUSE_MOVE, onSeeking);			removeEvent(stage, MouseEvent.MOUSE_UP, onSeekEnd);						this.dispatchEvent(new VideoControlEvent(VideoControlEvent.ON_SEEK));		}		private function draw(event : Event) : void {			progressBar.width += ((_position * barWidth) - progressBar.width) / 4;			loadBar.width += ((_progress * barWidth) - loadBar.width) / 4;			progressArrow.x = progressBar.x + progressBar.width;		}	}}