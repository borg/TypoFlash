package com.flashdynamix.ui {	import com.flashdynamix.abstract.AbstractDisplay;	import com.flashdynamix.data.*;	import com.flashdynamix.display.Poller;	import com.flashdynamix.display.ScanLines;	import com.flashdynamix.events.*;	import com.flashdynamix.motion.Tweensy;	import com.flashdynamix.services.YouTubeFLV;	import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.ui.Mouse;	import flash.utils.getTimer;		/**	 * @author FlashDynamix	 */	public class YouTubeVideoPlayer extends AbstractDisplay {
		public var imgPath : String = "";		public var videoId : String = "";
		private var flv : YouTubeFLV;		private var playback : VideoControl;		private var loader : Loader;		private var clickToPlayButton : ClickToPlayButton;		private var scanLines : ScanLines;		private var poller : Poller;
		private var lastUpdateTime : int;		private var playbackShown : Boolean = true;		private var _width : int = 320;		private var _height : int = 240;		private var loaded : Boolean = false;		private var container : DisplayObjectContainer;
		public function YouTubeVideoPlayer() {			super();						loader = new Loader();			scanLines = new ScanLines();			poller = new Poller();			flv = new YouTubeFLV("", true);			playback = new VideoControl();			clickToPlayButton = new ClickToPlayButton();						flv.alpha = playback.alpha = clickToPlayButton.alpha = 0;			flv.enabled = playback.enabled = false;						addEvent(flv, YouTubeFLVErrorEvent.ERROR, onPlayError);			addEvent(playback, VideoControlEvent.ON_PAUSE, onPause);			addEvent(playback, VideoControlEvent.ON_PLAY, onPlay);			addEvent(playback, VideoControlEvent.ON_SEEK, onSeek);			addEvent(playback, VideoControlEvent.ON_VOLUME_CHANGE, onVolumeChange);						addChild(clickToPlayButton);			addChild(flv);			addChild(scanLines);			addChild(playback);						setSize(_width, _height);		}
		override protected function added(event : Event) : void {			addEvent(stage, Event.FULLSCREEN, onFullScreen);		}
		public function load(videoId : String, autoPlay : Boolean = true) : void {			this.videoId = videoId;						loadPreview();						if(autoPlay) {				loadVideo();			} else {				clickToPlayButton.enabled = true;							Tweensy.to(clickToPlayButton, {alpha:0.9}, 2);				addEvent(this, MouseEvent.MOUSE_DOWN, mouseDown, true);			}		}
		public function set dataProvider(data : YouTubeVideo) : void {			load(data.id);		}
		public function pause() : void {			flv.pause();		}
		public function togglePause() : void {			flv.togglePause();		}
		public function resume() : void {			flv.resume();		}
		public function seek(secs : Number, allowSeekAhead : Boolean = true) : void {			flv.seek(secs, allowSeekAhead);		}
		public function stop() : void {			flv.stop();						removeEvent(this, Event.ENTER_FRAME, onProgress);		}
		public function setSize(width : int, height : int) : void {			_width = width;			_height = height;						resizeUI(_width, _height);		}
		public function get position() : Number {			return flv.position;		}
		public function get progress() : Number {			return flv.progress;		}
		public function set volume(amount : Number) : void {			flv.volume = amount;		}
		public function get volume() : Number {			return flv.volume;		}
		private function loadVideo() : void {			loaded = true;			lastUpdateTime = getTimer();						playback.position = 0;			playback.progress = 0;			clickToPlayButton.enabled = false;						Tweensy.to(flv, {alpha:0}, 2);			Tweensy.to(playback, {alpha:0}, 2);			Tweensy.to(clickToPlayButton, {alpha:0}, 2);						removeEvent(flv, YouTubeFLVEvent.ENDED, onPlayComplete);			removeEvent(this, MouseEvent.MOUSE_DOWN, mouseDown);			addEvent(flv, YouTubeFLVEvent.PLAYING, onPlayStart, true);						addChild(poller);			flv.clear();			flv.loadById(videoId);		}
		private function loadPreview() : void {			removeIfContains(loader);			loader = new Loader();						addEvent(loader.contentLoaderInfo, Event.COMPLETE, onImageLoaded);			addEvent(loader.contentLoaderInfo, IOErrorEvent.IO_ERROR, onImageError);						loader.load(new URLRequest("http://i.ytimg.com/vi/" + videoId + "/0.jpg"));		}
		private function resizeUI(width : Number, height : Number) : void {			var midX : int = int(width / 2);			var midY : int = int(height / 2);						playback.setWidth(width);			flv.setSize(width, height);			scanLines.setSize(width, height);						loader.width = width;			loader.height = height;			loader.y = int(midY - (loader.height / 2));			clickToPlayButton.x = int(midX - (clickToPlayButton.width / 2));			clickToPlayButton.y = int(midY - (clickToPlayButton.height / 2));			playback.y = height - 20;						poller.x = width / 2;			poller.y = height / 2;		}
		private function playAgain() : void {			Tweensy.to(clickToPlayButton, {alpha:0}, 2);			Tweensy.to(flv, {alpha:1}, 2);			Tweensy.to(playback, {alpha:1}, 2);			removeIfContains(poller);						playbackShown = true;			lastUpdateTime = getTimer();			clickToPlayButton.enabled = false;			flv.enabled = playback.enabled = true;				playback.position = 0;			flv.seek(0);						addEvent(this, Event.ENTER_FRAME, onProgress);			addEvent(this, Event.ENTER_FRAME, onInActiveCheck);			addEvent(this, MouseEvent.MOUSE_MOVE, mouseMove);			addEvent(flv, YouTubeFLVEvent.ENDED, onPlayComplete, true);						removeEvent(this, MouseEvent.MOUSE_DOWN, mouseDown);			removeEvent(flv, YouTubeFLVEvent.PLAYING, onPlayStart);		}
		private function onVolumeChange(event : VideoControlEvent) : void {			flv.volume = playback.volume;		}
		private function onSeek(event : VideoControlEvent) : void {			flv.position = playback.position;			lastUpdateTime = getTimer();		}
		private function onPlay(event : VideoControlEvent) : void {			flv.resume();			lastUpdateTime = getTimer();		}
		private function onPause(event : VideoControlEvent) : void {			flv.pause();			lastUpdateTime = getTimer();		}
		private function onProgress(event : Event) : void {			if(flv.seeking || !flv.ready) return;						playback.position = flv.position;			playback.progress = flv.progress;		}
		private function onInActiveCheck(event : Event) : void {			if(!inDisplayList) return;						var inActiveTime : Number = (getTimer() - lastUpdateTime) / 1000;						if(playback.hitTestPoint(stage.mouseX, stage.mouseY)) lastUpdateTime = getTimer();						if(inActiveTime > 4) hidePlayback();		}
		private function onImageLoaded(event : Event) : void {			loader.alpha = 0;			loader.width = _width;			loader.height = _height;			loader.y = int((_height / 2) - (loader.height / 2));						Tweensy.to(loader, {alpha:1}, 2);						addChildAt(loader, 0);		}
		private function onImageError(event : Event) : void {		}
		private function mouseDown(event : MouseEvent) : void {			if(!loaded) {				loadVideo();			} else {				playAgain();			}		}
		private function mouseMove(event : MouseEvent) : void {			showPlayback();		}
		private function onFullScreen(event : Event) : void {			if(stage.displayState == StageDisplayState.FULL_SCREEN) {				resizeUI(stage.stageWidth, stage.stageHeight);				container = parent;				stage.addChild(this);			} else if(container) {				resizeUI(_width, _height);				container.addChild(this);				container = null;				Mouse.show();			}						showPlayback();		}
		private function onPlayStart(event : YouTubeFLVEvent) : void {			Tweensy.to(flv, {alpha:1}, 2);			Tweensy.to(playback, {alpha:1}, 2);			removeIfContains(poller);						playbackShown = true;			lastUpdateTime = getTimer();			flv.enabled = playback.enabled = true;							addEvent(this, Event.ENTER_FRAME, onProgress);			addEvent(this, Event.ENTER_FRAME, onInActiveCheck);			addEvent(this, MouseEvent.MOUSE_MOVE, mouseMove);			addEvent(flv, YouTubeFLVEvent.ENDED, onPlayComplete, true);			removeEvent(flv, YouTubeFLVEvent.PLAYING, onPlayStart);		}
		private function onPlayComplete(event : YouTubeFLVEvent) : void {			Tweensy.to(clickToPlayButton, {alpha:0.9}, 2);			Tweensy.to(flv, {alpha:0}, 2);			Tweensy.to(playback, {alpha:0}, 2);						playback.position = 1;			playback.progress = 1;						clickToPlayButton.enabled = true;			flv.enabled = playback.enabled = false;			Mouse.show();						removeEvent(this, Event.ENTER_FRAME, onProgress);			removeEvent(this, Event.ENTER_FRAME, onInActiveCheck);			removeEvent(this, MouseEvent.MOUSE_MOVE, mouseMove);			addEvent(this, MouseEvent.MOUSE_DOWN, mouseDown);		}
		private function onPlayError(event : YouTubeFLVErrorEvent) : void {			switch(event.code) {				case YouTubePlayerErrorCode.PLAYER_LOAD_ERROR:					break;				case YouTubePlayerErrorCode.PLAYER_WRAPPER_NOT_FOUND:					break;				case YouTubePlayerErrorCode.VIDEO_NO_EMBED:					break;				case YouTubePlayerErrorCode.VIDEO_NOT_FOUND:					break;			}		}
		private function showPlayback() : void {			if(playbackShown) return;						lastUpdateTime = getTimer();			Tweensy.to(playback, {alpha:1});			if(stage.displayState == StageDisplayState.FULL_SCREEN) Mouse.show();						playbackShown = true;		}
		private function hidePlayback() : void {			if(!playbackShown) return;						Tweensy.to(playback, {alpha:0});			if(stage.displayState == StageDisplayState.FULL_SCREEN) Mouse.hide();						playbackShown = false;		}	}}